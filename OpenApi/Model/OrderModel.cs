// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenApi.Client;

namespace OpenApi.Model
{
    /// <summary>
    /// OrderModel
    /// </summary>
    public partial class OrderModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="accountId">accountId</param>
        /// <param name="contractId">contractId</param>
        /// <param name="symbolId">symbolId</param>
        /// <param name="creationTimestamp">creationTimestamp</param>
        /// <param name="status">status</param>
        /// <param name="type">type</param>
        /// <param name="side">side</param>
        /// <param name="size">size</param>
        /// <param name="fillVolume">fillVolume</param>
        /// <param name="updateTimestamp">updateTimestamp</param>
        /// <param name="limitPrice">limitPrice</param>
        /// <param name="stopPrice">stopPrice</param>
        /// <param name="filledPrice">filledPrice</param>
        /// <param name="customTag">customTag</param>
        [JsonConstructor]
        public OrderModel(long id, int accountId, string contractId, string symbolId, DateTimeOffset creationTimestamp, OrderStatus status, OrderType type, OrderSide side, int size, int fillVolume, Option<DateTimeOffset?> updateTimestamp = default, Option<decimal?> limitPrice = default, Option<decimal?> stopPrice = default, Option<decimal?> filledPrice = default, Option<string?> customTag = default)
        {
            Id = id;
            AccountId = accountId;
            ContractId = contractId;
            SymbolId = symbolId;
            CreationTimestamp = creationTimestamp;
            Status = status;
            Type = type;
            Side = side;
            Size = size;
            FillVolume = fillVolume;
            UpdateTimestampOption = updateTimestamp;
            LimitPriceOption = limitPrice;
            StopPriceOption = stopPrice;
            FilledPriceOption = filledPrice;
            CustomTagOption = customTag;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public OrderStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public OrderType Type { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [JsonPropertyName("side")]
        public OrderSide Side { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets SymbolId
        /// </summary>
        [JsonPropertyName("symbolId")]
        public string SymbolId { get; set; }

        /// <summary>
        /// Gets or Sets CreationTimestamp
        /// </summary>
        [JsonPropertyName("creationTimestamp")]
        public DateTimeOffset CreationTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }

        /// <summary>
        /// Gets or Sets FillVolume
        /// </summary>
        [JsonPropertyName("fillVolume")]
        public int FillVolume { get; set; }

        /// <summary>
        /// Used to track the state of UpdateTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> UpdateTimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdateTimestamp
        /// </summary>
        [JsonPropertyName("updateTimestamp")]
        public DateTimeOffset? UpdateTimestamp { get { return this.UpdateTimestampOption; } set { this.UpdateTimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of LimitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LimitPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets LimitPrice
        /// </summary>
        [JsonPropertyName("limitPrice")]
        public decimal? LimitPrice { get { return this.LimitPriceOption; } set { this.LimitPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of StopPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StopPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [JsonPropertyName("stopPrice")]
        public decimal? StopPrice { get { return this.StopPriceOption; } set { this.StopPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of FilledPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> FilledPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets FilledPrice
        /// </summary>
        [JsonPropertyName("filledPrice")]
        public decimal? FilledPrice { get { return this.FilledPriceOption; } set { this.FilledPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomTag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomTagOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomTag
        /// </summary>
        [JsonPropertyName("customTag")]
        public string? CustomTag { get { return this.CustomTagOption; } set { this.CustomTagOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  FillVolume: ").Append(FillVolume).Append("\n");
            sb.Append("  UpdateTimestamp: ").Append(UpdateTimestamp).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  FilledPrice: ").Append(FilledPrice).Append("\n");
            sb.Append("  CustomTag: ").Append(CustomTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OrderModel" />
    /// </summary>
    public class OrderModelJsonConverter : JsonConverter<OrderModel>
    {
        /// <summary>
        /// The format to use to serialize CreationTimestamp
        /// </summary>
        public static string CreationTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdateTimestamp
        /// </summary>
        public static string UpdateTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="OrderModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OrderModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<int?> accountId = default;
            Option<string?> contractId = default;
            Option<string?> symbolId = default;
            Option<DateTimeOffset?> creationTimestamp = default;
            Option<OrderStatus?> status = default;
            Option<OrderType?> type = default;
            Option<OrderSide?> side = default;
            Option<int?> size = default;
            Option<int?> fillVolume = default;
            Option<DateTimeOffset?> updateTimestamp = default;
            Option<decimal?> limitPrice = default;
            Option<decimal?> stopPrice = default;
            Option<decimal?> filledPrice = default;
            Option<string?> customTag = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contractId":
                            contractId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "symbolId":
                            symbolId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creationTimestamp":
                            creationTimestamp = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<OrderStatus?>(OrderStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<OrderType?>(OrderTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "side":
                            string? sideRawValue = utf8JsonReader.GetString();
                            if (sideRawValue != null)
                                side = new Option<OrderSide?>(OrderSideValueConverter.FromStringOrDefault(sideRawValue));
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "fillVolume":
                            fillVolume = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updateTimestamp":
                            updateTimestamp = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "limitPrice":
                            limitPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "stopPrice":
                            stopPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "filledPrice":
                            filledPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "customTag":
                            customTag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(id));

            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(accountId));

            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(contractId));

            if (!symbolId.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(symbolId));

            if (!creationTimestamp.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(creationTimestamp));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(status));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(type));

            if (!side.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(side));

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(size));

            if (!fillVolume.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(fillVolume));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OrderModel.");

            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class OrderModel.");

            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class OrderModel.");

            if (symbolId.IsSet && symbolId.Value == null)
                throw new ArgumentNullException(nameof(symbolId), "Property is not nullable for class OrderModel.");

            if (creationTimestamp.IsSet && creationTimestamp.Value == null)
                throw new ArgumentNullException(nameof(creationTimestamp), "Property is not nullable for class OrderModel.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class OrderModel.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class OrderModel.");

            if (side.IsSet && side.Value == null)
                throw new ArgumentNullException(nameof(side), "Property is not nullable for class OrderModel.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class OrderModel.");

            if (fillVolume.IsSet && fillVolume.Value == null)
                throw new ArgumentNullException(nameof(fillVolume), "Property is not nullable for class OrderModel.");

            if (updateTimestamp.IsSet && updateTimestamp.Value == null)
                throw new ArgumentNullException(nameof(updateTimestamp), "Property is not nullable for class OrderModel.");

            if (limitPrice.IsSet && limitPrice.Value == null)
                throw new ArgumentNullException(nameof(limitPrice), "Property is not nullable for class OrderModel.");

            if (stopPrice.IsSet && stopPrice.Value == null)
                throw new ArgumentNullException(nameof(stopPrice), "Property is not nullable for class OrderModel.");

            if (filledPrice.IsSet && filledPrice.Value == null)
                throw new ArgumentNullException(nameof(filledPrice), "Property is not nullable for class OrderModel.");

            if (customTag.IsSet && customTag.Value == null)
                throw new ArgumentNullException(nameof(customTag), "Property is not nullable for class OrderModel.");

            return new OrderModel(id.Value!.Value!, accountId.Value!.Value!, contractId.Value!, symbolId.Value!, creationTimestamp.Value!.Value!, status.Value!.Value!, type.Value!.Value!, side.Value!.Value!, size.Value!.Value!, fillVolume.Value!.Value!, updateTimestamp, limitPrice, stopPrice, filledPrice, customTag);
        }

        /// <summary>
        /// Serializes a <see cref="OrderModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="orderModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OrderModel orderModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, orderModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OrderModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="orderModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OrderModel orderModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (orderModel.ContractId == null)
                throw new ArgumentNullException(nameof(orderModel.ContractId), "Property is required for class OrderModel.");

            if (orderModel.SymbolId == null)
                throw new ArgumentNullException(nameof(orderModel.SymbolId), "Property is required for class OrderModel.");

            if (orderModel.CustomTagOption.IsSet && orderModel.CustomTag == null)
                throw new ArgumentNullException(nameof(orderModel.CustomTag), "Property is required for class OrderModel.");

            writer.WriteNumber("id", orderModel.Id);

            writer.WriteNumber("accountId", orderModel.AccountId);

            writer.WriteString("contractId", orderModel.ContractId);

            writer.WriteString("symbolId", orderModel.SymbolId);

            writer.WriteString("creationTimestamp", orderModel.CreationTimestamp.ToString(CreationTimestampFormat));

            var statusRawValue = OrderStatusValueConverter.ToJsonValue(orderModel.Status);
            writer.WriteNumber("status", statusRawValue);

            var typeRawValue = OrderTypeValueConverter.ToJsonValue(orderModel.Type);
            writer.WriteNumber("type", typeRawValue);

            var sideRawValue = OrderSideValueConverter.ToJsonValue(orderModel.Side);
            writer.WriteNumber("side", sideRawValue);

            writer.WriteNumber("size", orderModel.Size);

            writer.WriteNumber("fillVolume", orderModel.FillVolume);

            if (orderModel.UpdateTimestampOption.IsSet)
                writer.WriteString("updateTimestamp", orderModel.UpdateTimestampOption.Value!.Value.ToString(UpdateTimestampFormat));

            if (orderModel.LimitPriceOption.IsSet)
                writer.WriteNumber("limitPrice", orderModel.LimitPriceOption.Value!.Value);

            if (orderModel.StopPriceOption.IsSet)
                writer.WriteNumber("stopPrice", orderModel.StopPriceOption.Value!.Value);

            if (orderModel.FilledPriceOption.IsSet)
                writer.WriteNumber("filledPrice", orderModel.FilledPriceOption.Value!.Value);

            if (orderModel.CustomTagOption.IsSet)
                writer.WriteString("customTag", orderModel.CustomTag);
        }
    }
}
