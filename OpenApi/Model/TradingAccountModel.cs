// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenApi.Client;

namespace OpenApi.Model
{
    /// <summary>
    /// TradingAccountModel
    /// </summary>
    public partial class TradingAccountModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingAccountModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="balance">balance</param>
        /// <param name="canTrade">canTrade</param>
        /// <param name="isVisible">isVisible</param>
        /// <param name="simulated">simulated</param>
        [JsonConstructor]
        public TradingAccountModel(int id, string name, decimal balance, bool canTrade, bool isVisible, bool simulated)
        {
            Id = id;
            Name = name;
            Balance = balance;
            CanTrade = canTrade;
            IsVisible = isVisible;
            Simulated = simulated;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [JsonPropertyName("balance")]
        public decimal Balance { get; set; }

        /// <summary>
        /// Gets or Sets CanTrade
        /// </summary>
        [JsonPropertyName("canTrade")]
        public bool CanTrade { get; set; }

        /// <summary>
        /// Gets or Sets IsVisible
        /// </summary>
        [JsonPropertyName("isVisible")]
        public bool IsVisible { get; set; }

        /// <summary>
        /// Gets or Sets Simulated
        /// </summary>
        [JsonPropertyName("simulated")]
        public bool Simulated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TradingAccountModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  CanTrade: ").Append(CanTrade).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  Simulated: ").Append(Simulated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TradingAccountModel" />
    /// </summary>
    public class TradingAccountModelJsonConverter : JsonConverter<TradingAccountModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="TradingAccountModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TradingAccountModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> name = default;
            Option<decimal?> balance = default;
            Option<bool?> canTrade = default;
            Option<bool?> isVisible = default;
            Option<bool?> simulated = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "balance":
                            balance = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "canTrade":
                            canTrade = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isVisible":
                            isVisible = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "simulated":
                            simulated = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(name));

            if (!balance.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(balance));

            if (!canTrade.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(canTrade));

            if (!isVisible.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(isVisible));

            if (!simulated.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(simulated));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TradingAccountModel.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class TradingAccountModel.");

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class TradingAccountModel.");

            if (canTrade.IsSet && canTrade.Value == null)
                throw new ArgumentNullException(nameof(canTrade), "Property is not nullable for class TradingAccountModel.");

            if (isVisible.IsSet && isVisible.Value == null)
                throw new ArgumentNullException(nameof(isVisible), "Property is not nullable for class TradingAccountModel.");

            if (simulated.IsSet && simulated.Value == null)
                throw new ArgumentNullException(nameof(simulated), "Property is not nullable for class TradingAccountModel.");

            return new TradingAccountModel(id.Value!.Value!, name.Value!, balance.Value!.Value!, canTrade.Value!.Value!, isVisible.Value!.Value!, simulated.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="TradingAccountModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tradingAccountModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TradingAccountModel tradingAccountModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tradingAccountModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TradingAccountModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tradingAccountModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TradingAccountModel tradingAccountModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tradingAccountModel.Name == null)
                throw new ArgumentNullException(nameof(tradingAccountModel.Name), "Property is required for class TradingAccountModel.");

            writer.WriteNumber("id", tradingAccountModel.Id);

            writer.WriteString("name", tradingAccountModel.Name);

            writer.WriteNumber("balance", tradingAccountModel.Balance);

            writer.WriteBoolean("canTrade", tradingAccountModel.CanTrade);

            writer.WriteBoolean("isVisible", tradingAccountModel.IsVisible);

            writer.WriteBoolean("simulated", tradingAccountModel.Simulated);
        }
    }
}
