// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPI.Client;

namespace OpenAPI.Model
{
    /// <summary>
    /// SearchContractRequest
    /// </summary>
    public partial class SearchContractRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchContractRequest" /> class.
        /// </summary>
        /// <param name="live">live</param>
        /// <param name="searchText">searchText</param>
        [JsonConstructor]
        public SearchContractRequest(bool live, Option<string?> searchText = default)
        {
            Live = live;
            SearchTextOption = searchText;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Live
        /// </summary>
        [JsonPropertyName("live")]
        public bool Live { get; set; }

        /// <summary>
        /// Used to track the state of SearchText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SearchTextOption { get; private set; }

        /// <summary>
        /// Gets or Sets SearchText
        /// </summary>
        [JsonPropertyName("searchText")]
        public string? SearchText { get { return this.SearchTextOption; } set { this.SearchTextOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchContractRequest {\n");
            sb.Append("  Live: ").Append(Live).Append("\n");
            sb.Append("  SearchText: ").Append(SearchText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchContractRequest" />
    /// </summary>
    public class SearchContractRequestJsonConverter : JsonConverter<SearchContractRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchContractRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchContractRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> live = default;
            Option<string?> searchText = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "live":
                            live = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "searchText":
                            searchText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!live.IsSet)
                throw new ArgumentException("Property is required for class SearchContractRequest.", nameof(live));

            if (live.IsSet && live.Value == null)
                throw new ArgumentNullException(nameof(live), "Property is not nullable for class SearchContractRequest.");

            if (searchText.IsSet && searchText.Value == null)
                throw new ArgumentNullException(nameof(searchText), "Property is not nullable for class SearchContractRequest.");

            return new SearchContractRequest(live.Value!.Value!, searchText);
        }

        /// <summary>
        /// Serializes a <see cref="SearchContractRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchContractRequest searchContractRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, searchContractRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SearchContractRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchContractRequest searchContractRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchContractRequest.SearchTextOption.IsSet && searchContractRequest.SearchText == null)
                throw new ArgumentNullException(nameof(searchContractRequest.SearchText), "Property is required for class SearchContractRequest.");

            writer.WriteBoolean("live", searchContractRequest.Live);

            if (searchContractRequest.SearchTextOption.IsSet)
                writer.WriteString("searchText", searchContractRequest.SearchText);
        }
    }
}
