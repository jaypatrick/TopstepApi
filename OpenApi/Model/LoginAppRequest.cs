// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenApi.Client;

namespace OpenApi.Model
{
    /// <summary>
    /// LoginAppRequest
    /// </summary>
    public partial class LoginAppRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginAppRequest" /> class.
        /// </summary>
        /// <param name="userName">userName</param>
        /// <param name="password">password</param>
        /// <param name="deviceId">deviceId</param>
        /// <param name="appId">appId</param>
        /// <param name="verifyKey">verifyKey</param>
        [JsonConstructor]
        public LoginAppRequest(string userName, string password, string deviceId, string appId, string verifyKey)
        {
            UserName = userName;
            Password = password;
            DeviceId = deviceId;
            AppId = appId;
            VerifyKey = verifyKey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [JsonPropertyName("userName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [JsonPropertyName("deviceId")]
        public string DeviceId { get; set; }

        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [JsonPropertyName("appId")]
        public string AppId { get; set; }

        /// <summary>
        /// Gets or Sets VerifyKey
        /// </summary>
        [JsonPropertyName("verifyKey")]
        public string VerifyKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginAppRequest {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  VerifyKey: ").Append(VerifyKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LoginAppRequest" />
    /// </summary>
    public class LoginAppRequestJsonConverter : JsonConverter<LoginAppRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoginAppRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoginAppRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userName = default;
            Option<string?> password = default;
            Option<string?> deviceId = default;
            Option<string?> appId = default;
            Option<string?> verifyKey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userName":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "password":
                            password = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "deviceId":
                            deviceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "appId":
                            appId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "verifyKey":
                            verifyKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userName.IsSet)
                throw new ArgumentException("Property is required for class LoginAppRequest.", nameof(userName));

            if (!password.IsSet)
                throw new ArgumentException("Property is required for class LoginAppRequest.", nameof(password));

            if (!deviceId.IsSet)
                throw new ArgumentException("Property is required for class LoginAppRequest.", nameof(deviceId));

            if (!appId.IsSet)
                throw new ArgumentException("Property is required for class LoginAppRequest.", nameof(appId));

            if (!verifyKey.IsSet)
                throw new ArgumentException("Property is required for class LoginAppRequest.", nameof(verifyKey));

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class LoginAppRequest.");

            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class LoginAppRequest.");

            if (deviceId.IsSet && deviceId.Value == null)
                throw new ArgumentNullException(nameof(deviceId), "Property is not nullable for class LoginAppRequest.");

            if (appId.IsSet && appId.Value == null)
                throw new ArgumentNullException(nameof(appId), "Property is not nullable for class LoginAppRequest.");

            if (verifyKey.IsSet && verifyKey.Value == null)
                throw new ArgumentNullException(nameof(verifyKey), "Property is not nullable for class LoginAppRequest.");

            return new LoginAppRequest(userName.Value!, password.Value!, deviceId.Value!, appId.Value!, verifyKey.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="LoginAppRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginAppRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoginAppRequest loginAppRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, loginAppRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LoginAppRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginAppRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoginAppRequest loginAppRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loginAppRequest.UserName == null)
                throw new ArgumentNullException(nameof(loginAppRequest.UserName), "Property is required for class LoginAppRequest.");

            if (loginAppRequest.Password == null)
                throw new ArgumentNullException(nameof(loginAppRequest.Password), "Property is required for class LoginAppRequest.");

            if (loginAppRequest.DeviceId == null)
                throw new ArgumentNullException(nameof(loginAppRequest.DeviceId), "Property is required for class LoginAppRequest.");

            if (loginAppRequest.AppId == null)
                throw new ArgumentNullException(nameof(loginAppRequest.AppId), "Property is required for class LoginAppRequest.");

            if (loginAppRequest.VerifyKey == null)
                throw new ArgumentNullException(nameof(loginAppRequest.VerifyKey), "Property is required for class LoginAppRequest.");

            writer.WriteString("userName", loginAppRequest.UserName);

            writer.WriteString("password", loginAppRequest.Password);

            writer.WriteString("deviceId", loginAppRequest.DeviceId);

            writer.WriteString("appId", loginAppRequest.AppId);

            writer.WriteString("verifyKey", loginAppRequest.VerifyKey);
        }
    }
}
