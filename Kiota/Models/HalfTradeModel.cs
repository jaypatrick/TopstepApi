// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Topstep.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class HalfTradeModel : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accountId property</summary>
        public int? AccountId
        {
            get { return BackingStore?.Get<int?>("accountId"); }
            set { BackingStore?.Set("accountId", value); }
        }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The contractId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractId
        {
            get { return BackingStore?.Get<string?>("contractId"); }
            set { BackingStore?.Set("contractId", value); }
        }
#nullable restore
#else
        public string ContractId
        {
            get { return BackingStore?.Get<string>("contractId"); }
            set { BackingStore?.Set("contractId", value); }
        }
#endif
        /// <summary>The creationTimestamp property</summary>
        public DateTimeOffset? CreationTimestamp
        {
            get { return BackingStore?.Get<DateTimeOffset?>("creationTimestamp"); }
            set { BackingStore?.Set("creationTimestamp", value); }
        }
        /// <summary>The fees property</summary>
        public decimal? Fees
        {
            get { return BackingStore?.Get<decimal?>("fees"); }
            set { BackingStore?.Set("fees", value); }
        }
        /// <summary>The id property</summary>
        public long? Id
        {
            get { return BackingStore?.Get<long?>("id"); }
            set { BackingStore?.Set("id", value); }
        }
        /// <summary>The orderId property</summary>
        public long? OrderId
        {
            get { return BackingStore?.Get<long?>("orderId"); }
            set { BackingStore?.Set("orderId", value); }
        }
        /// <summary>The price property</summary>
        public decimal? Price
        {
            get { return BackingStore?.Get<decimal?>("price"); }
            set { BackingStore?.Set("price", value); }
        }
        /// <summary>The profitAndLoss property</summary>
        public decimal? ProfitAndLoss
        {
            get { return BackingStore?.Get<decimal?>("profitAndLoss"); }
            set { BackingStore?.Set("profitAndLoss", value); }
        }
        /// <summary>0 = Bid1 = Ask</summary>
        public int? Side
        {
            get { return BackingStore?.Get<int?>("side"); }
            set { BackingStore?.Set("side", value); }
        }
        /// <summary>The size property</summary>
        public int? Size
        {
            get { return BackingStore?.Get<int?>("size"); }
            set { BackingStore?.Set("size", value); }
        }
        /// <summary>The voided property</summary>
        public bool? Voided
        {
            get { return BackingStore?.Get<bool?>("voided"); }
            set { BackingStore?.Set("voided", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Topstep.Api.Models.HalfTradeModel"/> and sets the default values.
        /// </summary>
        public HalfTradeModel()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Topstep.Api.Models.HalfTradeModel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Topstep.Api.Models.HalfTradeModel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Topstep.Api.Models.HalfTradeModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountId", n => { AccountId = n.GetIntValue(); } },
                { "contractId", n => { ContractId = n.GetStringValue(); } },
                { "creationTimestamp", n => { CreationTimestamp = n.GetDateTimeOffsetValue(); } },
                { "fees", n => { Fees = n.GetDecimalValue(); } },
                { "id", n => { Id = n.GetLongValue(); } },
                { "orderId", n => { OrderId = n.GetLongValue(); } },
                { "price", n => { Price = n.GetDecimalValue(); } },
                { "profitAndLoss", n => { ProfitAndLoss = n.GetDecimalValue(); } },
                { "side", n => { Side = n.GetIntValue(); } },
                { "size", n => { Size = n.GetIntValue(); } },
                { "voided", n => { Voided = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("accountId", AccountId);
            writer.WriteStringValue("contractId", ContractId);
            writer.WriteDateTimeOffsetValue("creationTimestamp", CreationTimestamp);
            writer.WriteDecimalValue("fees", Fees);
            writer.WriteLongValue("id", Id);
            writer.WriteLongValue("orderId", OrderId);
            writer.WriteDecimalValue("price", Price);
            writer.WriteDecimalValue("profitAndLoss", ProfitAndLoss);
            writer.WriteIntValue("side", Side);
            writer.WriteIntValue("size", Size);
            writer.WriteBoolValue("voided", Voided);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
