// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenApi.Client;

namespace OpenApi.Model
{
    /// <summary>
    /// RetrieveBarRequest
    /// </summary>
    public partial class RetrieveBarRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveBarRequest" /> class.
        /// </summary>
        /// <param name="contractId">contractId</param>
        /// <param name="live">live</param>
        /// <param name="startTime">startTime</param>
        /// <param name="endTime">endTime</param>
        /// <param name="unit">unit</param>
        /// <param name="unitNumber">unitNumber</param>
        /// <param name="limit">limit</param>
        /// <param name="includePartialBar">includePartialBar</param>
        [JsonConstructor]
        public RetrieveBarRequest(string contractId, bool live, DateTimeOffset startTime, DateTimeOffset endTime, AggregateBarUnit unit, int unitNumber, int limit, bool includePartialBar)
        {
            ContractId = contractId;
            Live = live;
            StartTime = startTime;
            EndTime = endTime;
            Unit = unit;
            UnitNumber = unitNumber;
            Limit = limit;
            IncludePartialBar = includePartialBar;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [JsonPropertyName("unit")]
        public AggregateBarUnit Unit { get; set; }

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets Live
        /// </summary>
        [JsonPropertyName("live")]
        public bool Live { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [JsonPropertyName("endTime")]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        /// Gets or Sets UnitNumber
        /// </summary>
        [JsonPropertyName("unitNumber")]
        public int UnitNumber { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [JsonPropertyName("limit")]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets IncludePartialBar
        /// </summary>
        [JsonPropertyName("includePartialBar")]
        public bool IncludePartialBar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RetrieveBarRequest {\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Live: ").Append(Live).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  IncludePartialBar: ").Append(IncludePartialBar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RetrieveBarRequest" />
    /// </summary>
    public class RetrieveBarRequestJsonConverter : JsonConverter<RetrieveBarRequest>
    {
        /// <summary>
        /// The format to use to serialize StartTime
        /// </summary>
        public static string StartTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndTime
        /// </summary>
        public static string EndTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="RetrieveBarRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RetrieveBarRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> contractId = default;
            Option<bool?> live = default;
            Option<DateTimeOffset?> startTime = default;
            Option<DateTimeOffset?> endTime = default;
            Option<AggregateBarUnit?> unit = default;
            Option<int?> unitNumber = default;
            Option<int?> limit = default;
            Option<bool?> includePartialBar = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contractId":
                            contractId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "live":
                            live = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "startTime":
                            startTime = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endTime":
                            endTime = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "unit":
                            string? unitRawValue = utf8JsonReader.GetString();
                            if (unitRawValue != null)
                                unit = new Option<AggregateBarUnit?>(AggregateBarUnitValueConverter.FromStringOrDefault(unitRawValue));
                            break;
                        case "unitNumber":
                            unitNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "limit":
                            limit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "includePartialBar":
                            includePartialBar = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(contractId));

            if (!live.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(live));

            if (!startTime.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(startTime));

            if (!endTime.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(endTime));

            if (!unit.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(unit));

            if (!unitNumber.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(unitNumber));

            if (!limit.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(limit));

            if (!includePartialBar.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(includePartialBar));

            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class RetrieveBarRequest.");

            if (live.IsSet && live.Value == null)
                throw new ArgumentNullException(nameof(live), "Property is not nullable for class RetrieveBarRequest.");

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class RetrieveBarRequest.");

            if (endTime.IsSet && endTime.Value == null)
                throw new ArgumentNullException(nameof(endTime), "Property is not nullable for class RetrieveBarRequest.");

            if (unit.IsSet && unit.Value == null)
                throw new ArgumentNullException(nameof(unit), "Property is not nullable for class RetrieveBarRequest.");

            if (unitNumber.IsSet && unitNumber.Value == null)
                throw new ArgumentNullException(nameof(unitNumber), "Property is not nullable for class RetrieveBarRequest.");

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class RetrieveBarRequest.");

            if (includePartialBar.IsSet && includePartialBar.Value == null)
                throw new ArgumentNullException(nameof(includePartialBar), "Property is not nullable for class RetrieveBarRequest.");

            return new RetrieveBarRequest(contractId.Value!, live.Value!.Value!, startTime.Value!.Value!, endTime.Value!.Value!, unit.Value!.Value!, unitNumber.Value!.Value!, limit.Value!.Value!, includePartialBar.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="RetrieveBarRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="retrieveBarRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RetrieveBarRequest retrieveBarRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, retrieveBarRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RetrieveBarRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="retrieveBarRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RetrieveBarRequest retrieveBarRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (retrieveBarRequest.ContractId == null)
                throw new ArgumentNullException(nameof(retrieveBarRequest.ContractId), "Property is required for class RetrieveBarRequest.");

            writer.WriteString("contractId", retrieveBarRequest.ContractId);

            writer.WriteBoolean("live", retrieveBarRequest.Live);

            writer.WriteString("startTime", retrieveBarRequest.StartTime.ToString(StartTimeFormat));

            writer.WriteString("endTime", retrieveBarRequest.EndTime.ToString(EndTimeFormat));

            var unitRawValue = AggregateBarUnitValueConverter.ToJsonValue(retrieveBarRequest.Unit);
            writer.WriteNumber("unit", unitRawValue);

            writer.WriteNumber("unitNumber", retrieveBarRequest.UnitNumber);

            writer.WriteNumber("limit", retrieveBarRequest.Limit);

            writer.WriteBoolean("includePartialBar", retrieveBarRequest.IncludePartialBar);
        }
    }
}
