// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace Topstep.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AggregateBarModel : IAdditionalDataHolder, IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData
        {
            get { return BackingStore.Get<IDictionary<string, object>>("AdditionalData") ?? new Dictionary<string, object>(); }
            set { BackingStore.Set("AdditionalData", value); }
        }
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The c property</summary>
        public decimal? C
        {
            get { return BackingStore?.Get<decimal?>("c"); }
            set { BackingStore?.Set("c", value); }
        }
        /// <summary>The h property</summary>
        public decimal? H
        {
            get { return BackingStore?.Get<decimal?>("h"); }
            set { BackingStore?.Set("h", value); }
        }
        /// <summary>The l property</summary>
        public decimal? L
        {
            get { return BackingStore?.Get<decimal?>("l"); }
            set { BackingStore?.Set("l", value); }
        }
        /// <summary>The o property</summary>
        public decimal? O
        {
            get { return BackingStore?.Get<decimal?>("o"); }
            set { BackingStore?.Set("o", value); }
        }
        /// <summary>The t property</summary>
        public DateTimeOffset? T
        {
            get { return BackingStore?.Get<DateTimeOffset?>("t"); }
            set { BackingStore?.Set("t", value); }
        }
        /// <summary>The v property</summary>
        public long? V
        {
            get { return BackingStore?.Get<long?>("v"); }
            set { BackingStore?.Set("v", value); }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Topstep.Api.Models.AggregateBarModel"/> and sets the default values.
        /// </summary>
        public AggregateBarModel()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Topstep.Api.Models.AggregateBarModel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Topstep.Api.Models.AggregateBarModel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Topstep.Api.Models.AggregateBarModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "c", n => { C = n.GetDecimalValue(); } },
                { "h", n => { H = n.GetDecimalValue(); } },
                { "l", n => { L = n.GetDecimalValue(); } },
                { "o", n => { O = n.GetDecimalValue(); } },
                { "t", n => { T = n.GetDateTimeOffsetValue(); } },
                { "v", n => { V = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDecimalValue("c", C);
            writer.WriteDecimalValue("h", H);
            writer.WriteDecimalValue("l", L);
            writer.WriteDecimalValue("o", O);
            writer.WriteDateTimeOffsetValue("t", T);
            writer.WriteLongValue("v", V);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
