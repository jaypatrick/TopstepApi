// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenApi.Client;

namespace OpenApi.Model
{
    /// <summary>
    /// PlaceOrderRequest
    /// </summary>
    public partial class PlaceOrderRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaceOrderRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        /// <param name="contractId">contractId</param>
        /// <param name="type">type</param>
        /// <param name="side">side</param>
        /// <param name="size">size</param>
        /// <param name="limitPrice">limitPrice</param>
        /// <param name="stopPrice">stopPrice</param>
        /// <param name="trailPrice">trailPrice</param>
        /// <param name="customTag">customTag</param>
        /// <param name="stopLossBracket">stopLossBracket</param>
        /// <param name="takeProfitBracket">takeProfitBracket</param>
        [JsonConstructor]
        public PlaceOrderRequest(int accountId, string contractId, OrderType type, OrderSide side, int size, Option<decimal?> limitPrice = default, Option<decimal?> stopPrice = default, Option<decimal?> trailPrice = default, Option<string?> customTag = default, Option<PlaceOrderBracket?> stopLossBracket = default, Option<PlaceOrderBracket?> takeProfitBracket = default)
        {
            AccountId = accountId;
            ContractId = contractId;
            Type = type;
            Side = side;
            Size = size;
            LimitPriceOption = limitPrice;
            StopPriceOption = stopPrice;
            TrailPriceOption = trailPrice;
            CustomTagOption = customTag;
            StopLossBracketOption = stopLossBracket;
            TakeProfitBracketOption = takeProfitBracket;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public OrderType Type { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [JsonPropertyName("side")]
        public OrderSide Side { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }

        /// <summary>
        /// Used to track the state of LimitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LimitPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets LimitPrice
        /// </summary>
        [JsonPropertyName("limitPrice")]
        public decimal? LimitPrice { get { return this.LimitPriceOption; } set { this.LimitPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of StopPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StopPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [JsonPropertyName("stopPrice")]
        public decimal? StopPrice { get { return this.StopPriceOption; } set { this.StopPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of TrailPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TrailPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TrailPrice
        /// </summary>
        [JsonPropertyName("trailPrice")]
        public decimal? TrailPrice { get { return this.TrailPriceOption; } set { this.TrailPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomTag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CustomTagOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomTag
        /// </summary>
        [JsonPropertyName("customTag")]
        public string? CustomTag { get { return this.CustomTagOption; } set { this.CustomTagOption = new(value); } }

        /// <summary>
        /// Used to track the state of StopLossBracket
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PlaceOrderBracket?> StopLossBracketOption { get; private set; }

        /// <summary>
        /// Gets or Sets StopLossBracket
        /// </summary>
        [JsonPropertyName("stopLossBracket")]
        public PlaceOrderBracket? StopLossBracket { get { return this.StopLossBracketOption; } set { this.StopLossBracketOption = new(value); } }

        /// <summary>
        /// Used to track the state of TakeProfitBracket
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PlaceOrderBracket?> TakeProfitBracketOption { get; private set; }

        /// <summary>
        /// Gets or Sets TakeProfitBracket
        /// </summary>
        [JsonPropertyName("takeProfitBracket")]
        public PlaceOrderBracket? TakeProfitBracket { get { return this.TakeProfitBracketOption; } set { this.TakeProfitBracketOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlaceOrderRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  TrailPrice: ").Append(TrailPrice).Append("\n");
            sb.Append("  CustomTag: ").Append(CustomTag).Append("\n");
            sb.Append("  StopLossBracket: ").Append(StopLossBracket).Append("\n");
            sb.Append("  TakeProfitBracket: ").Append(TakeProfitBracket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlaceOrderRequest" />
    /// </summary>
    public class PlaceOrderRequestJsonConverter : JsonConverter<PlaceOrderRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlaceOrderRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlaceOrderRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> accountId = default;
            Option<string?> contractId = default;
            Option<OrderType?> type = default;
            Option<OrderSide?> side = default;
            Option<int?> size = default;
            Option<decimal?> limitPrice = default;
            Option<decimal?> stopPrice = default;
            Option<decimal?> trailPrice = default;
            Option<string?> customTag = default;
            Option<PlaceOrderBracket?> stopLossBracket = default;
            Option<PlaceOrderBracket?> takeProfitBracket = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contractId":
                            contractId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<OrderType?>(OrderTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "side":
                            string? sideRawValue = utf8JsonReader.GetString();
                            if (sideRawValue != null)
                                side = new Option<OrderSide?>(OrderSideValueConverter.FromStringOrDefault(sideRawValue));
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "limitPrice":
                            limitPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "stopPrice":
                            stopPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "trailPrice":
                            trailPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "customTag":
                            customTag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stopLossBracket":
                            stopLossBracket = new Option<PlaceOrderBracket?>(JsonSerializer.Deserialize<PlaceOrderBracket>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "takeProfitBracket":
                            takeProfitBracket = new Option<PlaceOrderBracket?>(JsonSerializer.Deserialize<PlaceOrderBracket>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderRequest.", nameof(accountId));

            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderRequest.", nameof(contractId));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderRequest.", nameof(type));

            if (!side.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderRequest.", nameof(side));

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderRequest.", nameof(size));

            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class PlaceOrderRequest.");

            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class PlaceOrderRequest.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PlaceOrderRequest.");

            if (side.IsSet && side.Value == null)
                throw new ArgumentNullException(nameof(side), "Property is not nullable for class PlaceOrderRequest.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class PlaceOrderRequest.");

            if (limitPrice.IsSet && limitPrice.Value == null)
                throw new ArgumentNullException(nameof(limitPrice), "Property is not nullable for class PlaceOrderRequest.");

            if (stopPrice.IsSet && stopPrice.Value == null)
                throw new ArgumentNullException(nameof(stopPrice), "Property is not nullable for class PlaceOrderRequest.");

            if (trailPrice.IsSet && trailPrice.Value == null)
                throw new ArgumentNullException(nameof(trailPrice), "Property is not nullable for class PlaceOrderRequest.");

            if (customTag.IsSet && customTag.Value == null)
                throw new ArgumentNullException(nameof(customTag), "Property is not nullable for class PlaceOrderRequest.");

            if (stopLossBracket.IsSet && stopLossBracket.Value == null)
                throw new ArgumentNullException(nameof(stopLossBracket), "Property is not nullable for class PlaceOrderRequest.");

            if (takeProfitBracket.IsSet && takeProfitBracket.Value == null)
                throw new ArgumentNullException(nameof(takeProfitBracket), "Property is not nullable for class PlaceOrderRequest.");

            return new PlaceOrderRequest(accountId.Value!.Value!, contractId.Value!, type.Value!.Value!, side.Value!.Value!, size.Value!.Value!, limitPrice, stopPrice, trailPrice, customTag, stopLossBracket, takeProfitBracket);
        }

        /// <summary>
        /// Serializes a <see cref="PlaceOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placeOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlaceOrderRequest placeOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, placeOrderRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlaceOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placeOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlaceOrderRequest placeOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (placeOrderRequest.ContractId == null)
                throw new ArgumentNullException(nameof(placeOrderRequest.ContractId), "Property is required for class PlaceOrderRequest.");

            if (placeOrderRequest.CustomTagOption.IsSet && placeOrderRequest.CustomTag == null)
                throw new ArgumentNullException(nameof(placeOrderRequest.CustomTag), "Property is required for class PlaceOrderRequest.");

            if (placeOrderRequest.StopLossBracketOption.IsSet && placeOrderRequest.StopLossBracket == null)
                throw new ArgumentNullException(nameof(placeOrderRequest.StopLossBracket), "Property is required for class PlaceOrderRequest.");

            if (placeOrderRequest.TakeProfitBracketOption.IsSet && placeOrderRequest.TakeProfitBracket == null)
                throw new ArgumentNullException(nameof(placeOrderRequest.TakeProfitBracket), "Property is required for class PlaceOrderRequest.");

            writer.WriteNumber("accountId", placeOrderRequest.AccountId);

            writer.WriteString("contractId", placeOrderRequest.ContractId);

            var typeRawValue = OrderTypeValueConverter.ToJsonValue(placeOrderRequest.Type);
            writer.WriteNumber("type", typeRawValue);

            var sideRawValue = OrderSideValueConverter.ToJsonValue(placeOrderRequest.Side);
            writer.WriteNumber("side", sideRawValue);

            writer.WriteNumber("size", placeOrderRequest.Size);

            if (placeOrderRequest.LimitPriceOption.IsSet)
                writer.WriteNumber("limitPrice", placeOrderRequest.LimitPriceOption.Value!.Value);

            if (placeOrderRequest.StopPriceOption.IsSet)
                writer.WriteNumber("stopPrice", placeOrderRequest.StopPriceOption.Value!.Value);

            if (placeOrderRequest.TrailPriceOption.IsSet)
                writer.WriteNumber("trailPrice", placeOrderRequest.TrailPriceOption.Value!.Value);

            if (placeOrderRequest.CustomTagOption.IsSet)
                writer.WriteString("customTag", placeOrderRequest.CustomTag);

            if (placeOrderRequest.StopLossBracketOption.IsSet)
            {
                writer.WritePropertyName("stopLossBracket");
                JsonSerializer.Serialize(writer, placeOrderRequest.StopLossBracket, jsonSerializerOptions);
            }
            if (placeOrderRequest.TakeProfitBracketOption.IsSet)
            {
                writer.WritePropertyName("takeProfitBracket");
                JsonSerializer.Serialize(writer, placeOrderRequest.TakeProfitBracket, jsonSerializerOptions);
            }
        }
    }
}
