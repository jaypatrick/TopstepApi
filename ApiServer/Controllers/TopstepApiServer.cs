//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Trading.Topstep
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class AccountControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Searches for accounts based on the provided request.
        /// </summary>
        /// <param name="request">The request containing search criteria.</param>
        /// <returns>The search account response.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Account/search", Name = "Account_SearchAccounts")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SearchAccounts([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] SearchAccountRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class AuthControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Login as the specified user using the specified application.
        /// </summary>
        /// <param name="request">The login request.</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Auth/loginApp", Name = "Auth_LoginApp")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> LoginApp([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] LoginAppRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Login as the specified user using the specified API key.
        /// </summary>
        /// <param name="request">The login request.</param>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Auth/loginKey", Name = "Auth_LoginKey")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> LoginKey([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] LoginApiKeyRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logs out the current authenticated user.
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Auth/logout", Name = "Auth_Logout")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> Logout(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validates the current user's session.
        /// </summary>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Auth/validate", Name = "Auth_Validate")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> Validate(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class ContractControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Searches for contracts based on the provided search criteria.
        /// </summary>
        /// <param name="request">The search criteria for finding contracts.</param>
        /// <returns>A response containing the search results, including any matching contracts.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Contract/search", Name = "Contract_SearchContracts")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SearchContracts([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] SearchContractRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Searches for a contract by its ID.
        /// </summary>
        /// <param name="request">The request containing the contract ID.</param>
        /// <returns>A response containing the search result, including the matching contract if found.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Contract/searchById", Name = "Contract_SearchContractById")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SearchContractById([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] SearchContractByIdRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Lists available contracts based on the provided request parameters.
        /// </summary>
        /// <param name="request">The listing criteria for available contracts.</param>
        /// <returns>A response containing the list of available contracts.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Contract/available", Name = "Contract_AvailableContracts")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> AvailableContracts([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] ListAvailableContractRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class HistoryControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Retrieves historical bars based on the specified request parameters.
        /// </summary>
        /// <param name="request">The request containing parameters for retrieving historical bars.</param>
        /// <returns>The response with the retrieved bars.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/History/retrieveBars", Name = "History_GetBars")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetBars([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] RetrieveBarRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class OrderControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Searches for orders based on the provided request.
        /// </summary>
        /// <param name="request">A request containing search criteria.</param>
        /// <returns>A response with search results.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Order/search", Name = "Order_SearchOrders")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SearchOrders([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] SearchOrderRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Searches for open (working/active) orders based on the provided request.
        /// </summary>
        /// <param name="request">A request containing search criteria.</param>
        /// <returns>A response with search results.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Order/searchOpen", Name = "Order_SearchOpenOrders")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SearchOpenOrders([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] SearchOpenOrderRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Places a new order based on the provided request.
        /// </summary>
        /// <param name="request">A request containing order details.</param>
        /// <returns>A response with order placement details.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Order/place", Name = "Order_PlaceOrder")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PlaceOrder([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] PlaceOrderRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancels an existing order based on the provided request.
        /// </summary>
        /// <param name="request">A request containing order cancellation details.</param>
        /// <returns>A response with order cancellation details.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Order/cancel", Name = "Order_CancelOrder")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CancelOrder([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] CancelOrderRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Modifies an existing order based on the provided request.
        /// </summary>
        /// <param name="request">A request containing order modification details.</param>
        /// <returns>A response with order modification details.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Order/modify", Name = "Order_ModifyOrder")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> ModifyOrder([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] ModifyOrderRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class PositionControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Searches for open positions based on the provided request.
        /// </summary>
        /// <param name="request">A request containing search criteria.</param>
        /// <returns>A response with search results.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Position/searchOpen", Name = "Position_SearchOpenPositions")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SearchOpenPositions([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] SearchPositionRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Closes a contract position based on the provided request.
        /// </summary>
        /// <param name="request">A request containing the account ID and contract ID to close.</param>
        /// <returns>A response indicating the success or failure of the close operation.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Position/closeContract", Name = "Position_CloseContractPosition")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> CloseContractPosition([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] CloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Partially closes a contract position based on the provided request.
        /// </summary>
        /// <param name="request">A request containing the account ID, contract ID, and size to close.</param>
        /// <returns>A response indicating the success or failure of the partial close operation.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Position/partialCloseContract", Name = "Position_PartialCloseContractPosition")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PartialCloseContractPosition([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] PartialCloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class StatusControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Handles the ping request to check the status of the API.
        /// </summary>
        /// <returns>Returns a "pong" to indicate the API is responsive.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("api/Status/ping", Name = "Status_Ping")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> Ping(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public abstract class TradeControllerBase : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        /// <summary>
        /// Searches for half-turn trades based on the provided request parameters.
        /// </summary>
        /// <param name="request">A request containing search criteria.</param>
        /// <returns>A response with the search results.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("api/Trade/search", Name = "Trade_SearchHalfTurnTrades")]
        public abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SearchHalfTurnTrades([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] SearchTradeRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchAccountResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchAccountResponse(System.Collections.Generic.List<TradingAccountModel>? @accounts, SearchAccountErrorCode @errorCode, string? @errorMessage, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.Accounts = @accounts;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public SearchAccountErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("accounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TradingAccountModel>? Accounts { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchAccountResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchAccountResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchAccountErrorCode
    {

        Success = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TradingAccountModel
    {
        [Newtonsoft.Json.JsonConstructor]
        public TradingAccountModel(decimal @balance, bool @canTrade, int @id, bool @isVisible, string @name, bool @simulated)
        {
            this.Id = @id;
            this.Name = @name;
            this.Balance = @balance;
            this.CanTrade = @canTrade;
            this.IsVisible = @isVisible;
            this.Simulated = @simulated;
        }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }

        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.Always)]
        public decimal Balance { get; }

        [Newtonsoft.Json.JsonProperty("canTrade", Required = Newtonsoft.Json.Required.Always)]
        public bool CanTrade { get; }

        [Newtonsoft.Json.JsonProperty("isVisible", Required = Newtonsoft.Json.Required.Always)]
        public bool IsVisible { get; }

        [Newtonsoft.Json.JsonProperty("simulated", Required = Newtonsoft.Json.Required.Always)]
        public bool Simulated { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TradingAccountModel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TradingAccountModel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchAccountRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchAccountRequest(bool @onlyActiveAccounts)
        {
            this.OnlyActiveAccounts = @onlyActiveAccounts;
        }

        [Newtonsoft.Json.JsonProperty("onlyActiveAccounts", Required = Newtonsoft.Json.Required.Always)]
        public bool OnlyActiveAccounts { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchAccountRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchAccountRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public LoginResponse(LoginErrorCode @errorCode, string? @errorMessage, bool @success, string? @token)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.Token = @token;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public LoginErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Token { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LoginResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoginResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = UserNotFound
    /// <br/>2 = PasswordVerificationFailed
    /// <br/>3 = InvalidCredentials
    /// <br/>4 = AppNotFound
    /// <br/>5 = AppVerificationFailed
    /// <br/>6 = InvalidDevice
    /// <br/>7 = AgreementsNotSigned
    /// <br/>8 = UnknownError
    /// <br/>9 = ApiSubscriptionNotFound
    /// <br/>10 = ApiKeyAuthenticationDisabled
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LoginErrorCode
    {

        Success = 0,

        UserNotFound = 1,

        PasswordVerificationFailed = 2,

        InvalidCredentials = 3,

        AppNotFound = 4,

        AppVerificationFailed = 5,

        InvalidDevice = 6,

        AgreementsNotSigned = 7,

        UnknownError = 8,

        ApiSubscriptionNotFound = 9,

        ApiKeyAuthenticationDisabled = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginAppRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public LoginAppRequest(string @appId, string @deviceId, string @password, string @userName, string @verifyKey)
        {
            this.UserName = @userName;
            this.Password = @password;
            this.DeviceId = @deviceId;
            this.AppId = @appId;
            this.VerifyKey = @verifyKey;
        }

        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserName { get; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; }

        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeviceId { get; }

        [Newtonsoft.Json.JsonProperty("appId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AppId { get; }

        [Newtonsoft.Json.JsonProperty("verifyKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VerifyKey { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LoginAppRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoginAppRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginApiKeyRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public LoginApiKeyRequest(string @apiKey, string @userName)
        {
            this.UserName = @userName;
            this.ApiKey = @apiKey;
        }

        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserName { get; }

        [Newtonsoft.Json.JsonProperty("apiKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ApiKey { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LoginApiKeyRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LoginApiKeyRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogoutResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public LogoutResponse(LogoutErrorCode @errorCode, string? @errorMessage, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public LogoutErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LogoutResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LogoutResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = InvalidSession
    /// <br/>2 = UnknownError
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LogoutErrorCode
    {

        Success = 0,

        InvalidSession = 1,

        UnknownError = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidateResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public ValidateResponse(ValidateErrorCode @errorCode, string? @errorMessage, string? @newToken, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.NewToken = @newToken;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public ValidateErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("newToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NewToken { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ValidateResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValidateResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = InvalidSession
    /// <br/>2 = SessionNotFound
    /// <br/>3 = ExpiredToken
    /// <br/>4 = UnknownError
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ValidateErrorCode
    {

        Success = 0,

        InvalidSession = 1,

        SessionNotFound = 2,

        ExpiredToken = 3,

        UnknownError = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchContractResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchContractResponse(System.Collections.Generic.List<ContractModel>? @contracts, SearchContractErrorCode @errorCode, string? @errorMessage, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.Contracts = @contracts;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public SearchContractErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("contracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ContractModel>? Contracts { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchContractResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchContractResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchContractErrorCode
    {

        Success = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractModel
    {
        [Newtonsoft.Json.JsonConstructor]
        public ContractModel(bool @activeContract, string @description, string @id, string @name, string @symbolId, decimal @tickSize, decimal @tickValue)
        {
            this.Id = @id;
            this.Name = @name;
            this.Description = @description;
            this.TickSize = @tickSize;
            this.TickValue = @tickValue;
            this.ActiveContract = @activeContract;
            this.SymbolId = @symbolId;
        }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; }

        [Newtonsoft.Json.JsonProperty("tickSize", Required = Newtonsoft.Json.Required.Always)]
        public decimal TickSize { get; }

        [Newtonsoft.Json.JsonProperty("tickValue", Required = Newtonsoft.Json.Required.Always)]
        public decimal TickValue { get; }

        [Newtonsoft.Json.JsonProperty("activeContract", Required = Newtonsoft.Json.Required.Always)]
        public bool ActiveContract { get; }

        [Newtonsoft.Json.JsonProperty("symbolId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SymbolId { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContractModel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractModel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchContractRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchContractRequest(bool @live, string? @searchText)
        {
            this.SearchText = @searchText;
            this.Live = @live;
        }

        [Newtonsoft.Json.JsonProperty("searchText", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SearchText { get; }

        [Newtonsoft.Json.JsonProperty("live", Required = Newtonsoft.Json.Required.Always)]
        public bool Live { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchContractRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchContractRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchContractByIdResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchContractByIdResponse(ContractModel? @contract, SearchContractByIdErrorCode @errorCode, string? @errorMessage, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.Contract = @contract;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public SearchContractByIdErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("contract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractModel? Contract { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchContractByIdResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchContractByIdResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = ContractNotFound
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchContractByIdErrorCode
    {

        Success = 0,

        ContractNotFound = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchContractByIdRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchContractByIdRequest(string @contractId)
        {
            this.ContractId = @contractId;
        }

        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchContractByIdRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchContractByIdRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListAvailableContractResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public ListAvailableContractResponse(System.Collections.Generic.List<ContractModel>? @contracts, ListAvailableContractErrorCode @errorCode, string? @errorMessage, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.Contracts = @contracts;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public ListAvailableContractErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("contracts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ContractModel>? Contracts { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListAvailableContractResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListAvailableContractResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ListAvailableContractErrorCode
    {

        Success = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ListAvailableContractRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public ListAvailableContractRequest(bool @live)
        {
            this.Live = @live;
        }

        [Newtonsoft.Json.JsonProperty("live", Required = Newtonsoft.Json.Required.Always)]
        public bool Live { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListAvailableContractRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListAvailableContractRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RetrieveBarResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public RetrieveBarResponse(System.Collections.Generic.List<AggregateBarModel>? @bars, RetrieveBarErrorCode @errorCode, string? @errorMessage, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.Bars = @bars;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public RetrieveBarErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("bars", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AggregateBarModel>? Bars { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RetrieveBarResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RetrieveBarResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = ContractNotFound
    /// <br/>2 = UnitInvalid
    /// <br/>3 = UnitNumberInvalid
    /// <br/>4 = LimitInvalid
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RetrieveBarErrorCode
    {

        Success = 0,

        ContractNotFound = 1,

        UnitInvalid = 2,

        UnitNumberInvalid = 3,

        LimitInvalid = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AggregateBarModel
    {
        [Newtonsoft.Json.JsonConstructor]
        public AggregateBarModel(decimal @c, decimal @h, decimal @l, decimal @o, System.DateTimeOffset @t, long @v)
        {
            this.T = @t;
            this.O = @o;
            this.H = @h;
            this.L = @l;
            this.C = @c;
            this.V = @v;
        }

        [Newtonsoft.Json.JsonProperty("t", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset T { get; }

        [Newtonsoft.Json.JsonProperty("o", Required = Newtonsoft.Json.Required.Always)]
        public decimal O { get; }

        [Newtonsoft.Json.JsonProperty("h", Required = Newtonsoft.Json.Required.Always)]
        public decimal H { get; }

        [Newtonsoft.Json.JsonProperty("l", Required = Newtonsoft.Json.Required.Always)]
        public decimal L { get; }

        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Always)]
        public decimal C { get; }

        [Newtonsoft.Json.JsonProperty("v", Required = Newtonsoft.Json.Required.Always)]
        public long V { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AggregateBarModel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AggregateBarModel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RetrieveBarRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public RetrieveBarRequest(string @contractId, System.DateTimeOffset @endTime, bool @includePartialBar, int @limit, bool @live, System.DateTimeOffset @startTime, AggregateBarUnit @unit, int @unitNumber)
        {
            this.ContractId = @contractId;
            this.Live = @live;
            this.StartTime = @startTime;
            this.EndTime = @endTime;
            this.Unit = @unit;
            this.UnitNumber = @unitNumber;
            this.Limit = @limit;
            this.IncludePartialBar = @includePartialBar;
        }

        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; }

        [Newtonsoft.Json.JsonProperty("live", Required = Newtonsoft.Json.Required.Always)]
        public bool Live { get; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartTime { get; }

        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset EndTime { get; }

        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        public AggregateBarUnit Unit { get; }

        [Newtonsoft.Json.JsonProperty("unitNumber", Required = Newtonsoft.Json.Required.Always)]
        public int UnitNumber { get; }

        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; }

        [Newtonsoft.Json.JsonProperty("includePartialBar", Required = Newtonsoft.Json.Required.Always)]
        public bool IncludePartialBar { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RetrieveBarRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RetrieveBarRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Unspecified
    /// <br/>1 = Second
    /// <br/>2 = Minute
    /// <br/>3 = Hour
    /// <br/>4 = Day
    /// <br/>5 = Week
    /// <br/>6 = Month
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AggregateBarUnit
    {

        Unspecified = 0,

        Second = 1,

        Minute = 2,

        Hour = 3,

        Day = 4,

        Week = 5,

        Month = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchOrderResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchOrderResponse(SearchOrderErrorCode @errorCode, string? @errorMessage, System.Collections.Generic.List<OrderModel>? @orders, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.Orders = @orders;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public SearchOrderErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("orders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OrderModel>? Orders { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchOrderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchOrderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = AccountNotFound
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchOrderErrorCode
    {

        Success = 0,

        AccountNotFound = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderModel
    {
        [Newtonsoft.Json.JsonConstructor]
        public OrderModel(int @accountId, string @contractId, System.DateTimeOffset @creationTimestamp, string? @customTag, decimal? @filledPrice, int @fillVolume, long @id, decimal? @limitPrice, OrderSide @side, int @size, OrderStatus @status, decimal? @stopPrice, string @symbolId, OrderType @type, System.DateTimeOffset? @updateTimestamp)
        {
            this.Id = @id;
            this.AccountId = @accountId;
            this.ContractId = @contractId;
            this.SymbolId = @symbolId;
            this.CreationTimestamp = @creationTimestamp;
            this.UpdateTimestamp = @updateTimestamp;
            this.Status = @status;
            this.Type = @type;
            this.Side = @side;
            this.Size = @size;
            this.LimitPrice = @limitPrice;
            this.StopPrice = @stopPrice;
            this.FillVolume = @fillVolume;
            this.FilledPrice = @filledPrice;
            this.CustomTag = @customTag;
        }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; }

        [Newtonsoft.Json.JsonProperty("symbolId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SymbolId { get; }

        [Newtonsoft.Json.JsonProperty("creationTimestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationTimestamp { get; }

        [Newtonsoft.Json.JsonProperty("updateTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdateTimestamp { get; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public OrderStatus Status { get; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public OrderType Type { get; }

        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Always)]
        public OrderSide Side { get; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        public int Size { get; }

        [Newtonsoft.Json.JsonProperty("limitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LimitPrice { get; }

        [Newtonsoft.Json.JsonProperty("stopPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? StopPrice { get; }

        [Newtonsoft.Json.JsonProperty("fillVolume", Required = Newtonsoft.Json.Required.Always)]
        public int FillVolume { get; }

        [Newtonsoft.Json.JsonProperty("filledPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FilledPrice { get; }

        [Newtonsoft.Json.JsonProperty("customTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomTag { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderModel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderModel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = None
    /// <br/>1 = Open
    /// <br/>2 = Filled
    /// <br/>3 = Cancelled
    /// <br/>4 = Expired
    /// <br/>5 = Rejected
    /// <br/>6 = Pending
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderStatus
    {

        None = 0,

        Open = 1,

        Filled = 2,

        Cancelled = 3,

        Expired = 4,

        Rejected = 5,

        Pending = 6,

    }

    /// <summary>
    /// 0 = Unknown
    /// <br/>1 = Limit
    /// <br/>2 = Market
    /// <br/>3 = StopLimit
    /// <br/>4 = Stop
    /// <br/>5 = TrailingStop
    /// <br/>6 = JoinBid
    /// <br/>7 = JoinAsk
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderType
    {

        Unknown = 0,

        Limit = 1,

        Market = 2,

        StopLimit = 3,

        Stop = 4,

        TrailingStop = 5,

        JoinBid = 6,

        JoinAsk = 7,

    }

    /// <summary>
    /// 0 = Bid
    /// <br/>1 = Ask
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OrderSide
    {

        Bid = 0,

        Ask = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchOrderRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchOrderRequest(int @accountId, System.DateTimeOffset? @endTimestamp, System.DateTimeOffset @startTimestamp)
        {
            this.AccountId = @accountId;
            this.StartTimestamp = @startTimestamp;
            this.EndTimestamp = @endTimestamp;
        }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        [Newtonsoft.Json.JsonProperty("startTimestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StartTimestamp { get; }

        [Newtonsoft.Json.JsonProperty("endTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTimestamp { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchOrderRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchOrderRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchOpenOrderRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchOpenOrderRequest(int @accountId)
        {
            this.AccountId = @accountId;
        }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchOpenOrderRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchOpenOrderRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlaceOrderResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public PlaceOrderResponse(PlaceOrderErrorCode @errorCode, string? @errorMessage, long? @orderId, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.OrderId = @orderId;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public PlaceOrderErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? OrderId { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlaceOrderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceOrderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = AccountNotFound
    /// <br/>2 = OrderRejected
    /// <br/>3 = InsufficientFunds
    /// <br/>4 = AccountViolation
    /// <br/>5 = OutsideTradingHours
    /// <br/>6 = OrderPending
    /// <br/>7 = UnknownError
    /// <br/>8 = ContractNotFound
    /// <br/>9 = ContractNotActive
    /// <br/>10 = AccountRejected
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PlaceOrderErrorCode
    {

        Success = 0,

        AccountNotFound = 1,

        OrderRejected = 2,

        InsufficientFunds = 3,

        AccountViolation = 4,

        OutsideTradingHours = 5,

        OrderPending = 6,

        UnknownError = 7,

        ContractNotFound = 8,

        ContractNotActive = 9,

        AccountRejected = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlaceOrderRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public PlaceOrderRequest(int @accountId, string @contractId, string? @customTag, decimal? @limitPrice, long? @linkedOrderId, OrderSide @side, int @size, decimal? @stopPrice, decimal? @trailPrice, OrderType @type)
        {
            this.AccountId = @accountId;
            this.ContractId = @contractId;
            this.Type = @type;
            this.Side = @side;
            this.Size = @size;
            this.LimitPrice = @limitPrice;
            this.StopPrice = @stopPrice;
            this.TrailPrice = @trailPrice;
            this.CustomTag = @customTag;
            this.LinkedOrderId = @linkedOrderId;
        }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public OrderType Type { get; }

        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Always)]
        public OrderSide Side { get; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        public int Size { get; }

        [Newtonsoft.Json.JsonProperty("limitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LimitPrice { get; }

        [Newtonsoft.Json.JsonProperty("stopPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? StopPrice { get; }

        [Newtonsoft.Json.JsonProperty("trailPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? TrailPrice { get; }

        [Newtonsoft.Json.JsonProperty("customTag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CustomTag { get; }

        [Newtonsoft.Json.JsonProperty("linkedOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LinkedOrderId { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlaceOrderRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceOrderRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelOrderResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public CancelOrderResponse(CancelOrderErrorCode @errorCode, string? @errorMessage, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public CancelOrderErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CancelOrderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelOrderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = AccountNotFound
    /// <br/>2 = OrderNotFound
    /// <br/>3 = Rejected
    /// <br/>4 = Pending
    /// <br/>5 = UnknownError
    /// <br/>6 = AccountRejected
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CancelOrderErrorCode
    {

        Success = 0,

        AccountNotFound = 1,

        OrderNotFound = 2,

        Rejected = 3,

        Pending = 4,

        UnknownError = 5,

        AccountRejected = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelOrderRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public CancelOrderRequest(int @accountId, long @orderId)
        {
            this.AccountId = @accountId;
            this.OrderId = @orderId;
        }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        public long OrderId { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CancelOrderRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancelOrderRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModifyOrderResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public ModifyOrderResponse(ModifyOrderErrorCode @errorCode, string? @errorMessage, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public ModifyOrderErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ModifyOrderResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModifyOrderResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = AccountNotFound
    /// <br/>2 = OrderNotFound
    /// <br/>3 = Rejected
    /// <br/>4 = Pending
    /// <br/>5 = UnknownError
    /// <br/>6 = AccountRejected
    /// <br/>7 = ContractNotFound
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ModifyOrderErrorCode
    {

        Success = 0,

        AccountNotFound = 1,

        OrderNotFound = 2,

        Rejected = 3,

        Pending = 4,

        UnknownError = 5,

        AccountRejected = 6,

        ContractNotFound = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModifyOrderRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public ModifyOrderRequest(int @accountId, decimal? @limitPrice, long @orderId, int? @size, decimal? @stopPrice, decimal? @trailPrice)
        {
            this.AccountId = @accountId;
            this.OrderId = @orderId;
            this.Size = @size;
            this.LimitPrice = @limitPrice;
            this.StopPrice = @stopPrice;
            this.TrailPrice = @trailPrice;
        }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        public long OrderId { get; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; }

        [Newtonsoft.Json.JsonProperty("limitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LimitPrice { get; }

        [Newtonsoft.Json.JsonProperty("stopPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? StopPrice { get; }

        [Newtonsoft.Json.JsonProperty("trailPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? TrailPrice { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ModifyOrderRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ModifyOrderRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchPositionResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchPositionResponse(SearchPositionErrorCode @errorCode, string? @errorMessage, System.Collections.Generic.List<PositionModel>? @positions, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.Positions = @positions;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public SearchPositionErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("positions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PositionModel>? Positions { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchPositionResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchPositionResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = AccountNotFound
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchPositionErrorCode
    {

        Success = 0,

        AccountNotFound = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PositionModel
    {
        [Newtonsoft.Json.JsonConstructor]
        public PositionModel(int @accountId, decimal @averagePrice, string @contractId, System.DateTimeOffset @creationTimestamp, int @id, int @size, PositionType @type)
        {
            this.Id = @id;
            this.AccountId = @accountId;
            this.ContractId = @contractId;
            this.CreationTimestamp = @creationTimestamp;
            this.Type = @type;
            this.Size = @size;
            this.AveragePrice = @averagePrice;
        }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; }

        [Newtonsoft.Json.JsonProperty("creationTimestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationTimestamp { get; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public PositionType Type { get; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        public int Size { get; }

        [Newtonsoft.Json.JsonProperty("averagePrice", Required = Newtonsoft.Json.Required.Always)]
        public decimal AveragePrice { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PositionModel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PositionModel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Undefined
    /// <br/>1 = Long
    /// <br/>2 = Short
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PositionType
    {

        Undefined = 0,

        Long = 1,

        Short = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchPositionRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchPositionRequest(int @accountId)
        {
            this.AccountId = @accountId;
        }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchPositionRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchPositionRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClosePositionResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public ClosePositionResponse(ClosePositionErrorCode @errorCode, string? @errorMessage, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public ClosePositionErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ClosePositionResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClosePositionResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = AccountNotFound
    /// <br/>2 = PositionNotFound
    /// <br/>3 = ContractNotFound
    /// <br/>4 = ContractNotActive
    /// <br/>5 = OrderRejected
    /// <br/>6 = OrderPending
    /// <br/>7 = UnknownError
    /// <br/>8 = AccountRejected
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ClosePositionErrorCode
    {

        Success = 0,

        AccountNotFound = 1,

        PositionNotFound = 2,

        ContractNotFound = 3,

        ContractNotActive = 4,

        OrderRejected = 5,

        OrderPending = 6,

        UnknownError = 7,

        AccountRejected = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloseContractPositionRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public CloseContractPositionRequest(int @accountId, string @contractId)
        {
            this.AccountId = @accountId;
            this.ContractId = @contractId;
        }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CloseContractPositionRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CloseContractPositionRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartialClosePositionResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public PartialClosePositionResponse(PartialClosePositionErrorCode @errorCode, string? @errorMessage, bool @success)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public PartialClosePositionErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartialClosePositionResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartialClosePositionResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = AccountNotFound
    /// <br/>2 = PositionNotFound
    /// <br/>3 = ContractNotFound
    /// <br/>4 = ContractNotActive
    /// <br/>5 = InvalidCloseSize
    /// <br/>6 = OrderRejected
    /// <br/>7 = OrderPending
    /// <br/>8 = UnknownError
    /// <br/>9 = AccountRejected
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PartialClosePositionErrorCode
    {

        Success = 0,

        AccountNotFound = 1,

        PositionNotFound = 2,

        ContractNotFound = 3,

        ContractNotActive = 4,

        InvalidCloseSize = 5,

        OrderRejected = 6,

        OrderPending = 7,

        UnknownError = 8,

        AccountRejected = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartialCloseContractPositionRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public PartialCloseContractPositionRequest(int @accountId, string @contractId, int @size)
        {
            this.AccountId = @accountId;
            this.ContractId = @contractId;
            this.Size = @size;
        }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        public int Size { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PartialCloseContractPositionRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PartialCloseContractPositionRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchHalfTradeResponse
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchHalfTradeResponse(SearchTradeErrorCode @errorCode, string? @errorMessage, bool @success, System.Collections.Generic.List<HalfTradeModel>? @trades)
        {
            this.Success = @success;
            this.ErrorCode = @errorCode;
            this.ErrorMessage = @errorMessage;
            this.Trades = @trades;
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        public SearchTradeErrorCode ErrorCode { get; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ErrorMessage { get; }

        [Newtonsoft.Json.JsonProperty("trades", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<HalfTradeModel>? Trades { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchHalfTradeResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchHalfTradeResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// 0 = Success
    /// <br/>1 = AccountNotFound
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SearchTradeErrorCode
    {

        Success = 0,

        AccountNotFound = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HalfTradeModel
    {
        [Newtonsoft.Json.JsonConstructor]
        public HalfTradeModel(int @accountId, string @contractId, System.DateTimeOffset @creationTimestamp, decimal @fees, long @id, long @orderId, decimal @price, decimal? @profitAndLoss, OrderSide @side, int @size, bool @voided)
        {
            this.Id = @id;
            this.AccountId = @accountId;
            this.ContractId = @contractId;
            this.CreationTimestamp = @creationTimestamp;
            this.Price = @price;
            this.ProfitAndLoss = @profitAndLoss;
            this.Fees = @fees;
            this.Side = @side;
            this.Size = @size;
            this.Voided = @voided;
            this.OrderId = @orderId;
        }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        [Newtonsoft.Json.JsonProperty("contractId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContractId { get; }

        [Newtonsoft.Json.JsonProperty("creationTimestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreationTimestamp { get; }

        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public decimal Price { get; }

        [Newtonsoft.Json.JsonProperty("profitAndLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? ProfitAndLoss { get; }

        [Newtonsoft.Json.JsonProperty("fees", Required = Newtonsoft.Json.Required.Always)]
        public decimal Fees { get; }

        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Always)]
        public OrderSide Side { get; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        public int Size { get; }

        [Newtonsoft.Json.JsonProperty("voided", Required = Newtonsoft.Json.Required.Always)]
        public bool Voided { get; }

        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        public long OrderId { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HalfTradeModel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HalfTradeModel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchTradeRequest
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchTradeRequest(int @accountId, System.DateTimeOffset? @endTimestamp, System.DateTimeOffset? @startTimestamp)
        {
            this.AccountId = @accountId;
            this.StartTimestamp = @startTimestamp;
            this.EndTimestamp = @endTimestamp;
        }

        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        public int AccountId { get; }

        [Newtonsoft.Json.JsonProperty("startTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTimestamp { get; }

        [Newtonsoft.Json.JsonProperty("endTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTimestamp { get; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchTradeRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchTradeRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AccountResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountResponse<TResult> : AccountResponse
    {
        public TResult Result { get; private set; }

        public AccountResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AuthResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthResponse<TResult> : AuthResponse
    {
        public TResult Result { get; private set; }

        public AuthResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ContractResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContractResponse<TResult> : ContractResponse
    {
        public TResult Result { get; private set; }

        public ContractResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoryResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public HistoryResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HistoryResponse<TResult> : HistoryResponse
    {
        public TResult Result { get; private set; }

        public HistoryResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public OrderResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderResponse<TResult> : OrderResponse
    {
        public TResult Result { get; private set; }

        public OrderResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PositionResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public PositionResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PositionResponse<TResult> : PositionResponse
    {
        public TResult Result { get; private set; }

        public PositionResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public StatusResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusResponse<TResult> : StatusResponse
    {
        public TResult Result { get; private set; }

        public StatusResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TradeResponse
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public TradeResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.0.0 (NJsonSchema v11.5.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TradeResponse<TResult> : TradeResponse
    {
        public TResult Result { get; private set; }

        public TradeResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore  649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765