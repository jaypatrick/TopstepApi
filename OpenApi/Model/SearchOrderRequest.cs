// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenApi.Client;

namespace OpenApi.Model
{
    /// <summary>
    /// SearchOrderRequest
    /// </summary>
    public partial class SearchOrderRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchOrderRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        /// <param name="startTimestamp">startTimestamp</param>
        /// <param name="endTimestamp">endTimestamp</param>
        [JsonConstructor]
        public SearchOrderRequest(int accountId, DateTimeOffset startTimestamp, Option<DateTimeOffset?> endTimestamp = default)
        {
            AccountId = accountId;
            StartTimestamp = startTimestamp;
            EndTimestampOption = endTimestamp;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }

        /// <summary>
        /// Gets or Sets StartTimestamp
        /// </summary>
        [JsonPropertyName("startTimestamp")]
        public DateTimeOffset StartTimestamp { get; set; }

        /// <summary>
        /// Used to track the state of EndTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> EndTimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndTimestamp
        /// </summary>
        [JsonPropertyName("endTimestamp")]
        public DateTimeOffset? EndTimestamp { get { return this.EndTimestampOption; } set { this.EndTimestampOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchOrderRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  EndTimestamp: ").Append(EndTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchOrderRequest" />
    /// </summary>
    public class SearchOrderRequestJsonConverter : JsonConverter<SearchOrderRequest>
    {
        /// <summary>
        /// The format to use to serialize StartTimestamp
        /// </summary>
        public static string StartTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize EndTimestamp
        /// </summary>
        public static string EndTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SearchOrderRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchOrderRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> accountId = default;
            Option<DateTimeOffset?> startTimestamp = default;
            Option<DateTimeOffset?> endTimestamp = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "startTimestamp":
                            startTimestamp = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endTimestamp":
                            endTimestamp = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class SearchOrderRequest.", nameof(accountId));

            if (!startTimestamp.IsSet)
                throw new ArgumentException("Property is required for class SearchOrderRequest.", nameof(startTimestamp));

            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class SearchOrderRequest.");

            if (startTimestamp.IsSet && startTimestamp.Value == null)
                throw new ArgumentNullException(nameof(startTimestamp), "Property is not nullable for class SearchOrderRequest.");

            if (endTimestamp.IsSet && endTimestamp.Value == null)
                throw new ArgumentNullException(nameof(endTimestamp), "Property is not nullable for class SearchOrderRequest.");

            return new SearchOrderRequest(accountId.Value!.Value!, startTimestamp.Value!.Value!, endTimestamp);
        }

        /// <summary>
        /// Serializes a <see cref="SearchOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchOrderRequest searchOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, searchOrderRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SearchOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchOrderRequest searchOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("accountId", searchOrderRequest.AccountId);

            writer.WriteString("startTimestamp", searchOrderRequest.StartTimestamp.ToString(StartTimestampFormat));

            if (searchOrderRequest.EndTimestampOption.IsSet)
                writer.WriteString("endTimestamp", searchOrderRequest.EndTimestampOption.Value!.Value.ToString(EndTimestampFormat));
        }
    }
}
