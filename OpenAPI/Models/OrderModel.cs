// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace OpenAPI.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OrderModel : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accountId property</summary>
        public int? AccountId { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The contractId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContractId { get; set; }
#nullable restore
#else
        public string ContractId { get; set; }
#endif
        /// <summary>The creationTimestamp property</summary>
        public DateTimeOffset? CreationTimestamp { get; set; }
        /// <summary>The customTag property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CustomTag { get; set; }
#nullable restore
#else
        public string CustomTag { get; set; }
#endif
        /// <summary>The filledPrice property</summary>
        public decimal? FilledPrice { get; set; }
        /// <summary>The fillVolume property</summary>
        public int? FillVolume { get; set; }
        /// <summary>The id property</summary>
        public long? Id { get; set; }
        /// <summary>The limitPrice property</summary>
        public decimal? LimitPrice { get; set; }
        /// <summary>0 = Bid1 = Ask</summary>
        public int? Side { get; set; }
        /// <summary>The size property</summary>
        public int? Size { get; set; }
        /// <summary>0 = None1 = Open2 = Filled3 = Cancelled4 = Expired5 = Rejected6 = Pending7 = PendingCancellation8 = Suspended</summary>
        public int? Status { get; set; }
        /// <summary>The stopPrice property</summary>
        public decimal? StopPrice { get; set; }
        /// <summary>The symbolId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SymbolId { get; set; }
#nullable restore
#else
        public string SymbolId { get; set; }
#endif
        /// <summary>0 = Unknown1 = Limit2 = Market3 = StopLimit4 = Stop5 = TrailingStop6 = JoinBid7 = JoinAsk</summary>
        public int? Type { get; set; }
        /// <summary>The updateTimestamp property</summary>
        public DateTimeOffset? UpdateTimestamp { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::OpenAPI.Models.OrderModel"/> and sets the default values.
        /// </summary>
        public OrderModel()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::OpenAPI.Models.OrderModel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::OpenAPI.Models.OrderModel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::OpenAPI.Models.OrderModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountId", n => { AccountId = n.GetIntValue(); } },
                { "contractId", n => { ContractId = n.GetStringValue(); } },
                { "creationTimestamp", n => { CreationTimestamp = n.GetDateTimeOffsetValue(); } },
                { "customTag", n => { CustomTag = n.GetStringValue(); } },
                { "fillVolume", n => { FillVolume = n.GetIntValue(); } },
                { "filledPrice", n => { FilledPrice = n.GetDecimalValue(); } },
                { "id", n => { Id = n.GetLongValue(); } },
                { "limitPrice", n => { LimitPrice = n.GetDecimalValue(); } },
                { "side", n => { Side = n.GetIntValue(); } },
                { "size", n => { Size = n.GetIntValue(); } },
                { "status", n => { Status = n.GetIntValue(); } },
                { "stopPrice", n => { StopPrice = n.GetDecimalValue(); } },
                { "symbolId", n => { SymbolId = n.GetStringValue(); } },
                { "type", n => { Type = n.GetIntValue(); } },
                { "updateTimestamp", n => { UpdateTimestamp = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("accountId", AccountId);
            writer.WriteStringValue("contractId", ContractId);
            writer.WriteDateTimeOffsetValue("creationTimestamp", CreationTimestamp);
            writer.WriteStringValue("customTag", CustomTag);
            writer.WriteDecimalValue("filledPrice", FilledPrice);
            writer.WriteIntValue("fillVolume", FillVolume);
            writer.WriteLongValue("id", Id);
            writer.WriteDecimalValue("limitPrice", LimitPrice);
            writer.WriteIntValue("side", Side);
            writer.WriteIntValue("size", Size);
            writer.WriteIntValue("status", Status);
            writer.WriteDecimalValue("stopPrice", StopPrice);
            writer.WriteStringValue("symbolId", SymbolId);
            writer.WriteIntValue("type", Type);
            writer.WriteDateTimeOffsetValue("updateTimestamp", UpdateTimestamp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
