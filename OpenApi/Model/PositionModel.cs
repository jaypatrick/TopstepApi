// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenApi.Client;

namespace OpenApi.Model
{
    /// <summary>
    /// PositionModel
    /// </summary>
    public partial class PositionModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="accountId">accountId</param>
        /// <param name="contractId">contractId</param>
        /// <param name="creationTimestamp">creationTimestamp</param>
        /// <param name="type">type</param>
        /// <param name="size">size</param>
        /// <param name="averagePrice">averagePrice</param>
        [JsonConstructor]
        public PositionModel(int id, int accountId, string contractId, DateTimeOffset creationTimestamp, PositionType type, int size, decimal averagePrice)
        {
            Id = id;
            AccountId = accountId;
            ContractId = contractId;
            CreationTimestamp = creationTimestamp;
            Type = type;
            Size = size;
            AveragePrice = averagePrice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public PositionType Type { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets CreationTimestamp
        /// </summary>
        [JsonPropertyName("creationTimestamp")]
        public DateTimeOffset CreationTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }

        /// <summary>
        /// Gets or Sets AveragePrice
        /// </summary>
        [JsonPropertyName("averagePrice")]
        public decimal AveragePrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PositionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PositionModel" />
    /// </summary>
    public class PositionModelJsonConverter : JsonConverter<PositionModel>
    {
        /// <summary>
        /// The format to use to serialize CreationTimestamp
        /// </summary>
        public static string CreationTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PositionModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PositionModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<int?> accountId = default;
            Option<string?> contractId = default;
            Option<DateTimeOffset?> creationTimestamp = default;
            Option<PositionType?> type = default;
            Option<int?> size = default;
            Option<decimal?> averagePrice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contractId":
                            contractId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creationTimestamp":
                            creationTimestamp = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PositionType?>(PositionTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "averagePrice":
                            averagePrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(id));

            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(accountId));

            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(contractId));

            if (!creationTimestamp.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(creationTimestamp));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(type));

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(size));

            if (!averagePrice.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(averagePrice));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PositionModel.");

            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class PositionModel.");

            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class PositionModel.");

            if (creationTimestamp.IsSet && creationTimestamp.Value == null)
                throw new ArgumentNullException(nameof(creationTimestamp), "Property is not nullable for class PositionModel.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PositionModel.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class PositionModel.");

            if (averagePrice.IsSet && averagePrice.Value == null)
                throw new ArgumentNullException(nameof(averagePrice), "Property is not nullable for class PositionModel.");

            return new PositionModel(id.Value!.Value!, accountId.Value!.Value!, contractId.Value!, creationTimestamp.Value!.Value!, type.Value!.Value!, size.Value!.Value!, averagePrice.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PositionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="positionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PositionModel positionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, positionModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PositionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="positionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PositionModel positionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (positionModel.ContractId == null)
                throw new ArgumentNullException(nameof(positionModel.ContractId), "Property is required for class PositionModel.");

            writer.WriteNumber("id", positionModel.Id);

            writer.WriteNumber("accountId", positionModel.AccountId);

            writer.WriteString("contractId", positionModel.ContractId);

            writer.WriteString("creationTimestamp", positionModel.CreationTimestamp.ToString(CreationTimestampFormat));

            var typeRawValue = PositionTypeValueConverter.ToJsonValue(positionModel.Type);
            writer.WriteNumber("type", typeRawValue);

            writer.WriteNumber("size", positionModel.Size);

            writer.WriteNumber("averagePrice", positionModel.AveragePrice);
        }
    }
}
