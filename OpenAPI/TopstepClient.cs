using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using OpenAPI.Api;
using OpenAPI.Client;
using OpenAPI.Model;
using Polly;
using Polly.Extensions.Http;
using Polly.Timeout;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAccountApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AccountApiEvents Events { get; }
        /// <summary>
        /// Searches for accounts based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccountSearchAccountsApiResponse"/>&gt;</returns>
        Task<IAccountSearchAccountsApiResponse> AccountSearchAccountsAsync(SearchAccountRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for accounts based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">The request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccountSearchAccountsApiResponse"/>&gt;</returns>
        Task<IAccountSearchAccountsApiResponse> AccountSearchAccountsOrDefaultAsync(SearchAccountRequest request, System.Threading.CancellationToken cancellationToken = default);
    }
    /// <summary>
    /// The <see cref="IAccountSearchAccountsApiResponse"/>
    /// </summary>
    public interface IAccountSearchAccountsApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.SearchAccountResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AccountApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAccountSearchAccounts;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAccountSearchAccounts;
        internal void ExecuteOnAccountSearchAccounts(AccountApi.AccountSearchAccountsApiResponse apiResponse)
        {
            OnAccountSearchAccounts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorAccountSearchAccounts(Exception exception)
        {
            OnErrorAccountSearchAccounts?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AccountApi : IAccountApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }
        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AccountApi> Logger { get; }
        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }
        /// <summary>
        /// The class containing the events
        /// </summary>
        public AccountApiEvents Events { get; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountApi(ILogger<AccountApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AccountApiEvents accountApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AccountApi>();
            HttpClient = httpClient;
            Events = accountApiEvents;
        }
        partial void FormatAccountSearchAccounts(SearchAccountRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateAccountSearchAccounts(SearchAccountRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterAccountSearchAccountsDefaultImplementation(IAccountSearchAccountsApiResponse apiResponseLocalVar, SearchAccountRequest request)
        {
            bool suppressDefaultLog = false;
            AfterAccountSearchAccounts(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterAccountSearchAccounts(ref bool suppressDefaultLog, IAccountSearchAccountsApiResponse apiResponseLocalVar, SearchAccountRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorAccountSearchAccountsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchAccountRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAccountSearchAccounts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorAccountSearchAccounts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchAccountRequest request);
        /// <summary>
        /// Searches for accounts based on the provided request. 
        /// </summary>
        /// <param name="request">The request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccountSearchAccountsApiResponse"/>&gt;</returns>
        public async Task<IAccountSearchAccountsApiResponse> AccountSearchAccountsOrDefaultAsync(SearchAccountRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AccountSearchAccountsAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Searches for accounts based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAccountSearchAccountsApiResponse"/>&gt;</returns>
        public async Task<IAccountSearchAccountsApiResponse> AccountSearchAccountsAsync(SearchAccountRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateAccountSearchAccounts(request);
                FormatAccountSearchAccounts(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Account/search"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Account/search");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<AccountSearchAccountsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AccountSearchAccountsApiResponse>();
                        AccountSearchAccountsApiResponse apiResponseLocalVar = new AccountSearchAccountsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Account/search", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterAccountSearchAccountsDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnAccountSearchAccounts(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAccountSearchAccountsDefaultImplementation(e, "/api/Account/search", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorAccountSearchAccounts(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="AccountSearchAccountsApiResponse"/>
        /// </summary>
        public partial class AccountSearchAccountsApiResponse : OpenAPI.Client.ApiResponse, IAccountSearchAccountsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AccountSearchAccountsApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="AccountSearchAccountsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AccountSearchAccountsApiResponse(ILogger<AccountSearchAccountsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.SearchAccountResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.SearchAccountResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.SearchAccountResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAuthApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AuthApiEvents Events { get; }
        /// <summary>
        /// Login as the specified user using the specified application.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The login request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginAppApiResponse"/>&gt;</returns>
        Task<IAuthLoginAppApiResponse> AuthLoginAppAsync(LoginAppRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Login as the specified user using the specified application.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">The login request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginAppApiResponse"/>&gt;</returns>
        Task<IAuthLoginAppApiResponse> AuthLoginAppOrDefaultAsync(LoginAppRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Login as the specified user using the specified API key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The login request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginKeyApiResponse"/>&gt;</returns>
        Task<IAuthLoginKeyApiResponse> AuthLoginKeyAsync(LoginApiKeyRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Login as the specified user using the specified API key.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">The login request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginKeyApiResponse"/>&gt;</returns>
        Task<IAuthLoginKeyApiResponse> AuthLoginKeyOrDefaultAsync(LoginApiKeyRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Logs out the current authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLogoutApiResponse"/>&gt;</returns>
        Task<IAuthLogoutApiResponse> AuthLogoutAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Logs out the current authenticated user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLogoutApiResponse"/>&gt;</returns>
        Task<IAuthLogoutApiResponse> AuthLogoutOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Validates the current user&#39;s session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthValidateApiResponse"/>&gt;</returns>
        Task<IAuthValidateApiResponse> AuthValidateAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Validates the current user&#39;s session.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthValidateApiResponse"/>&gt;</returns>
        Task<IAuthValidateApiResponse> AuthValidateOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }
    /// <summary>
    /// The <see cref="IAuthLoginAppApiResponse"/>
    /// </summary>
    public interface IAuthLoginAppApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.LoginResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IAuthLoginKeyApiResponse"/>
    /// </summary>
    public interface IAuthLoginKeyApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.LoginResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IAuthLogoutApiResponse"/>
    /// </summary>
    public interface IAuthLogoutApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.LogoutResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IAuthValidateApiResponse"/>
    /// </summary>
    public interface IAuthValidateApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.ValidateResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AuthApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAuthLoginApp;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAuthLoginApp;
        internal void ExecuteOnAuthLoginApp(AuthApi.AuthLoginAppApiResponse apiResponse)
        {
            OnAuthLoginApp?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorAuthLoginApp(Exception exception)
        {
            OnErrorAuthLoginApp?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAuthLoginKey;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAuthLoginKey;
        internal void ExecuteOnAuthLoginKey(AuthApi.AuthLoginKeyApiResponse apiResponse)
        {
            OnAuthLoginKey?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorAuthLoginKey(Exception exception)
        {
            OnErrorAuthLoginKey?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAuthLogout;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAuthLogout;
        internal void ExecuteOnAuthLogout(AuthApi.AuthLogoutApiResponse apiResponse)
        {
            OnAuthLogout?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorAuthLogout(Exception exception)
        {
            OnErrorAuthLogout?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAuthValidate;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAuthValidate;
        internal void ExecuteOnAuthValidate(AuthApi.AuthValidateApiResponse apiResponse)
        {
            OnAuthValidate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorAuthValidate(Exception exception)
        {
            OnErrorAuthValidate?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AuthApi : IAuthApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }
        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AuthApi> Logger { get; }
        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }
        /// <summary>
        /// The class containing the events
        /// </summary>
        public AuthApiEvents Events { get; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthApi(ILogger<AuthApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AuthApiEvents authApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AuthApi>();
            HttpClient = httpClient;
            Events = authApiEvents;
        }
        partial void FormatAuthLoginApp(LoginAppRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateAuthLoginApp(LoginAppRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterAuthLoginAppDefaultImplementation(IAuthLoginAppApiResponse apiResponseLocalVar, LoginAppRequest request)
        {
            bool suppressDefaultLog = false;
            AfterAuthLoginApp(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterAuthLoginApp(ref bool suppressDefaultLog, IAuthLoginAppApiResponse apiResponseLocalVar, LoginAppRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorAuthLoginAppDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LoginAppRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAuthLoginApp(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorAuthLoginApp(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LoginAppRequest request);
        /// <summary>
        /// Login as the specified user using the specified application. 
        /// </summary>
        /// <param name="request">The login request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginAppApiResponse"/>&gt;</returns>
        public async Task<IAuthLoginAppApiResponse> AuthLoginAppOrDefaultAsync(LoginAppRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AuthLoginAppAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Login as the specified user using the specified application. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The login request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginAppApiResponse"/>&gt;</returns>
        public async Task<IAuthLoginAppApiResponse> AuthLoginAppAsync(LoginAppRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateAuthLoginApp(request);
                FormatAuthLoginApp(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Auth/loginApp"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Auth/loginApp");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<AuthLoginAppApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AuthLoginAppApiResponse>();
                        AuthLoginAppApiResponse apiResponseLocalVar = new AuthLoginAppApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Auth/loginApp", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterAuthLoginAppDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnAuthLoginApp(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthLoginAppDefaultImplementation(e, "/api/Auth/loginApp", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorAuthLoginApp(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="AuthLoginAppApiResponse"/>
        /// </summary>
        public partial class AuthLoginAppApiResponse : OpenAPI.Client.ApiResponse, IAuthLoginAppApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AuthLoginAppApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="AuthLoginAppApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthLoginAppApiResponse(ILogger<AuthLoginAppApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.LoginResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.LoginResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.LoginResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        partial void FormatAuthLoginKey(LoginApiKeyRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateAuthLoginKey(LoginApiKeyRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterAuthLoginKeyDefaultImplementation(IAuthLoginKeyApiResponse apiResponseLocalVar, LoginApiKeyRequest request)
        {
            bool suppressDefaultLog = false;
            AfterAuthLoginKey(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterAuthLoginKey(ref bool suppressDefaultLog, IAuthLoginKeyApiResponse apiResponseLocalVar, LoginApiKeyRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorAuthLoginKeyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LoginApiKeyRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAuthLoginKey(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorAuthLoginKey(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, LoginApiKeyRequest request);
        /// <summary>
        /// Login as the specified user using the specified API key. 
        /// </summary>
        /// <param name="request">The login request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginKeyApiResponse"/>&gt;</returns>
        public async Task<IAuthLoginKeyApiResponse> AuthLoginKeyOrDefaultAsync(LoginApiKeyRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AuthLoginKeyAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Login as the specified user using the specified API key. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The login request.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLoginKeyApiResponse"/>&gt;</returns>
        public async Task<IAuthLoginKeyApiResponse> AuthLoginKeyAsync(LoginApiKeyRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateAuthLoginKey(request);
                FormatAuthLoginKey(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Auth/loginKey"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Auth/loginKey");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<AuthLoginKeyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AuthLoginKeyApiResponse>();
                        AuthLoginKeyApiResponse apiResponseLocalVar = new AuthLoginKeyApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Auth/loginKey", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterAuthLoginKeyDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnAuthLoginKey(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthLoginKeyDefaultImplementation(e, "/api/Auth/loginKey", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorAuthLoginKey(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="AuthLoginKeyApiResponse"/>
        /// </summary>
        public partial class AuthLoginKeyApiResponse : OpenAPI.Client.ApiResponse, IAuthLoginKeyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AuthLoginKeyApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="AuthLoginKeyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthLoginKeyApiResponse(ILogger<AuthLoginKeyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.LoginResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.LoginResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.LoginResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterAuthLogoutDefaultImplementation(IAuthLogoutApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterAuthLogout(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterAuthLogout(ref bool suppressDefaultLog, IAuthLogoutApiResponse apiResponseLocalVar);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorAuthLogoutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAuthLogout(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorAuthLogout(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);
        /// <summary>
        /// Logs out the current authenticated user. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLogoutApiResponse"/>&gt;</returns>
        public async Task<IAuthLogoutApiResponse> AuthLogoutOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AuthLogoutAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Logs out the current authenticated user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthLogoutApiResponse"/>&gt;</returns>
        public async Task<IAuthLogoutApiResponse> AuthLogoutAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Auth/logout"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Auth/logout");
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<AuthLogoutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AuthLogoutApiResponse>();
                        AuthLogoutApiResponse apiResponseLocalVar = new AuthLogoutApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Auth/logout", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterAuthLogoutDefaultImplementation(apiResponseLocalVar);
                        Events.ExecuteOnAuthLogout(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthLogoutDefaultImplementation(e, "/api/Auth/logout", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorAuthLogout(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="AuthLogoutApiResponse"/>
        /// </summary>
        public partial class AuthLogoutApiResponse : OpenAPI.Client.ApiResponse, IAuthLogoutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AuthLogoutApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="AuthLogoutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthLogoutApiResponse(ILogger<AuthLogoutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.LogoutResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.LogoutResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.LogoutResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterAuthValidateDefaultImplementation(IAuthValidateApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterAuthValidate(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterAuthValidate(ref bool suppressDefaultLog, IAuthValidateApiResponse apiResponseLocalVar);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorAuthValidateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAuthValidate(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorAuthValidate(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);
        /// <summary>
        /// Validates the current user&#39;s session. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthValidateApiResponse"/>&gt;</returns>
        public async Task<IAuthValidateApiResponse> AuthValidateOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AuthValidateAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Validates the current user&#39;s session. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAuthValidateApiResponse"/>&gt;</returns>
        public async Task<IAuthValidateApiResponse> AuthValidateAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Auth/validate"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Auth/validate");
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<AuthValidateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AuthValidateApiResponse>();
                        AuthValidateApiResponse apiResponseLocalVar = new AuthValidateApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Auth/validate", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterAuthValidateDefaultImplementation(apiResponseLocalVar);
                        Events.ExecuteOnAuthValidate(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAuthValidateDefaultImplementation(e, "/api/Auth/validate", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorAuthValidate(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="AuthValidateApiResponse"/>
        /// </summary>
        public partial class AuthValidateApiResponse : OpenAPI.Client.ApiResponse, IAuthValidateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AuthValidateApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="AuthValidateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AuthValidateApiResponse(ILogger<AuthValidateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.ValidateResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.ValidateResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.ValidateResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IContractApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ContractApiEvents Events { get; }
        /// <summary>
        /// Lists available contracts based on the provided request parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The listing criteria for available contracts.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractAvailableContractsApiResponse"/>&gt;</returns>
        Task<IContractAvailableContractsApiResponse> ContractAvailableContractsAsync(ListAvailableContractRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Lists available contracts based on the provided request parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">The listing criteria for available contracts.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractAvailableContractsApiResponse"/>&gt;</returns>
        Task<IContractAvailableContractsApiResponse> ContractAvailableContractsOrDefaultAsync(ListAvailableContractRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for a contract by its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request containing the contract ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractSearchContractByIdApiResponse"/>&gt;</returns>
        Task<IContractSearchContractByIdApiResponse> ContractSearchContractByIdAsync(SearchContractByIdRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for a contract by its ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">The request containing the contract ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractSearchContractByIdApiResponse"/>&gt;</returns>
        Task<IContractSearchContractByIdApiResponse> ContractSearchContractByIdOrDefaultAsync(SearchContractByIdRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for contracts based on the provided search criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The search criteria for finding contracts.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractSearchContractsApiResponse"/>&gt;</returns>
        Task<IContractSearchContractsApiResponse> ContractSearchContractsAsync(SearchContractRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for contracts based on the provided search criteria.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">The search criteria for finding contracts.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractSearchContractsApiResponse"/>&gt;</returns>
        Task<IContractSearchContractsApiResponse> ContractSearchContractsOrDefaultAsync(SearchContractRequest request, System.Threading.CancellationToken cancellationToken = default);
    }
    /// <summary>
    /// The <see cref="IContractAvailableContractsApiResponse"/>
    /// </summary>
    public interface IContractAvailableContractsApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.ListAvailableContractResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IContractSearchContractByIdApiResponse"/>
    /// </summary>
    public interface IContractSearchContractByIdApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.SearchContractByIdResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IContractSearchContractsApiResponse"/>
    /// </summary>
    public interface IContractSearchContractsApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.SearchContractResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ContractApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnContractAvailableContracts;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorContractAvailableContracts;
        internal void ExecuteOnContractAvailableContracts(ContractApi.ContractAvailableContractsApiResponse apiResponse)
        {
            OnContractAvailableContracts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorContractAvailableContracts(Exception exception)
        {
            OnErrorContractAvailableContracts?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnContractSearchContractById;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorContractSearchContractById;
        internal void ExecuteOnContractSearchContractById(ContractApi.ContractSearchContractByIdApiResponse apiResponse)
        {
            OnContractSearchContractById?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorContractSearchContractById(Exception exception)
        {
            OnErrorContractSearchContractById?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnContractSearchContracts;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorContractSearchContracts;
        internal void ExecuteOnContractSearchContracts(ContractApi.ContractSearchContractsApiResponse apiResponse)
        {
            OnContractSearchContracts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorContractSearchContracts(Exception exception)
        {
            OnErrorContractSearchContracts?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ContractApi : IContractApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }
        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ContractApi> Logger { get; }
        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }
        /// <summary>
        /// The class containing the events
        /// </summary>
        public ContractApiEvents Events { get; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContractApi(ILogger<ContractApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ContractApiEvents contractApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ContractApi>();
            HttpClient = httpClient;
            Events = contractApiEvents;
        }
        partial void FormatContractAvailableContracts(ListAvailableContractRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateContractAvailableContracts(ListAvailableContractRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterContractAvailableContractsDefaultImplementation(IContractAvailableContractsApiResponse apiResponseLocalVar, ListAvailableContractRequest request)
        {
            bool suppressDefaultLog = false;
            AfterContractAvailableContracts(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterContractAvailableContracts(ref bool suppressDefaultLog, IContractAvailableContractsApiResponse apiResponseLocalVar, ListAvailableContractRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorContractAvailableContractsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ListAvailableContractRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContractAvailableContracts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorContractAvailableContracts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ListAvailableContractRequest request);
        /// <summary>
        /// Lists available contracts based on the provided request parameters. 
        /// </summary>
        /// <param name="request">The listing criteria for available contracts.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractAvailableContractsApiResponse"/>&gt;</returns>
        public async Task<IContractAvailableContractsApiResponse> ContractAvailableContractsOrDefaultAsync(ListAvailableContractRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContractAvailableContractsAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Lists available contracts based on the provided request parameters. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The listing criteria for available contracts.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractAvailableContractsApiResponse"/>&gt;</returns>
        public async Task<IContractAvailableContractsApiResponse> ContractAvailableContractsAsync(ListAvailableContractRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateContractAvailableContracts(request);
                FormatContractAvailableContracts(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Contract/available"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Contract/available");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<ContractAvailableContractsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContractAvailableContractsApiResponse>();
                        ContractAvailableContractsApiResponse apiResponseLocalVar = new ContractAvailableContractsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Contract/available", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterContractAvailableContractsDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnContractAvailableContracts(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContractAvailableContractsDefaultImplementation(e, "/api/Contract/available", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorContractAvailableContracts(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="ContractAvailableContractsApiResponse"/>
        /// </summary>
        public partial class ContractAvailableContractsApiResponse : OpenAPI.Client.ApiResponse, IContractAvailableContractsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContractAvailableContractsApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="ContractAvailableContractsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContractAvailableContractsApiResponse(ILogger<ContractAvailableContractsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.ListAvailableContractResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.ListAvailableContractResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.ListAvailableContractResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        partial void FormatContractSearchContractById(SearchContractByIdRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateContractSearchContractById(SearchContractByIdRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterContractSearchContractByIdDefaultImplementation(IContractSearchContractByIdApiResponse apiResponseLocalVar, SearchContractByIdRequest request)
        {
            bool suppressDefaultLog = false;
            AfterContractSearchContractById(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterContractSearchContractById(ref bool suppressDefaultLog, IContractSearchContractByIdApiResponse apiResponseLocalVar, SearchContractByIdRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorContractSearchContractByIdDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchContractByIdRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContractSearchContractById(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorContractSearchContractById(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchContractByIdRequest request);
        /// <summary>
        /// Searches for a contract by its ID. 
        /// </summary>
        /// <param name="request">The request containing the contract ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractSearchContractByIdApiResponse"/>&gt;</returns>
        public async Task<IContractSearchContractByIdApiResponse> ContractSearchContractByIdOrDefaultAsync(SearchContractByIdRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContractSearchContractByIdAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Searches for a contract by its ID. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request containing the contract ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractSearchContractByIdApiResponse"/>&gt;</returns>
        public async Task<IContractSearchContractByIdApiResponse> ContractSearchContractByIdAsync(SearchContractByIdRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateContractSearchContractById(request);
                FormatContractSearchContractById(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Contract/searchById"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Contract/searchById");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<ContractSearchContractByIdApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContractSearchContractByIdApiResponse>();
                        ContractSearchContractByIdApiResponse apiResponseLocalVar = new ContractSearchContractByIdApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Contract/searchById", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterContractSearchContractByIdDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnContractSearchContractById(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContractSearchContractByIdDefaultImplementation(e, "/api/Contract/searchById", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorContractSearchContractById(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="ContractSearchContractByIdApiResponse"/>
        /// </summary>
        public partial class ContractSearchContractByIdApiResponse : OpenAPI.Client.ApiResponse, IContractSearchContractByIdApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContractSearchContractByIdApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="ContractSearchContractByIdApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContractSearchContractByIdApiResponse(ILogger<ContractSearchContractByIdApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.SearchContractByIdResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.SearchContractByIdResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.SearchContractByIdResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        partial void FormatContractSearchContracts(SearchContractRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateContractSearchContracts(SearchContractRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterContractSearchContractsDefaultImplementation(IContractSearchContractsApiResponse apiResponseLocalVar, SearchContractRequest request)
        {
            bool suppressDefaultLog = false;
            AfterContractSearchContracts(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterContractSearchContracts(ref bool suppressDefaultLog, IContractSearchContractsApiResponse apiResponseLocalVar, SearchContractRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorContractSearchContractsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchContractRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorContractSearchContracts(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorContractSearchContracts(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchContractRequest request);
        /// <summary>
        /// Searches for contracts based on the provided search criteria. 
        /// </summary>
        /// <param name="request">The search criteria for finding contracts.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractSearchContractsApiResponse"/>&gt;</returns>
        public async Task<IContractSearchContractsApiResponse> ContractSearchContractsOrDefaultAsync(SearchContractRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ContractSearchContractsAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Searches for contracts based on the provided search criteria. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The search criteria for finding contracts.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IContractSearchContractsApiResponse"/>&gt;</returns>
        public async Task<IContractSearchContractsApiResponse> ContractSearchContractsAsync(SearchContractRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateContractSearchContracts(request);
                FormatContractSearchContracts(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Contract/search"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Contract/search");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<ContractSearchContractsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ContractSearchContractsApiResponse>();
                        ContractSearchContractsApiResponse apiResponseLocalVar = new ContractSearchContractsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Contract/search", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterContractSearchContractsDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnContractSearchContracts(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorContractSearchContractsDefaultImplementation(e, "/api/Contract/search", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorContractSearchContracts(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="ContractSearchContractsApiResponse"/>
        /// </summary>
        public partial class ContractSearchContractsApiResponse : OpenAPI.Client.ApiResponse, IContractSearchContractsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ContractSearchContractsApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="ContractSearchContractsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ContractSearchContractsApiResponse(ILogger<ContractSearchContractsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.SearchContractResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.SearchContractResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.SearchContractResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IHistoryApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        HistoryApiEvents Events { get; }
        /// <summary>
        /// Retrieves historical bars based on the specified request parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request containing parameters for retrieving historical bars.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHistoryGetBarsApiResponse"/>&gt;</returns>
        Task<IHistoryGetBarsApiResponse> HistoryGetBarsAsync(RetrieveBarRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Retrieves historical bars based on the specified request parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">The request containing parameters for retrieving historical bars.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHistoryGetBarsApiResponse"/>&gt;</returns>
        Task<IHistoryGetBarsApiResponse> HistoryGetBarsOrDefaultAsync(RetrieveBarRequest request, System.Threading.CancellationToken cancellationToken = default);
    }
    /// <summary>
    /// The <see cref="IHistoryGetBarsApiResponse"/>
    /// </summary>
    public interface IHistoryGetBarsApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.RetrieveBarResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class HistoryApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnHistoryGetBars;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorHistoryGetBars;
        internal void ExecuteOnHistoryGetBars(HistoryApi.HistoryGetBarsApiResponse apiResponse)
        {
            OnHistoryGetBars?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorHistoryGetBars(Exception exception)
        {
            OnErrorHistoryGetBars?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class HistoryApi : IHistoryApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }
        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<HistoryApi> Logger { get; }
        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }
        /// <summary>
        /// The class containing the events
        /// </summary>
        public HistoryApiEvents Events { get; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HistoryApi(ILogger<HistoryApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, HistoryApiEvents historyApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<HistoryApi>();
            HttpClient = httpClient;
            Events = historyApiEvents;
        }
        partial void FormatHistoryGetBars(RetrieveBarRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateHistoryGetBars(RetrieveBarRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterHistoryGetBarsDefaultImplementation(IHistoryGetBarsApiResponse apiResponseLocalVar, RetrieveBarRequest request)
        {
            bool suppressDefaultLog = false;
            AfterHistoryGetBars(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterHistoryGetBars(ref bool suppressDefaultLog, IHistoryGetBarsApiResponse apiResponseLocalVar, RetrieveBarRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorHistoryGetBarsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, RetrieveBarRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorHistoryGetBars(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorHistoryGetBars(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, RetrieveBarRequest request);
        /// <summary>
        /// Retrieves historical bars based on the specified request parameters. 
        /// </summary>
        /// <param name="request">The request containing parameters for retrieving historical bars.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHistoryGetBarsApiResponse"/>&gt;</returns>
        public async Task<IHistoryGetBarsApiResponse> HistoryGetBarsOrDefaultAsync(RetrieveBarRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await HistoryGetBarsAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Retrieves historical bars based on the specified request parameters. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">The request containing parameters for retrieving historical bars.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHistoryGetBarsApiResponse"/>&gt;</returns>
        public async Task<IHistoryGetBarsApiResponse> HistoryGetBarsAsync(RetrieveBarRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateHistoryGetBars(request);
                FormatHistoryGetBars(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/History/retrieveBars"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/History/retrieveBars");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<HistoryGetBarsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<HistoryGetBarsApiResponse>();
                        HistoryGetBarsApiResponse apiResponseLocalVar = new HistoryGetBarsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/History/retrieveBars", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterHistoryGetBarsDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnHistoryGetBars(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorHistoryGetBarsDefaultImplementation(e, "/api/History/retrieveBars", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorHistoryGetBars(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="HistoryGetBarsApiResponse"/>
        /// </summary>
        public partial class HistoryGetBarsApiResponse : OpenAPI.Client.ApiResponse, IHistoryGetBarsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<HistoryGetBarsApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="HistoryGetBarsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public HistoryGetBarsApiResponse(ILogger<HistoryGetBarsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.RetrieveBarResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.RetrieveBarResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.RetrieveBarResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

namespace OpenAPI.Api
{
    /// <summary>
    /// Any Api client
    /// </summary>
    public interface IApi
    {
        /// <summary>
        /// The HttpClient
        /// </summary>
        HttpClient HttpClient { get; }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOrderApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OrderApiEvents Events { get; }
        /// <summary>
        /// Cancels an existing order based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing order cancellation details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderCancelOrderApiResponse"/>&gt;</returns>
        Task<IOrderCancelOrderApiResponse> OrderCancelOrderAsync(CancelOrderRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Cancels an existing order based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing order cancellation details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderCancelOrderApiResponse"/>&gt;</returns>
        Task<IOrderCancelOrderApiResponse> OrderCancelOrderOrDefaultAsync(CancelOrderRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Modifies an existing order based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing order modification details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderModifyOrderApiResponse"/>&gt;</returns>
        Task<IOrderModifyOrderApiResponse> OrderModifyOrderAsync(ModifyOrderRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Modifies an existing order based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing order modification details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderModifyOrderApiResponse"/>&gt;</returns>
        Task<IOrderModifyOrderApiResponse> OrderModifyOrderOrDefaultAsync(ModifyOrderRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Places a new order based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing order details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderPlaceOrderApiResponse"/>&gt;</returns>
        Task<IOrderPlaceOrderApiResponse> OrderPlaceOrderAsync(PlaceOrderRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Places a new order based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing order details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderPlaceOrderApiResponse"/>&gt;</returns>
        Task<IOrderPlaceOrderApiResponse> OrderPlaceOrderOrDefaultAsync(PlaceOrderRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for open (working/active) orders based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderSearchOpenOrdersApiResponse"/>&gt;</returns>
        Task<IOrderSearchOpenOrdersApiResponse> OrderSearchOpenOrdersAsync(SearchOpenOrderRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for open (working/active) orders based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderSearchOpenOrdersApiResponse"/>&gt;</returns>
        Task<IOrderSearchOpenOrdersApiResponse> OrderSearchOpenOrdersOrDefaultAsync(SearchOpenOrderRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for orders based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderSearchOrdersApiResponse"/>&gt;</returns>
        Task<IOrderSearchOrdersApiResponse> OrderSearchOrdersAsync(SearchOrderRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for orders based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderSearchOrdersApiResponse"/>&gt;</returns>
        Task<IOrderSearchOrdersApiResponse> OrderSearchOrdersOrDefaultAsync(SearchOrderRequest request, System.Threading.CancellationToken cancellationToken = default);
    }
    /// <summary>
    /// The <see cref="IOrderCancelOrderApiResponse"/>
    /// </summary>
    public interface IOrderCancelOrderApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.CancelOrderResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IOrderModifyOrderApiResponse"/>
    /// </summary>
    public interface IOrderModifyOrderApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.ModifyOrderResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IOrderPlaceOrderApiResponse"/>
    /// </summary>
    public interface IOrderPlaceOrderApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.PlaceOrderResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IOrderSearchOpenOrdersApiResponse"/>
    /// </summary>
    public interface IOrderSearchOpenOrdersApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.SearchOrderResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IOrderSearchOrdersApiResponse"/>
    /// </summary>
    public interface IOrderSearchOrdersApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.SearchOrderResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OrderApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOrderCancelOrder;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOrderCancelOrder;
        internal void ExecuteOnOrderCancelOrder(OrderApi.OrderCancelOrderApiResponse apiResponse)
        {
            OnOrderCancelOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorOrderCancelOrder(Exception exception)
        {
            OnErrorOrderCancelOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOrderModifyOrder;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOrderModifyOrder;
        internal void ExecuteOnOrderModifyOrder(OrderApi.OrderModifyOrderApiResponse apiResponse)
        {
            OnOrderModifyOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorOrderModifyOrder(Exception exception)
        {
            OnErrorOrderModifyOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOrderPlaceOrder;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOrderPlaceOrder;
        internal void ExecuteOnOrderPlaceOrder(OrderApi.OrderPlaceOrderApiResponse apiResponse)
        {
            OnOrderPlaceOrder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorOrderPlaceOrder(Exception exception)
        {
            OnErrorOrderPlaceOrder?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOrderSearchOpenOrders;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOrderSearchOpenOrders;
        internal void ExecuteOnOrderSearchOpenOrders(OrderApi.OrderSearchOpenOrdersApiResponse apiResponse)
        {
            OnOrderSearchOpenOrders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorOrderSearchOpenOrders(Exception exception)
        {
            OnErrorOrderSearchOpenOrders?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnOrderSearchOrders;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorOrderSearchOrders;
        internal void ExecuteOnOrderSearchOrders(OrderApi.OrderSearchOrdersApiResponse apiResponse)
        {
            OnOrderSearchOrders?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorOrderSearchOrders(Exception exception)
        {
            OnErrorOrderSearchOrders?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OrderApi : IOrderApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }
        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OrderApi> Logger { get; }
        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }
        /// <summary>
        /// The class containing the events
        /// </summary>
        public OrderApiEvents Events { get; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrderApi(ILogger<OrderApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OrderApiEvents orderApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OrderApi>();
            HttpClient = httpClient;
            Events = orderApiEvents;
        }
        partial void FormatOrderCancelOrder(CancelOrderRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateOrderCancelOrder(CancelOrderRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterOrderCancelOrderDefaultImplementation(IOrderCancelOrderApiResponse apiResponseLocalVar, CancelOrderRequest request)
        {
            bool suppressDefaultLog = false;
            AfterOrderCancelOrder(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterOrderCancelOrder(ref bool suppressDefaultLog, IOrderCancelOrderApiResponse apiResponseLocalVar, CancelOrderRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorOrderCancelOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CancelOrderRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOrderCancelOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorOrderCancelOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CancelOrderRequest request);
        /// <summary>
        /// Cancels an existing order based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing order cancellation details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderCancelOrderApiResponse"/>&gt;</returns>
        public async Task<IOrderCancelOrderApiResponse> OrderCancelOrderOrDefaultAsync(CancelOrderRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OrderCancelOrderAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Cancels an existing order based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing order cancellation details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderCancelOrderApiResponse"/>&gt;</returns>
        public async Task<IOrderCancelOrderApiResponse> OrderCancelOrderAsync(CancelOrderRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateOrderCancelOrder(request);
                FormatOrderCancelOrder(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Order/cancel"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Order/cancel");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<OrderCancelOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OrderCancelOrderApiResponse>();
                        OrderCancelOrderApiResponse apiResponseLocalVar = new OrderCancelOrderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Order/cancel", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterOrderCancelOrderDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnOrderCancelOrder(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrderCancelOrderDefaultImplementation(e, "/api/Order/cancel", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorOrderCancelOrder(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="OrderCancelOrderApiResponse"/>
        /// </summary>
        public partial class OrderCancelOrderApiResponse : OpenAPI.Client.ApiResponse, IOrderCancelOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OrderCancelOrderApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="OrderCancelOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrderCancelOrderApiResponse(ILogger<OrderCancelOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.CancelOrderResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.CancelOrderResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.CancelOrderResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        partial void FormatOrderModifyOrder(ModifyOrderRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateOrderModifyOrder(ModifyOrderRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterOrderModifyOrderDefaultImplementation(IOrderModifyOrderApiResponse apiResponseLocalVar, ModifyOrderRequest request)
        {
            bool suppressDefaultLog = false;
            AfterOrderModifyOrder(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterOrderModifyOrder(ref bool suppressDefaultLog, IOrderModifyOrderApiResponse apiResponseLocalVar, ModifyOrderRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorOrderModifyOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModifyOrderRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOrderModifyOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorOrderModifyOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ModifyOrderRequest request);
        /// <summary>
        /// Modifies an existing order based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing order modification details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderModifyOrderApiResponse"/>&gt;</returns>
        public async Task<IOrderModifyOrderApiResponse> OrderModifyOrderOrDefaultAsync(ModifyOrderRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OrderModifyOrderAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Modifies an existing order based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing order modification details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderModifyOrderApiResponse"/>&gt;</returns>
        public async Task<IOrderModifyOrderApiResponse> OrderModifyOrderAsync(ModifyOrderRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateOrderModifyOrder(request);
                FormatOrderModifyOrder(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Order/modify"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Order/modify");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<OrderModifyOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OrderModifyOrderApiResponse>();
                        OrderModifyOrderApiResponse apiResponseLocalVar = new OrderModifyOrderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Order/modify", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterOrderModifyOrderDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnOrderModifyOrder(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrderModifyOrderDefaultImplementation(e, "/api/Order/modify", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorOrderModifyOrder(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="OrderModifyOrderApiResponse"/>
        /// </summary>
        public partial class OrderModifyOrderApiResponse : OpenAPI.Client.ApiResponse, IOrderModifyOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OrderModifyOrderApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="OrderModifyOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrderModifyOrderApiResponse(ILogger<OrderModifyOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.ModifyOrderResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.ModifyOrderResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.ModifyOrderResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        partial void FormatOrderPlaceOrder(PlaceOrderRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateOrderPlaceOrder(PlaceOrderRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterOrderPlaceOrderDefaultImplementation(IOrderPlaceOrderApiResponse apiResponseLocalVar, PlaceOrderRequest request)
        {
            bool suppressDefaultLog = false;
            AfterOrderPlaceOrder(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterOrderPlaceOrder(ref bool suppressDefaultLog, IOrderPlaceOrderApiResponse apiResponseLocalVar, PlaceOrderRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorOrderPlaceOrderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PlaceOrderRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOrderPlaceOrder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorOrderPlaceOrder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PlaceOrderRequest request);
        /// <summary>
        /// Places a new order based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing order details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderPlaceOrderApiResponse"/>&gt;</returns>
        public async Task<IOrderPlaceOrderApiResponse> OrderPlaceOrderOrDefaultAsync(PlaceOrderRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OrderPlaceOrderAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Places a new order based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing order details.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderPlaceOrderApiResponse"/>&gt;</returns>
        public async Task<IOrderPlaceOrderApiResponse> OrderPlaceOrderAsync(PlaceOrderRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateOrderPlaceOrder(request);
                FormatOrderPlaceOrder(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Order/place"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Order/place");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<OrderPlaceOrderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OrderPlaceOrderApiResponse>();
                        OrderPlaceOrderApiResponse apiResponseLocalVar = new OrderPlaceOrderApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Order/place", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterOrderPlaceOrderDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnOrderPlaceOrder(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrderPlaceOrderDefaultImplementation(e, "/api/Order/place", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorOrderPlaceOrder(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="OrderPlaceOrderApiResponse"/>
        /// </summary>
        public partial class OrderPlaceOrderApiResponse : OpenAPI.Client.ApiResponse, IOrderPlaceOrderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OrderPlaceOrderApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="OrderPlaceOrderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrderPlaceOrderApiResponse(ILogger<OrderPlaceOrderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.PlaceOrderResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.PlaceOrderResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.PlaceOrderResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        partial void FormatOrderSearchOpenOrders(SearchOpenOrderRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateOrderSearchOpenOrders(SearchOpenOrderRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterOrderSearchOpenOrdersDefaultImplementation(IOrderSearchOpenOrdersApiResponse apiResponseLocalVar, SearchOpenOrderRequest request)
        {
            bool suppressDefaultLog = false;
            AfterOrderSearchOpenOrders(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterOrderSearchOpenOrders(ref bool suppressDefaultLog, IOrderSearchOpenOrdersApiResponse apiResponseLocalVar, SearchOpenOrderRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorOrderSearchOpenOrdersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchOpenOrderRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOrderSearchOpenOrders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorOrderSearchOpenOrders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchOpenOrderRequest request);
        /// <summary>
        /// Searches for open (working/active) orders based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderSearchOpenOrdersApiResponse"/>&gt;</returns>
        public async Task<IOrderSearchOpenOrdersApiResponse> OrderSearchOpenOrdersOrDefaultAsync(SearchOpenOrderRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OrderSearchOpenOrdersAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Searches for open (working/active) orders based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderSearchOpenOrdersApiResponse"/>&gt;</returns>
        public async Task<IOrderSearchOpenOrdersApiResponse> OrderSearchOpenOrdersAsync(SearchOpenOrderRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateOrderSearchOpenOrders(request);
                FormatOrderSearchOpenOrders(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Order/searchOpen"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Order/searchOpen");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<OrderSearchOpenOrdersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OrderSearchOpenOrdersApiResponse>();
                        OrderSearchOpenOrdersApiResponse apiResponseLocalVar = new OrderSearchOpenOrdersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Order/searchOpen", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterOrderSearchOpenOrdersDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnOrderSearchOpenOrders(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrderSearchOpenOrdersDefaultImplementation(e, "/api/Order/searchOpen", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorOrderSearchOpenOrders(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="OrderSearchOpenOrdersApiResponse"/>
        /// </summary>
        public partial class OrderSearchOpenOrdersApiResponse : OpenAPI.Client.ApiResponse, IOrderSearchOpenOrdersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OrderSearchOpenOrdersApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="OrderSearchOpenOrdersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrderSearchOpenOrdersApiResponse(ILogger<OrderSearchOpenOrdersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.SearchOrderResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.SearchOrderResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.SearchOrderResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        partial void FormatOrderSearchOrders(SearchOrderRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateOrderSearchOrders(SearchOrderRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterOrderSearchOrdersDefaultImplementation(IOrderSearchOrdersApiResponse apiResponseLocalVar, SearchOrderRequest request)
        {
            bool suppressDefaultLog = false;
            AfterOrderSearchOrders(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterOrderSearchOrders(ref bool suppressDefaultLog, IOrderSearchOrdersApiResponse apiResponseLocalVar, SearchOrderRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorOrderSearchOrdersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchOrderRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorOrderSearchOrders(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorOrderSearchOrders(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchOrderRequest request);
        /// <summary>
        /// Searches for orders based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderSearchOrdersApiResponse"/>&gt;</returns>
        public async Task<IOrderSearchOrdersApiResponse> OrderSearchOrdersOrDefaultAsync(SearchOrderRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await OrderSearchOrdersAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Searches for orders based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IOrderSearchOrdersApiResponse"/>&gt;</returns>
        public async Task<IOrderSearchOrdersApiResponse> OrderSearchOrdersAsync(SearchOrderRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateOrderSearchOrders(request);
                FormatOrderSearchOrders(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Order/search"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Order/search");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<OrderSearchOrdersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<OrderSearchOrdersApiResponse>();
                        OrderSearchOrdersApiResponse apiResponseLocalVar = new OrderSearchOrdersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Order/search", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterOrderSearchOrdersDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnOrderSearchOrders(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorOrderSearchOrdersDefaultImplementation(e, "/api/Order/search", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorOrderSearchOrders(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="OrderSearchOrdersApiResponse"/>
        /// </summary>
        public partial class OrderSearchOrdersApiResponse : OpenAPI.Client.ApiResponse, IOrderSearchOrdersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<OrderSearchOrdersApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="OrderSearchOrdersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public OrderSearchOrdersApiResponse(ILogger<OrderSearchOrdersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.SearchOrderResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.SearchOrderResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.SearchOrderResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPositionApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PositionApiEvents Events { get; }
        /// <summary>
        /// Closes a contract position based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing the account ID and contract ID to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionCloseContractPositionApiResponse"/>&gt;</returns>
        Task<IPositionCloseContractPositionApiResponse> PositionCloseContractPositionAsync(CloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Closes a contract position based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing the account ID and contract ID to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionCloseContractPositionApiResponse"/>&gt;</returns>
        Task<IPositionCloseContractPositionApiResponse> PositionCloseContractPositionOrDefaultAsync(CloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Partially closes a contract position based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing the account ID, contract ID, and size to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionPartialCloseContractPositionApiResponse"/>&gt;</returns>
        Task<IPositionPartialCloseContractPositionApiResponse> PositionPartialCloseContractPositionAsync(PartialCloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Partially closes a contract position based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing the account ID, contract ID, and size to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionPartialCloseContractPositionApiResponse"/>&gt;</returns>
        Task<IPositionPartialCloseContractPositionApiResponse> PositionPartialCloseContractPositionOrDefaultAsync(PartialCloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for open positions based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionSearchOpenPositionsApiResponse"/>&gt;</returns>
        Task<IPositionSearchOpenPositionsApiResponse> PositionSearchOpenPositionsAsync(SearchPositionRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for open positions based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionSearchOpenPositionsApiResponse"/>&gt;</returns>
        Task<IPositionSearchOpenPositionsApiResponse> PositionSearchOpenPositionsOrDefaultAsync(SearchPositionRequest request, System.Threading.CancellationToken cancellationToken = default);
    }
    /// <summary>
    /// The <see cref="IPositionCloseContractPositionApiResponse"/>
    /// </summary>
    public interface IPositionCloseContractPositionApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.ClosePositionResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IPositionPartialCloseContractPositionApiResponse"/>
    /// </summary>
    public interface IPositionPartialCloseContractPositionApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.PartialClosePositionResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// The <see cref="IPositionSearchOpenPositionsApiResponse"/>
    /// </summary>
    public interface IPositionSearchOpenPositionsApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.SearchPositionResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PositionApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnPositionCloseContractPosition;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorPositionCloseContractPosition;
        internal void ExecuteOnPositionCloseContractPosition(PositionApi.PositionCloseContractPositionApiResponse apiResponse)
        {
            OnPositionCloseContractPosition?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorPositionCloseContractPosition(Exception exception)
        {
            OnErrorPositionCloseContractPosition?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnPositionPartialCloseContractPosition;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorPositionPartialCloseContractPosition;
        internal void ExecuteOnPositionPartialCloseContractPosition(PositionApi.PositionPartialCloseContractPositionApiResponse apiResponse)
        {
            OnPositionPartialCloseContractPosition?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorPositionPartialCloseContractPosition(Exception exception)
        {
            OnErrorPositionPartialCloseContractPosition?.Invoke(this, new ExceptionEventArgs(exception));
        }
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnPositionSearchOpenPositions;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorPositionSearchOpenPositions;
        internal void ExecuteOnPositionSearchOpenPositions(PositionApi.PositionSearchOpenPositionsApiResponse apiResponse)
        {
            OnPositionSearchOpenPositions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorPositionSearchOpenPositions(Exception exception)
        {
            OnErrorPositionSearchOpenPositions?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PositionApi : IPositionApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }
        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PositionApi> Logger { get; }
        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }
        /// <summary>
        /// The class containing the events
        /// </summary>
        public PositionApiEvents Events { get; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PositionApi(ILogger<PositionApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PositionApiEvents positionApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PositionApi>();
            HttpClient = httpClient;
            Events = positionApiEvents;
        }
        partial void FormatPositionCloseContractPosition(CloseContractPositionRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidatePositionCloseContractPosition(CloseContractPositionRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterPositionCloseContractPositionDefaultImplementation(IPositionCloseContractPositionApiResponse apiResponseLocalVar, CloseContractPositionRequest request)
        {
            bool suppressDefaultLog = false;
            AfterPositionCloseContractPosition(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterPositionCloseContractPosition(ref bool suppressDefaultLog, IPositionCloseContractPositionApiResponse apiResponseLocalVar, CloseContractPositionRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorPositionCloseContractPositionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CloseContractPositionRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPositionCloseContractPosition(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorPositionCloseContractPosition(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CloseContractPositionRequest request);
        /// <summary>
        /// Closes a contract position based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing the account ID and contract ID to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionCloseContractPositionApiResponse"/>&gt;</returns>
        public async Task<IPositionCloseContractPositionApiResponse> PositionCloseContractPositionOrDefaultAsync(CloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PositionCloseContractPositionAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Closes a contract position based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing the account ID and contract ID to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionCloseContractPositionApiResponse"/>&gt;</returns>
        public async Task<IPositionCloseContractPositionApiResponse> PositionCloseContractPositionAsync(CloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidatePositionCloseContractPosition(request);
                FormatPositionCloseContractPosition(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Position/closeContract"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Position/closeContract");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<PositionCloseContractPositionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PositionCloseContractPositionApiResponse>();
                        PositionCloseContractPositionApiResponse apiResponseLocalVar = new PositionCloseContractPositionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Position/closeContract", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterPositionCloseContractPositionDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnPositionCloseContractPosition(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPositionCloseContractPositionDefaultImplementation(e, "/api/Position/closeContract", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorPositionCloseContractPosition(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="PositionCloseContractPositionApiResponse"/>
        /// </summary>
        public partial class PositionCloseContractPositionApiResponse : OpenAPI.Client.ApiResponse, IPositionCloseContractPositionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PositionCloseContractPositionApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="PositionCloseContractPositionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PositionCloseContractPositionApiResponse(ILogger<PositionCloseContractPositionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.ClosePositionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.ClosePositionResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.ClosePositionResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        partial void FormatPositionPartialCloseContractPosition(PartialCloseContractPositionRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidatePositionPartialCloseContractPosition(PartialCloseContractPositionRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterPositionPartialCloseContractPositionDefaultImplementation(IPositionPartialCloseContractPositionApiResponse apiResponseLocalVar, PartialCloseContractPositionRequest request)
        {
            bool suppressDefaultLog = false;
            AfterPositionPartialCloseContractPosition(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterPositionPartialCloseContractPosition(ref bool suppressDefaultLog, IPositionPartialCloseContractPositionApiResponse apiResponseLocalVar, PartialCloseContractPositionRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorPositionPartialCloseContractPositionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PartialCloseContractPositionRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPositionPartialCloseContractPosition(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorPositionPartialCloseContractPosition(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PartialCloseContractPositionRequest request);
        /// <summary>
        /// Partially closes a contract position based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing the account ID, contract ID, and size to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionPartialCloseContractPositionApiResponse"/>&gt;</returns>
        public async Task<IPositionPartialCloseContractPositionApiResponse> PositionPartialCloseContractPositionOrDefaultAsync(PartialCloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PositionPartialCloseContractPositionAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Partially closes a contract position based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing the account ID, contract ID, and size to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionPartialCloseContractPositionApiResponse"/>&gt;</returns>
        public async Task<IPositionPartialCloseContractPositionApiResponse> PositionPartialCloseContractPositionAsync(PartialCloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidatePositionPartialCloseContractPosition(request);
                FormatPositionPartialCloseContractPosition(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Position/partialCloseContract"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Position/partialCloseContract");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<PositionPartialCloseContractPositionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PositionPartialCloseContractPositionApiResponse>();
                        PositionPartialCloseContractPositionApiResponse apiResponseLocalVar = new PositionPartialCloseContractPositionApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Position/partialCloseContract", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterPositionPartialCloseContractPositionDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnPositionPartialCloseContractPosition(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPositionPartialCloseContractPositionDefaultImplementation(e, "/api/Position/partialCloseContract", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorPositionPartialCloseContractPosition(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="PositionPartialCloseContractPositionApiResponse"/>
        /// </summary>
        public partial class PositionPartialCloseContractPositionApiResponse : OpenAPI.Client.ApiResponse, IPositionPartialCloseContractPositionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PositionPartialCloseContractPositionApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="PositionPartialCloseContractPositionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PositionPartialCloseContractPositionApiResponse(ILogger<PositionPartialCloseContractPositionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.PartialClosePositionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.PartialClosePositionResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.PartialClosePositionResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
        partial void FormatPositionSearchOpenPositions(SearchPositionRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidatePositionSearchOpenPositions(SearchPositionRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterPositionSearchOpenPositionsDefaultImplementation(IPositionSearchOpenPositionsApiResponse apiResponseLocalVar, SearchPositionRequest request)
        {
            bool suppressDefaultLog = false;
            AfterPositionSearchOpenPositions(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterPositionSearchOpenPositions(ref bool suppressDefaultLog, IPositionSearchOpenPositionsApiResponse apiResponseLocalVar, SearchPositionRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorPositionSearchOpenPositionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchPositionRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPositionSearchOpenPositions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorPositionSearchOpenPositions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchPositionRequest request);
        /// <summary>
        /// Searches for open positions based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionSearchOpenPositionsApiResponse"/>&gt;</returns>
        public async Task<IPositionSearchOpenPositionsApiResponse> PositionSearchOpenPositionsOrDefaultAsync(SearchPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PositionSearchOpenPositionsAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Searches for open positions based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionSearchOpenPositionsApiResponse"/>&gt;</returns>
        public async Task<IPositionSearchOpenPositionsApiResponse> PositionSearchOpenPositionsAsync(SearchPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidatePositionSearchOpenPositions(request);
                FormatPositionSearchOpenPositions(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Position/searchOpen"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Position/searchOpen");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<PositionSearchOpenPositionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PositionSearchOpenPositionsApiResponse>();
                        PositionSearchOpenPositionsApiResponse apiResponseLocalVar = new PositionSearchOpenPositionsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Position/searchOpen", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterPositionSearchOpenPositionsDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnPositionSearchOpenPositions(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPositionSearchOpenPositionsDefaultImplementation(e, "/api/Position/searchOpen", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorPositionSearchOpenPositions(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="PositionSearchOpenPositionsApiResponse"/>
        /// </summary>
        public partial class PositionSearchOpenPositionsApiResponse : OpenAPI.Client.ApiResponse, IPositionSearchOpenPositionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PositionSearchOpenPositionsApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="PositionSearchOpenPositionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PositionSearchOpenPositionsApiResponse(ILogger<PositionSearchOpenPositionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.SearchPositionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.SearchPositionResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.SearchPositionResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IStatusApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        StatusApiEvents Events { get; }
        /// <summary>
        /// Handles the ping request to check the status of the API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusPingApiResponse"/>&gt;</returns>
        Task<IStatusPingApiResponse> StatusPingAsync(System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Handles the ping request to check the status of the API.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusPingApiResponse"/>&gt;</returns>
        Task<IStatusPingApiResponse> StatusPingOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }
    /// <summary>
    /// The <see cref="IStatusPingApiResponse"/>
    /// </summary>
    public interface IStatusPingApiResponse : OpenAPI.Client.IApiResponse, IOk<string>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class StatusApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnStatusPing;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorStatusPing;
        internal void ExecuteOnStatusPing(StatusApi.StatusPingApiResponse apiResponse)
        {
            OnStatusPing?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorStatusPing(Exception exception)
        {
            OnErrorStatusPing?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class StatusApi : IStatusApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }
        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<StatusApi> Logger { get; }
        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }
        /// <summary>
        /// The class containing the events
        /// </summary>
        public StatusApiEvents Events { get; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatusApi(ILogger<StatusApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, StatusApiEvents statusApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<StatusApi>();
            HttpClient = httpClient;
            Events = statusApiEvents;
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterStatusPingDefaultImplementation(IStatusPingApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterStatusPing(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterStatusPing(ref bool suppressDefaultLog, IStatusPingApiResponse apiResponseLocalVar);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorStatusPingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorStatusPing(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorStatusPing(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);
        /// <summary>
        /// Handles the ping request to check the status of the API. 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusPingApiResponse"/>&gt;</returns>
        public async Task<IStatusPingApiResponse> StatusPingOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await StatusPingAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Handles the ping request to check the status of the API. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IStatusPingApiResponse"/>&gt;</returns>
        public async Task<IStatusPingApiResponse> StatusPingAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Status/ping"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Status/ping");
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<StatusPingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<StatusPingApiResponse>();
                        StatusPingApiResponse apiResponseLocalVar = new StatusPingApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Status/ping", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterStatusPingDefaultImplementation(apiResponseLocalVar);
                        Events.ExecuteOnStatusPing(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorStatusPingDefaultImplementation(e, "/api/Status/ping", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorStatusPing(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="StatusPingApiResponse"/>
        /// </summary>
        public partial class StatusPingApiResponse : OpenAPI.Client.ApiResponse, IStatusPingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<StatusPingApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="StatusPingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public StatusPingApiResponse(ILogger<StatusPingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out string result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITradeApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TradeApiEvents Events { get; }
        /// <summary>
        /// Searches for half-turn trades based on the provided request parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITradeSearchHalfTurnTradesApiResponse"/>&gt;</returns>
        Task<ITradeSearchHalfTurnTradesApiResponse> TradeSearchHalfTurnTradesAsync(SearchTradeRequest request, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// Searches for half-turn trades based on the provided request parameters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITradeSearchHalfTurnTradesApiResponse"/>&gt;</returns>
        Task<ITradeSearchHalfTurnTradesApiResponse> TradeSearchHalfTurnTradesOrDefaultAsync(SearchTradeRequest request, System.Threading.CancellationToken cancellationToken = default);
    }
    /// <summary>
    /// The <see cref="ITradeSearchHalfTurnTradesApiResponse"/>
    /// </summary>
    public interface ITradeSearchHalfTurnTradesApiResponse : OpenAPI.Client.IApiResponse, IOk<OpenAPI.Model.SearchHalfTradeResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TradeApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTradeSearchHalfTurnTrades;
        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTradeSearchHalfTurnTrades;
        internal void ExecuteOnTradeSearchHalfTurnTrades(TradeApi.TradeSearchHalfTurnTradesApiResponse apiResponse)
        {
            OnTradeSearchHalfTurnTrades?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }
        internal void ExecuteOnErrorTradeSearchHalfTurnTrades(Exception exception)
        {
            OnErrorTradeSearchHalfTurnTrades?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TradeApi : ITradeApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;
        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }
        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TradeApi> Logger { get; }
        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }
        /// <summary>
        /// The class containing the events
        /// </summary>
        public TradeApiEvents Events { get; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradeApi(ILogger<TradeApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TradeApiEvents tradeApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TradeApi>();
            HttpClient = httpClient;
            Events = tradeApiEvents;
        }
        partial void FormatTradeSearchHalfTurnTrades(SearchTradeRequest request);
        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidateTradeSearchHalfTurnTrades(SearchTradeRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterTradeSearchHalfTurnTradesDefaultImplementation(ITradeSearchHalfTurnTradesApiResponse apiResponseLocalVar, SearchTradeRequest request)
        {
            bool suppressDefaultLog = false;
            AfterTradeSearchHalfTurnTrades(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }
        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterTradeSearchHalfTurnTrades(ref bool suppressDefaultLog, ITradeSearchHalfTurnTradesApiResponse apiResponseLocalVar, SearchTradeRequest request);
        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorTradeSearchHalfTurnTradesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchTradeRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTradeSearchHalfTurnTrades(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }
        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorTradeSearchHalfTurnTrades(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchTradeRequest request);
        /// <summary>
        /// Searches for half-turn trades based on the provided request parameters. 
        /// </summary>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITradeSearchHalfTurnTradesApiResponse"/>&gt;</returns>
        public async Task<ITradeSearchHalfTurnTradesApiResponse> TradeSearchHalfTurnTradesOrDefaultAsync(SearchTradeRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TradeSearchHalfTurnTradesAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }
        /// <summary>
        /// Searches for half-turn trades based on the provided request parameters. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITradeSearchHalfTurnTradesApiResponse"/>&gt;</returns>
        public async Task<ITradeSearchHalfTurnTradesApiResponse> TradeSearchHalfTurnTradesAsync(SearchTradeRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();
            try
            {
                ValidateTradeSearchHalfTurnTrades(request);
                FormatTradeSearchHalfTurnTrades(request);
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Trade/search"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Trade/search");
                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;
                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };
                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);
                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);
                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };
                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);
                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");
                    DateTime requestedAtLocalVar = DateTime.UtcNow;
                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);
                        ILogger<TradeSearchHalfTurnTradesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TradeSearchHalfTurnTradesApiResponse>();
                        TradeSearchHalfTurnTradesApiResponse apiResponseLocalVar = new TradeSearchHalfTurnTradesApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Trade/search", requestedAtLocalVar, _jsonSerializerOptions);
                        AfterTradeSearchHalfTurnTradesDefaultImplementation(apiResponseLocalVar, request);
                        Events.ExecuteOnTradeSearchHalfTurnTrades(apiResponseLocalVar);
                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTradeSearchHalfTurnTradesDefaultImplementation(e, "/api/Trade/search", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorTradeSearchHalfTurnTrades(e);
                throw;
            }
        }
        /// <summary>
        /// The <see cref="TradeSearchHalfTurnTradesApiResponse"/>
        /// </summary>
        public partial class TradeSearchHalfTurnTradesApiResponse : OpenAPI.Client.ApiResponse, ITradeSearchHalfTurnTradesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TradeSearchHalfTurnTradesApiResponse> Logger { get; }
            /// <summary>
            /// The <see cref="TradeSearchHalfTurnTradesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TradeSearchHalfTurnTradesApiResponse(ILogger<TradeSearchHalfTurnTradesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }
            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;
            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenAPI.Model.SearchHalfTradeResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenAPI.Model.SearchHalfTradeResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }
            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out OpenAPI.Model.SearchHalfTradeResponse result)
            {
                result = null;
                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }
                return result != null;
            }
            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }
            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Client
{
    /// <summary>
    /// API Exception
    /// </summary>
    public class ApiException : Exception
    {
        /// <summary>
        /// The reason the api request failed
        /// </summary>
        public string ReasonPhrase { get; }
        /// <summary>
        /// The HttpStatusCode
        /// </summary>
        public System.Net.HttpStatusCode StatusCode { get; }
        /// <summary>
        /// The raw data returned by the api
        /// </summary>
        public string RawContent { get; }
        /// <summary>
        /// Construct the ApiException from parts of the response
        /// </summary>
        /// <param name="reasonPhrase"></param>
        /// <param name="statusCode"></param>
        /// <param name="rawContent"></param>
        public ApiException(string reasonPhrase, System.Net.HttpStatusCode statusCode, string rawContent) : base(reasonPhrase ?? rawContent)
        {
            ReasonPhrase = reasonPhrase;
            StatusCode = statusCode;
            RawContent = rawContent;
        }
    }
}

namespace OpenAPI.Client
{
    /// <summary>
    /// An IApiFactory interface
    /// </summary>
    public interface IApiFactory
    {
        /// <summary>
        /// A method to create an IApi of type IResult
        /// </summary>
        /// <typeparam name="IResult"></typeparam>
        /// <returns></returns>
        IResult Create<IResult>() where IResult : IApi;
    }
    /// <summary>
    /// An ApiFactory
    /// </summary>
    public class ApiFactory : IApiFactory
    {
        /// <summary>
        /// The service provider
        /// </summary>
        public IServiceProvider Services { get; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiFactory"/> class.
        /// </summary>
        /// <param name="services"></param>
        public ApiFactory(IServiceProvider services)
        {
            Services = services;
        }
        /// <summary>
        /// A method to create an IApi of type IResult
        /// </summary>
        /// <typeparam name="IResult"></typeparam>
        /// <returns></returns>
        public IResult Create<IResult>() where IResult : IApi
        {
            return Services.GetRequiredService<IResult>();
        }
    }
}

namespace OpenAPI.Client
{
    /// <summary>
    /// Useful for tracking server health
    /// </summary>
    public class ApiResponseEventArgs : EventArgs
    {
        /// <summary>
        /// The ApiResponse
        /// </summary>
        public ApiResponse ApiResponse { get; }
        /// <summary>
        /// The ApiResponseEventArgs
        /// </summary>
        /// <param name="apiResponse"></param>
        public ApiResponseEventArgs(ApiResponse apiResponse)
        {
            ApiResponse = apiResponse;
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Client
{
    /// <summary>
    /// Provides a non-generic contract for the ApiResponse wrapper.
    /// </summary>
    public partial interface IApiResponse
    {
        /// <summary>
        /// The IsSuccessStatusCode from the api response
        /// </summary>
        bool IsSuccessStatusCode { get; }
        /// <summary>
        /// Gets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        HttpStatusCode StatusCode { get; }
        /// <summary>
        /// The raw content of this response.
        /// </summary>
        string RawContent { get; }
        /// <summary>
        /// The DateTime when the request was retrieved.
        /// </summary>
        DateTime DownloadedAt { get; }
        /// <summary>
        /// The headers contained in the api response
        /// </summary>
        System.Net.Http.Headers.HttpResponseHeaders Headers { get; }
        /// <summary>
        /// The path used when making the request.
        /// </summary>
        string Path { get; }
        /// <summary>
        /// The reason phrase contained in the api response
        /// </summary>
        string ReasonPhrase { get; }
        /// <summary>
        /// The DateTime when the request was sent.
        /// </summary>
        DateTime RequestedAt { get; }
        /// <summary>
        /// The Uri used when making the request.
        /// </summary>
        Uri RequestUri { get; }
    }
    /// <summary>
    /// API Response
    /// </summary>
    public partial class ApiResponse : IApiResponse
    {
        /// <summary>
        /// Gets the status code (HTTP status code)
        /// </summary>
        /// <value>The status code.</value>
        public HttpStatusCode StatusCode { get; }
        /// <summary>
        /// The raw data
        /// </summary>
        public string RawContent { get; protected set; }
        /// <summary>
        /// The IsSuccessStatusCode from the api response
        /// </summary>
        public bool IsSuccessStatusCode { get; }
        /// <summary>
        /// The reason phrase contained in the api response
        /// </summary>
        public string ReasonPhrase { get; }
        /// <summary>
        /// The headers contained in the api response
        /// </summary>
        public System.Net.Http.Headers.HttpResponseHeaders Headers { get; }
        /// <summary>
        /// The DateTime when the request was retrieved.
        /// </summary>
        public DateTime DownloadedAt { get; } = DateTime.UtcNow;
        /// <summary>
        /// The DateTime when the request was sent.
        /// </summary>
        public DateTime RequestedAt { get; }
        /// <summary>
        /// The path used when making the request.
        /// </summary>
        public string Path { get; }
        /// <summary>
        /// The Uri used when making the request.
        /// </summary>
        public Uri RequestUri { get; }
        /// <summary>
        /// The <see cref="System.Text.Json.JsonSerializerOptions"/>
        /// </summary>
        protected System.Text.Json.JsonSerializerOptions _jsonSerializerOptions;
        /// <summary>
        /// Construct the response using an HttpResponseMessage
        /// </summary>
        /// <param name="httpRequestMessage"></param>
        /// <param name="httpResponseMessage"></param>
        /// <param name="rawContent"></param>
        /// <param name="path"></param>
        /// <param name="requestedAt"></param>
        /// <param name="jsonSerializerOptions"></param>
        public ApiResponse(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions)
        {
            StatusCode = httpResponseMessage.StatusCode;
            Headers = httpResponseMessage.Headers;
            IsSuccessStatusCode = httpResponseMessage.IsSuccessStatusCode;
            ReasonPhrase = httpResponseMessage.ReasonPhrase;
            RawContent = rawContent;
            Path = path;
            RequestUri = httpRequestMessage.RequestUri;
            RequestedAt = requestedAt;
            _jsonSerializerOptions = jsonSerializerOptions;
            OnCreated(httpRequestMessage, httpResponseMessage);
        }
        partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);
    }
    /// <summary>
    /// An interface for responses of type 
    /// </summary>
    /// <typeparam name="TType"></typeparam>
    public interface IOk<TType> : IApiResponse
    {
        /// <summary>
        /// Deserializes the response if the response is Ok
        /// </summary>
        /// <returns></returns>
        TType Ok();
        /// <summary>
        /// Returns true if the response is Ok and the deserialized response is not null
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>
        bool TryOk(out TType result);
    }
}

/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Client
{
    /// <summary>
    /// Utility functions providing some benefit to API client consumers.
    /// </summary>
    public static class ClientUtils
    {
        /// <summary>
        /// A delegate for events.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <returns></returns>
        public delegate void EventHandler<T>(object sender, T e) where T : EventArgs;
        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="json"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(string json, JsonSerializerOptions options, out T result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(json, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }
        /// <summary>
        /// Returns true when deserialization succeeds.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reader"></param>
        /// <param name="options"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryDeserialize<T>(ref Utf8JsonReader reader, JsonSerializerOptions options, out T result)
        {
            try
            {
                result = JsonSerializer.Deserialize<T>(ref reader, options);
                return result != null;
            }
            catch (Exception)
            {
                result = default;
                return false;
            }
        }
        /// <summary>
        /// If parameter is DateTime, output in a formatted string (default ISO 8601), customizable with Configuration.DateTime.
        /// If parameter is a list, join the list with ",".
        /// Otherwise just return the string.
        /// </summary>
        /// <param name="obj">The parameter (header, path, query, form).</param>
        /// <param name="format">The DateTime serialization format.</param>
        /// <returns>Formatted string.</returns>
        public static string ParameterToString(object obj, string format = ISO8601_DATETIME_FORMAT)
        {
            if (obj is DateTime dateTime)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTime.ToString(format);
            if (obj is DateTimeOffset dateTimeOffset)
                // Return a formatted date string - Can be customized with Configuration.DateTimeFormat
                // Defaults to an ISO 8601, using the known as a Round-trip date/time pattern ("o")
                // https://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx#Anchor_8
                // For example: 2009-06-15T13:45:30.0000000
                return dateTimeOffset.ToString(format);
            if (obj is bool boolean)
                return boolean
                    ? "true"
                    : "false";
            if (obj is AggregateBarUnit aggregateBarUnit)
                return AggregateBarUnitValueConverter.ToJsonValue(aggregateBarUnit).ToString();
            if (obj is CancelOrderErrorCode cancelOrderErrorCode)
                return CancelOrderErrorCodeValueConverter.ToJsonValue(cancelOrderErrorCode).ToString();
            if (obj is ClosePositionErrorCode closePositionErrorCode)
                return ClosePositionErrorCodeValueConverter.ToJsonValue(closePositionErrorCode).ToString();
            if (obj is ListAvailableContractErrorCode listAvailableContractErrorCode)
                return ListAvailableContractErrorCodeValueConverter.ToJsonValue(listAvailableContractErrorCode).ToString();
            if (obj is LoginErrorCode loginErrorCode)
                return LoginErrorCodeValueConverter.ToJsonValue(loginErrorCode).ToString();
            if (obj is LogoutErrorCode logoutErrorCode)
                return LogoutErrorCodeValueConverter.ToJsonValue(logoutErrorCode).ToString();
            if (obj is ModifyOrderErrorCode modifyOrderErrorCode)
                return ModifyOrderErrorCodeValueConverter.ToJsonValue(modifyOrderErrorCode).ToString();
            if (obj is OrderSide orderSide)
                return OrderSideValueConverter.ToJsonValue(orderSide).ToString();
            if (obj is OrderStatus orderStatus)
                return OrderStatusValueConverter.ToJsonValue(orderStatus).ToString();
            if (obj is OrderType orderType)
                return OrderTypeValueConverter.ToJsonValue(orderType).ToString();
            if (obj is PartialClosePositionErrorCode partialClosePositionErrorCode)
                return PartialClosePositionErrorCodeValueConverter.ToJsonValue(partialClosePositionErrorCode).ToString();
            if (obj is PlaceOrderErrorCode placeOrderErrorCode)
                return PlaceOrderErrorCodeValueConverter.ToJsonValue(placeOrderErrorCode).ToString();
            if (obj is PositionType positionType)
                return PositionTypeValueConverter.ToJsonValue(positionType).ToString();
            if (obj is RetrieveBarErrorCode retrieveBarErrorCode)
                return RetrieveBarErrorCodeValueConverter.ToJsonValue(retrieveBarErrorCode).ToString();
            if (obj is SearchAccountErrorCode searchAccountErrorCode)
                return SearchAccountErrorCodeValueConverter.ToJsonValue(searchAccountErrorCode).ToString();
            if (obj is SearchContractByIdErrorCode searchContractByIdErrorCode)
                return SearchContractByIdErrorCodeValueConverter.ToJsonValue(searchContractByIdErrorCode).ToString();
            if (obj is SearchContractErrorCode searchContractErrorCode)
                return SearchContractErrorCodeValueConverter.ToJsonValue(searchContractErrorCode).ToString();
            if (obj is SearchOrderErrorCode searchOrderErrorCode)
                return SearchOrderErrorCodeValueConverter.ToJsonValue(searchOrderErrorCode).ToString();
            if (obj is SearchPositionErrorCode searchPositionErrorCode)
                return SearchPositionErrorCodeValueConverter.ToJsonValue(searchPositionErrorCode).ToString();
            if (obj is SearchTradeErrorCode searchTradeErrorCode)
                return SearchTradeErrorCodeValueConverter.ToJsonValue(searchTradeErrorCode).ToString();
            if (obj is ValidateErrorCode validateErrorCode)
                return ValidateErrorCodeValueConverter.ToJsonValue(validateErrorCode).ToString();
            if (obj is ICollection collection)
            {
                List<string> entries = new List<string>();
                foreach (var entry in collection)
                    entries.Add(ParameterToString(entry));
                return string.Join(",", entries);
            }
            return Convert.ToString(obj, System.Globalization.CultureInfo.InvariantCulture);
        }
        /// <summary>
        /// URL encode a string
        /// Credit/Ref: https://github.com/restsharp/RestSharp/blob/master/RestSharp/Extensions/StringExtensions.cs#L50
        /// </summary>
        /// <param name="input">string to be URL encoded</param>
        /// <returns>Byte array</returns>
        public static string UrlEncode(string input)
        {
            const int maxLength = 32766;
            if (input == null)
            {
                throw new ArgumentNullException("input");
            }
            if (input.Length <= maxLength)
            {
                return Uri.EscapeDataString(input);
            }
            StringBuilder sb = new StringBuilder(input.Length * 2);
            int index = 0;
            while (index < input.Length)
            {
                int length = Math.Min(input.Length - index, maxLength);
                string subString = input.Substring(index, length);
                sb.Append(Uri.EscapeDataString(subString));
                index += subString.Length;
            }
            return sb.ToString();
        }
        /// <summary>
        /// Encode string in base64 format.
        /// </summary>
        /// <param name="text">string to be encoded.</param>
        /// <returns>Encoded string.</returns>
        public static string Base64Encode(string text)
        {
            return Convert.ToBase64String(global::System.Text.Encoding.UTF8.GetBytes(text));
        }
        /// <summary>
        /// Convert stream to byte array
        /// </summary>
        /// <param name="inputStream">Input stream to be converted</param>
        /// <returns>Byte array</returns>
        public static byte[] ReadAsBytes(Stream inputStream)
        {
            using (var ms = new MemoryStream())
            {
                inputStream.CopyTo(ms);
                return ms.ToArray();
            }
        }
        /// <summary>
        /// Select the Content-Type header's value from the given content-type array:
        /// if JSON type exists in the given array, use it;
        /// otherwise use the first one defined in 'consumes'
        /// </summary>
        /// <param name="contentTypes">The Content-Type array to select from.</param>
        /// <returns>The Content-Type header to use.</returns>
        public static string SelectHeaderContentType(string[] contentTypes)
        {
            if (contentTypes.Length == 0)
                return null;
            foreach (var contentType in contentTypes)
            {
                if (IsJsonMime(contentType))
                    return contentType;
            }
            return contentTypes[0]; // use the first content type specified in 'consumes'
        }
        /// <summary>
        /// Select the Accept header's value from the given accepts array:
        /// if JSON exists in the given array, use it;
        /// otherwise use all of them (joining into a string)
        /// </summary>
        /// <param name="accepts">The accepts array to select from.</param>
        /// <returns>The Accept header to use.</returns>
        public static string SelectHeaderAccept(string[] accepts)
        {
            if (accepts.Length == 0)
                return null;
            if (accepts.Contains("application/json", StringComparer.OrdinalIgnoreCase))
                return "application/json";
            return string.Join(",", accepts);
        }
        /// <summary>
        /// Provides a case-insensitive check that a provided content type is a known JSON-like content type.
        /// </summary>
        private static readonly Regex JsonRegex = new Regex("(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$");
        /// <summary>
        /// Check if the given MIME is a JSON MIME.
        /// JSON MIME examples:
        ///    application/json
        ///    application/json; charset=UTF8
        ///    APPLICATION/JSON
        ///    application/vnd.company+json
        /// </summary>
        /// <param name="mime">MIME</param>
        /// <returns>Returns True if MIME type is json.</returns>
        public static bool IsJsonMime(string mime)
        {
            if (string.IsNullOrWhiteSpace(mime)) return false;
            return JsonRegex.IsMatch(mime) || mime.Equals("application/json-patch+json");
        }
        /// <summary>
        /// Get the discriminator
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="discriminator"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public static string GetDiscriminator(Utf8JsonReader utf8JsonReader, string discriminator)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    if (localVarJsonPropertyName != null && localVarJsonPropertyName.Equals(discriminator))
                        return utf8JsonReader.GetString();
                }
            }
            throw new JsonException("The specified discriminator was not found.");
        }
        /// <summary>
        /// The base path of the API
        /// </summary>
        public const string BASE_ADDRESS = "https://api.topstepx.com";
        /// <summary>
        /// The scheme of the API
        /// </summary>
        public const string SCHEME = "https";
        /// <summary>
        /// The context path of the API
        /// </summary>
        public const string CONTEXT_PATH = "";
        /// <summary>
        /// The host of the API
        /// </summary>
        public const string HOST = "api.topstepx.com";
        /// <summary>
        /// The format to use for DateTime serialization
        /// </summary>
        public const string ISO8601_DATETIME_FORMAT = "o";
    }
}

// <auto-generated>
namespace OpenAPI.Client
{
    /// <summary>
    /// A class containing a CookieContainer
    /// </summary>
    public sealed class TokenCookieContainer
    {
        /// <summary>
        /// The collection of tokens
        /// </summary>
        public System.Net.CookieContainer Value { get; } = new System.Net.CookieContainer();
    }
}

/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Client
{
    /// <summary>
    /// Formatter for 'date' and 'date-time' openapi formats ss defined by full-date - RFC3339
    /// see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
    /// </summary>
    public class DateTimeJsonConverter : JsonConverter<DateTime>
    {
        /// <summary>
        /// The formats used to deserialize the date
        /// </summary>
        public static string[] Formats { get; } = {
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'ffffffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'ffffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'ffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ssK",
            "yyyy'-'MM'-'dd",
            "yyyyMMddTHHmmss.fffffffK",
            "yyyyMMddTHHmmss.ffffffK",
            "yyyyMMddTHHmmss.fffffK",
            "yyyyMMddTHHmmss.ffffK",
            "yyyyMMddTHHmmss.fffK",
            "yyyyMMddTHHmmss.ffK",
            "yyyyMMddTHHmmss.fK",
            "yyyyMMddTHHmmssK",
            "yyyyMMdd"
        };
        /// <summary>
        /// Returns a DateTime from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DateTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
            if (reader.TokenType == JsonTokenType.Null)
                throw new NotSupportedException();
            string value = reader.GetString();
            foreach(string format in Formats)
                if (DateTime.TryParseExact(value, format, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal | DateTimeStyles.AssumeUniversal, out DateTime result))
                    return result;
            throw new NotSupportedException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dateTimeValue"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DateTime dateTimeValue, JsonSerializerOptions options) =>
            writer.WriteStringValue(dateTimeValue.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK", CultureInfo.InvariantCulture));
    }
}

/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Client
{
    /// <summary>
    /// Formatter for 'date' and 'date-time' openapi formats ss defined by full-date - RFC3339
    /// see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#data-types
    /// </summary>
    public class DateTimeNullableJsonConverter : JsonConverter<DateTime?>
    {
        /// <summary>
        /// The formats used to deserialize the date
        /// </summary>
        public static string[] Formats { get; } = {
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'ffffffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'ffffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'ffK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fK",
            "yyyy'-'MM'-'dd'T'HH':'mm':'ssK",
            "yyyy'-'MM'-'dd",
            "yyyyMMddTHHmmss.fffffffK",
            "yyyyMMddTHHmmss.ffffffK",
            "yyyyMMddTHHmmss.fffffK",
            "yyyyMMddTHHmmss.ffffK",
            "yyyyMMddTHHmmss.fffK",
            "yyyyMMddTHHmmss.ffK",
            "yyyyMMddTHHmmss.fK",
            "yyyyMMddTHHmmssK",
            "yyyyMMdd"
         };
        /// <summary>
        /// Returns a DateTime from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DateTime? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) {
            if (reader.TokenType == JsonTokenType.Null)
                return null;
            string value = reader.GetString();
            foreach(string format in Formats)
                if (DateTime.TryParseExact(value, format, CultureInfo.InvariantCulture, DateTimeStyles.AdjustToUniversal | DateTimeStyles.AssumeUniversal, out DateTime result))
                    return result;
            return null;
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dateTimeValue"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DateTime? dateTimeValue, JsonSerializerOptions options)
        {
            if (dateTimeValue == null)
                writer.WriteNullValue();
            else
                writer.WriteStringValue(dateTimeValue.Value.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK", CultureInfo.InvariantCulture));
        }
    }
}

namespace OpenAPI.Client
{
    /// <summary>
    /// Useful for tracking server health
    /// </summary>
    public class ExceptionEventArgs : EventArgs
    {
        /// <summary>
        /// The ApiResponse
        /// </summary>
        public Exception Exception { get; }
        /// <summary>
        /// The ExceptionEventArgs
        /// </summary>
        /// <param name="exception"></param>
        public ExceptionEventArgs(Exception exception)
        {
            Exception = exception;
        }
    }
}

/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Client
{
    /// <summary>
    /// Provides hosting configuration for OpenAPI
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();
        internal bool HttpClientsAdded { get; private set; }
        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new AggregateBarModelJsonConverter());
            _jsonOptions.Converters.Add(new AggregateBarUnitJsonConverter());
            _jsonOptions.Converters.Add(new AggregateBarUnitNullableJsonConverter());
            _jsonOptions.Converters.Add(new CancelOrderErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new CancelOrderErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new CancelOrderRequestJsonConverter());
            _jsonOptions.Converters.Add(new CancelOrderResponseJsonConverter());
            _jsonOptions.Converters.Add(new CloseContractPositionRequestJsonConverter());
            _jsonOptions.Converters.Add(new ClosePositionErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new ClosePositionErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new ClosePositionResponseJsonConverter());
            _jsonOptions.Converters.Add(new ContractModelJsonConverter());
            _jsonOptions.Converters.Add(new HalfTradeModelJsonConverter());
            _jsonOptions.Converters.Add(new ListAvailableContractErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new ListAvailableContractErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new ListAvailableContractRequestJsonConverter());
            _jsonOptions.Converters.Add(new ListAvailableContractResponseJsonConverter());
            _jsonOptions.Converters.Add(new LoginApiKeyRequestJsonConverter());
            _jsonOptions.Converters.Add(new LoginAppRequestJsonConverter());
            _jsonOptions.Converters.Add(new LoginErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new LoginErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new LoginResponseJsonConverter());
            _jsonOptions.Converters.Add(new LogoutErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new LogoutErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new LogoutResponseJsonConverter());
            _jsonOptions.Converters.Add(new ModifyOrderErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new ModifyOrderErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new ModifyOrderRequestJsonConverter());
            _jsonOptions.Converters.Add(new ModifyOrderResponseJsonConverter());
            _jsonOptions.Converters.Add(new OrderModelJsonConverter());
            _jsonOptions.Converters.Add(new OrderSideJsonConverter());
            _jsonOptions.Converters.Add(new OrderSideNullableJsonConverter());
            _jsonOptions.Converters.Add(new OrderStatusJsonConverter());
            _jsonOptions.Converters.Add(new OrderStatusNullableJsonConverter());
            _jsonOptions.Converters.Add(new OrderTypeJsonConverter());
            _jsonOptions.Converters.Add(new OrderTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new PartialCloseContractPositionRequestJsonConverter());
            _jsonOptions.Converters.Add(new PartialClosePositionErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new PartialClosePositionErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new PartialClosePositionResponseJsonConverter());
            _jsonOptions.Converters.Add(new PlaceOrderErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new PlaceOrderErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new PlaceOrderRequestJsonConverter());
            _jsonOptions.Converters.Add(new PlaceOrderResponseJsonConverter());
            _jsonOptions.Converters.Add(new PositionModelJsonConverter());
            _jsonOptions.Converters.Add(new PositionTypeJsonConverter());
            _jsonOptions.Converters.Add(new PositionTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new RetrieveBarErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new RetrieveBarErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new RetrieveBarRequestJsonConverter());
            _jsonOptions.Converters.Add(new RetrieveBarResponseJsonConverter());
            _jsonOptions.Converters.Add(new SearchAccountErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new SearchAccountErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new SearchAccountRequestJsonConverter());
            _jsonOptions.Converters.Add(new SearchAccountResponseJsonConverter());
            _jsonOptions.Converters.Add(new SearchContractByIdErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new SearchContractByIdErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new SearchContractByIdRequestJsonConverter());
            _jsonOptions.Converters.Add(new SearchContractByIdResponseJsonConverter());
            _jsonOptions.Converters.Add(new SearchContractErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new SearchContractErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new SearchContractRequestJsonConverter());
            _jsonOptions.Converters.Add(new SearchContractResponseJsonConverter());
            _jsonOptions.Converters.Add(new SearchHalfTradeResponseJsonConverter());
            _jsonOptions.Converters.Add(new SearchOpenOrderRequestJsonConverter());
            _jsonOptions.Converters.Add(new SearchOrderErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new SearchOrderErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new SearchOrderRequestJsonConverter());
            _jsonOptions.Converters.Add(new SearchOrderResponseJsonConverter());
            _jsonOptions.Converters.Add(new SearchPositionErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new SearchPositionErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new SearchPositionRequestJsonConverter());
            _jsonOptions.Converters.Add(new SearchPositionResponseJsonConverter());
            _jsonOptions.Converters.Add(new SearchTradeErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new SearchTradeErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new SearchTradeRequestJsonConverter());
            _jsonOptions.Converters.Add(new TradingAccountModelJsonConverter());
            _jsonOptions.Converters.Add(new ValidateErrorCodeJsonConverter());
            _jsonOptions.Converters.Add(new ValidateErrorCodeNullableJsonConverter());
            _jsonOptions.Converters.Add(new ValidateResponseJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<AccountApiEvents>();
            _services.AddSingleton<AuthApiEvents>();
            _services.AddSingleton<ContractApiEvents>();
            _services.AddSingleton<HistoryApiEvents>();
            _services.AddSingleton<OrderApiEvents>();
            _services.AddSingleton<PositionApiEvents>();
            _services.AddSingleton<StatusApiEvents>();
            _services.AddSingleton<TradeApiEvents>();
        }
        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient> client = null, Action<IHttpClientBuilder> builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);
            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();
            builders.Add(_services.AddHttpClient<IAccountApi, AccountApi>(client));
            builders.Add(_services.AddHttpClient<IAuthApi, AuthApi>(client));
            builders.Add(_services.AddHttpClient<IContractApi, ContractApi>(client));
            builders.Add(_services.AddHttpClient<IHistoryApi, HistoryApi>(client));
            builders.Add(_services.AddHttpClient<IOrderApi, OrderApi>(client));
            builders.Add(_services.AddHttpClient<IPositionApi, PositionApi>(client));
            builders.Add(_services.AddHttpClient<IStatusApi, StatusApi>(client));
            builders.Add(_services.AddHttpClient<ITradeApi, TradeApi>(client));
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);
            HttpClientsAdded = true;
            return this;
        }
        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);
            return this;
        }
        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }
        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);
            return this;
        }
        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());
            return this;
        }
    }
}

// <auto-generated>
namespace OpenAPI.Client
{
    /// <summary>
    /// Provides the JsonSerializerOptions
    /// </summary>
    public class JsonSerializerOptionsProvider
    {
        /// <summary>
        /// the JsonSerializerOptions
        /// </summary>
        public JsonSerializerOptions Options { get; }
        /// <summary>
        /// Instantiates a JsonSerializerOptionsProvider
        /// </summary>
        public JsonSerializerOptionsProvider(JsonSerializerOptions options)
        {
            Options = options;
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Client
{
    /// <summary>
    /// A wrapper for operation parameters which are not required
    /// </summary>
    public struct Option<TType>
    {
        /// <summary>
        /// The value to send to the server
        /// </summary>
        public TType Value { get; }
        /// <summary>
        /// When true the value will be sent to the server
        /// </summary>
        internal bool IsSet { get; }
        /// <summary>
        /// A wrapper for operation parameters which are not required
        /// </summary>
        /// <param name="value"></param>
        public Option(TType value)
        {
            IsSet = true;
            Value = value;
        }
        /// <summary>
        /// Implicitly converts this option to the contained type
        /// </summary>
        /// <param name="option"></param>
        public static implicit operator TType(Option<TType> option) => option.Value;
        /// <summary>
        /// Implicitly converts the provided value to an Option
        /// </summary>
        /// <param name="value"></param>
        public static implicit operator Option<TType>(TType value) => new Option<TType>(value);
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Client
{
    /// <summary>
    /// Provides a token to the api clients. Tokens will be rate limited based on the provided TimeSpan.
    /// </summary>
    /// <typeparam name="TTokenBase"></typeparam>
    public class RateLimitProvider<TTokenBase> : TokenProvider<TTokenBase> where TTokenBase : TokenBase
    {
        internal Dictionary<string, global::System.Threading.Channels.Channel<TTokenBase>> AvailableTokens { get; } = new Dictionary<string, global::System.Threading.Channels.Channel<TTokenBase>>();
        /// <summary>
        /// Instantiates a ThrottledTokenProvider. Your tokens will be rate limited based on the token's timeout.
        /// </summary>
        /// <param name="container"></param>
        public RateLimitProvider(TokenContainer<TTokenBase> container) : base(container.Tokens)
        {
            foreach(TTokenBase token in _tokens)
                token.StartTimer(token.Timeout ?? TimeSpan.FromMilliseconds(40));
            global::System.Threading.Channels.BoundedChannelOptions options = new global::System.Threading.Channels.BoundedChannelOptions(_tokens.Length)
            {
                FullMode = global::System.Threading.Channels.BoundedChannelFullMode.DropWrite
            };
            AvailableTokens.Add(string.Empty, global::System.Threading.Channels.Channel.CreateBounded<TTokenBase>(options));
            foreach (var availableToken in AvailableTokens)
                foreach(TTokenBase token in _tokens)
                {
                    token.TokenBecameAvailable += ((sender) => availableToken.Value.Writer.TryWrite((TTokenBase)sender));
                }
        }
        internal override async System.Threading.Tasks.ValueTask<TTokenBase> GetAsync(string header = "", System.Threading.CancellationToken cancellation = default)
        {
            if (!AvailableTokens.TryGetValue(header, out global::System.Threading.Channels.Channel<TTokenBase> tokens))
                throw new KeyNotFoundException($"Could not locate a token for header '{header}'.");
            return await tokens.Reader.ReadAsync(cancellation).ConfigureAwait(false);
        }
    }
}

// <auto-generated>
namespace OpenAPI.Client
{
    /// <summary>
    /// The base for all tokens.
    /// </summary>
    public abstract class TokenBase
    {
        private DateTime _nextAvailable = DateTime.UtcNow;
        private object _nextAvailableLock = new object();
        private readonly System.Timers.Timer _timer = new System.Timers.Timer();
        internal TimeSpan? Timeout { get; set; }
        internal delegate void TokenBecameAvailableEventHandler(object sender);
        internal event TokenBecameAvailableEventHandler TokenBecameAvailable;
        /// <summary>
        /// Initialize a TokenBase object.
        /// </summary>
        /// <param name="timeout"></param>
        internal TokenBase(TimeSpan? timeout = null)
        {
            Timeout = timeout;
            if (Timeout != null)
                StartTimer(Timeout.Value);
        }
        /// <summary>
        /// Starts the token's timer
        /// </summary>
        /// <param name="timeout"></param>
        internal void StartTimer(TimeSpan timeout)
        {
            Timeout = timeout;
            _timer.Interval = Timeout.Value.TotalMilliseconds;
            _timer.Elapsed += OnTimer;
            _timer.AutoReset = true;
            _timer.Start();
        }
        /// <summary>
        /// Returns true while the token is rate limited.
        /// </summary>
        public bool IsRateLimited => _nextAvailable > DateTime.UtcNow;
        /// <summary>
        /// Triggered when the server returns status code TooManyRequests
        /// Once triggered the local timeout will be extended an arbitrary length of time.
        /// </summary>
        public void BeginRateLimit()
        {
            lock(_nextAvailableLock)
                _nextAvailable = DateTime.UtcNow.AddSeconds(5);
        }
        private void OnTimer(object sender, System.Timers.ElapsedEventArgs e)
        {
            if (TokenBecameAvailable != null && !IsRateLimited)
                TokenBecameAvailable.Invoke(this);
        }
    }
}

// <auto-generated>
namespace OpenAPI.Client
{
    /// <summary>
    /// A container for a collection of tokens.
    /// </summary>
    /// <typeparam name="TTokenBase"></typeparam>
    public sealed class TokenContainer<TTokenBase> where TTokenBase : TokenBase
    {
        /// <summary>
        /// The collection of tokens
        /// </summary>
        public List<TTokenBase> Tokens { get; } = new List<TTokenBase>();
        /// <summary>
        /// Instantiates a TokenContainer
        /// </summary>
        public TokenContainer()
        {
        }
        /// <summary>
        /// Instantiates a TokenContainer
        /// </summary>
        /// <param name="tokens"></param>
        public TokenContainer(global::System.Collections.Generic.IEnumerable<TTokenBase> tokens)
        {
            Tokens = tokens.ToList();
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI
{
    /// <summary>
    /// A class which will provide tokens.
    /// </summary>
    public abstract class TokenProvider<TTokenBase> where TTokenBase : TokenBase
    {
        /// <summary>
        /// The array of tokens.
        /// </summary>
        protected TTokenBase[] _tokens;
        internal abstract System.Threading.Tasks.ValueTask<TTokenBase> GetAsync(string header = "", System.Threading.CancellationToken cancellation = default);
        /// <summary>
        /// Instantiates a TokenProvider.
        /// </summary>
        /// <param name="tokens"></param>
        public TokenProvider(IEnumerable<TTokenBase> tokens)
        {
            _tokens = tokens.ToArray();
            if (_tokens.Length == 0)
                throw new ArgumentException("You did not provide any tokens.");
        }
    }
}

/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Extensions
{
    /// <summary>
    /// Extension methods for IHostBuilder
    /// </summary>
    public static class IHostBuilderExtensions
    {
        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="builder"></param>
        public static IHostBuilder ConfigureApi(this IHostBuilder builder)
        {
            builder.ConfigureServices((context, services) => 
            {
                HostConfiguration config = new HostConfiguration(services);
                IServiceCollectionExtensions.AddApi(services, config);
            });
            return builder;
        }
        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="builder"></param>
        /// <param name="options"></param>
        public static IHostBuilder ConfigureApi(this IHostBuilder builder, Action<HostBuilderContext, IServiceCollection, HostConfiguration> options)
        {
            builder.ConfigureServices((context, services) => 
            {
                HostConfiguration config = new HostConfiguration(services);
                options(context, services, config);
                IServiceCollectionExtensions.AddApi(services, config);
            });
            return builder;
        }
    }
}

/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Extensions
{
    /// <summary>
    /// Extension methods for IHttpClientBuilder
    /// </summary>
    public static class IHttpClientBuilderExtensions
    {
        /// <summary>
        /// Adds a Polly retry policy to your clients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="retries"></param>
        /// <returns></returns>
        public static IHttpClientBuilder AddRetryPolicy(this IHttpClientBuilder client, int retries)
        {
            client.AddPolicyHandler(RetryPolicy(retries));
            return client;
        }
        /// <summary>
        /// Adds a Polly timeout policy to your clients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="timeout"></param>
        /// <returns></returns>
        public static IHttpClientBuilder AddTimeoutPolicy(this IHttpClientBuilder client, TimeSpan timeout)
        {
            client.AddPolicyHandler(TimeoutPolicy(timeout));
            return client;
        }
        /// <summary>
        /// Adds a Polly circuit breaker to your clients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="handledEventsAllowedBeforeBreaking"></param>
        /// <param name="durationOfBreak"></param>
        /// <returns></returns>
        public static IHttpClientBuilder AddCircuitBreakerPolicy(this IHttpClientBuilder client, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak)
        {
            client.AddTransientHttpErrorPolicy(builder => CircuitBreakerPolicy(builder, handledEventsAllowedBeforeBreaking, durationOfBreak));
            return client;
        }
        private static Polly.Retry.AsyncRetryPolicy<HttpResponseMessage> RetryPolicy(int retries)
            => HttpPolicyExtensions
                .HandleTransientHttpError()
                .Or<TimeoutRejectedException>()
                .RetryAsync(retries);
        private static AsyncTimeoutPolicy<HttpResponseMessage> TimeoutPolicy(TimeSpan timeout)
            => Policy.TimeoutAsync<HttpResponseMessage>(timeout);
        private static Polly.CircuitBreaker.AsyncCircuitBreakerPolicy<HttpResponseMessage> CircuitBreakerPolicy(
            PolicyBuilder<HttpResponseMessage> builder, int handledEventsAllowedBeforeBreaking, TimeSpan durationOfBreak)
                => builder.CircuitBreakerAsync(handledEventsAllowedBeforeBreaking, durationOfBreak);
    }
}

/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Extensions
{
    /// <summary>
    /// Extension methods for IServiceCollection
    /// </summary>
    public static class IServiceCollectionExtensions
    {
        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        public static void AddApi(this IServiceCollection services)
        {
            HostConfiguration config = new HostConfiguration(services);
            AddApi(services, config);
        }
        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        /// <param name="options"></param>
        public static void AddApi(this IServiceCollection services, Action<HostConfiguration> options)
        {
            HostConfiguration config = new HostConfiguration(services);
            options(config);
            AddApi(services, config);
        }
        internal static void AddApi(IServiceCollection services, HostConfiguration host)
        {
            if (!host.HttpClientsAdded)
                host.AddApiHttpClients();
            services.AddSingleton<TokenCookieContainer>();
            // ensure that a token provider was provided for this token type
            // if not, default to RateLimitProvider
            var containerServices = services.Where(s => s.ServiceType.IsGenericType &&
                s.ServiceType.GetGenericTypeDefinition().IsAssignableFrom(typeof(TokenContainer<>))).ToArray();
            foreach(var containerService in containerServices)
            {
                var tokenType = containerService.ServiceType.GenericTypeArguments[0];
                var provider = services.FirstOrDefault(s => s.ServiceType.IsAssignableFrom(typeof(TokenProvider<>).MakeGenericType(tokenType)));
                if (provider == null)
                {
                    services.AddSingleton(typeof(RateLimitProvider<>).MakeGenericType(tokenType));
                    services.AddSingleton(typeof(TokenProvider<>).MakeGenericType(tokenType), 
                        s => s.GetRequiredService(typeof(RateLimitProvider<>).MakeGenericType(tokenType)));
                }
            }
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// AggregateBarModel
    /// </summary>
    public partial class AggregateBarModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregateBarModel" /> class.
        /// </summary>
        /// <param name="t">t</param>
        /// <param name="o">o</param>
        /// <param name="h">h</param>
        /// <param name="l">l</param>
        /// <param name="c">c</param>
        /// <param name="v">v</param>
        [JsonConstructor]
        public AggregateBarModel(DateTime t, decimal o, decimal h, decimal l, decimal c, long v)
        {
            T = t;
            O = o;
            H = h;
            L = l;
            C = c;
            V = v;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets T
        /// </summary>
        [JsonPropertyName("t")]
        public DateTime T { get; set; }
        /// <summary>
        /// Gets or Sets O
        /// </summary>
        [JsonPropertyName("o")]
        public decimal O { get; set; }
        /// <summary>
        /// Gets or Sets H
        /// </summary>
        [JsonPropertyName("h")]
        public decimal H { get; set; }
        /// <summary>
        /// Gets or Sets L
        /// </summary>
        [JsonPropertyName("l")]
        public decimal L { get; set; }
        /// <summary>
        /// Gets or Sets C
        /// </summary>
        [JsonPropertyName("c")]
        public decimal C { get; set; }
        /// <summary>
        /// Gets or Sets V
        /// </summary>
        [JsonPropertyName("v")]
        public long V { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregateBarModel {\n");
            sb.Append("  T: ").Append(T).Append("\n");
            sb.Append("  O: ").Append(O).Append("\n");
            sb.Append("  H: ").Append(H).Append("\n");
            sb.Append("  L: ").Append(L).Append("\n");
            sb.Append("  C: ").Append(C).Append("\n");
            sb.Append("  V: ").Append(V).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="AggregateBarModel" />
    /// </summary>
    public class AggregateBarModelJsonConverter : JsonConverter<AggregateBarModel>
    {
        /// <summary>
        /// The format to use to serialize T
        /// </summary>
        public static string TFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// Deserializes json to <see cref="AggregateBarModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AggregateBarModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<DateTime?> t = default;
            Option<decimal?> o = default;
            Option<decimal?> h = default;
            Option<decimal?> l = default;
            Option<decimal?> c = default;
            Option<long?> v = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "t":
                            t = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "o":
                            o = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "h":
                            h = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "l":
                            l = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "c":
                            c = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "v":
                            v = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!t.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(t));
            if (!o.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(o));
            if (!h.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(h));
            if (!l.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(l));
            if (!c.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(c));
            if (!v.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(v));
            if (t.IsSet && t.Value == null)
                throw new ArgumentNullException(nameof(t), "Property is not nullable for class AggregateBarModel.");
            if (o.IsSet && o.Value == null)
                throw new ArgumentNullException(nameof(o), "Property is not nullable for class AggregateBarModel.");
            if (h.IsSet && h.Value == null)
                throw new ArgumentNullException(nameof(h), "Property is not nullable for class AggregateBarModel.");
            if (l.IsSet && l.Value == null)
                throw new ArgumentNullException(nameof(l), "Property is not nullable for class AggregateBarModel.");
            if (c.IsSet && c.Value == null)
                throw new ArgumentNullException(nameof(c), "Property is not nullable for class AggregateBarModel.");
            if (v.IsSet && v.Value == null)
                throw new ArgumentNullException(nameof(v), "Property is not nullable for class AggregateBarModel.");
            return new AggregateBarModel(t.Value.Value, o.Value.Value, h.Value.Value, l.Value.Value, c.Value.Value, v.Value.Value);
        }
        /// <summary>
        /// Serializes a <see cref="AggregateBarModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aggregateBarModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AggregateBarModel aggregateBarModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, aggregateBarModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="AggregateBarModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aggregateBarModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AggregateBarModel aggregateBarModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("t", aggregateBarModel.T.ToString(TFormat));
            writer.WriteNumber("o", aggregateBarModel.O);
            writer.WriteNumber("h", aggregateBarModel.H);
            writer.WriteNumber("l", aggregateBarModel.L);
            writer.WriteNumber("c", aggregateBarModel.C);
            writer.WriteNumber("v", aggregateBarModel.V);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Unspecified 1 &#x3D; Second 2 &#x3D; Minute 3 &#x3D; Hour 4 &#x3D; Day 5 &#x3D; Week 6 &#x3D; Month
    /// </summary>
    /// <value>0 &#x3D; Unspecified 1 &#x3D; Second 2 &#x3D; Minute 3 &#x3D; Hour 4 &#x3D; Day 5 &#x3D; Week 6 &#x3D; Month</value>
    public enum AggregateBarUnit
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4,
        /// <summary>
        /// Enum NUMBER_5 for value: 5
        /// </summary>
        NUMBER_5 = 5,
        /// <summary>
        /// Enum NUMBER_6 for value: 6
        /// </summary>
        NUMBER_6 = 6
    }
    /// <summary>
    /// Converts <see cref="AggregateBarUnit"/> to and from the JSON value
    /// </summary>
    public static class AggregateBarUnitValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AggregateBarUnit"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AggregateBarUnit FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return AggregateBarUnit.NUMBER_0;
            if (value.Equals((1).ToString()))
                return AggregateBarUnit.NUMBER_1;
            if (value.Equals((2).ToString()))
                return AggregateBarUnit.NUMBER_2;
            if (value.Equals((3).ToString()))
                return AggregateBarUnit.NUMBER_3;
            if (value.Equals((4).ToString()))
                return AggregateBarUnit.NUMBER_4;
            if (value.Equals((5).ToString()))
                return AggregateBarUnit.NUMBER_5;
            if (value.Equals((6).ToString()))
                return AggregateBarUnit.NUMBER_6;
            throw new NotImplementedException($"Could not convert value to type AggregateBarUnit: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="AggregateBarUnit"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AggregateBarUnit? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return AggregateBarUnit.NUMBER_0;
            if (value.Equals((1).ToString()))
                return AggregateBarUnit.NUMBER_1;
            if (value.Equals((2).ToString()))
                return AggregateBarUnit.NUMBER_2;
            if (value.Equals((3).ToString()))
                return AggregateBarUnit.NUMBER_3;
            if (value.Equals((4).ToString()))
                return AggregateBarUnit.NUMBER_4;
            if (value.Equals((5).ToString()))
                return AggregateBarUnit.NUMBER_5;
            if (value.Equals((6).ToString()))
                return AggregateBarUnit.NUMBER_6;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="AggregateBarUnit"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(AggregateBarUnit value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="AggregateBarUnit"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AggregateBarUnitJsonConverter : JsonConverter<AggregateBarUnit>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AggregateBarUnit Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            AggregateBarUnit? result = rawValue == null
                ? null
                : AggregateBarUnitValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the AggregateBarUnit to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aggregateBarUnit"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AggregateBarUnit aggregateBarUnit, JsonSerializerOptions options)
        {
            writer.WriteStringValue(aggregateBarUnit.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="AggregateBarUnit"/>
    /// </summary>
    public class AggregateBarUnitNullableJsonConverter : JsonConverter<AggregateBarUnit?>
    {
        /// <summary>
        /// Returns a AggregateBarUnit from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AggregateBarUnit? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            AggregateBarUnit? result = rawValue == null
                ? null
                : AggregateBarUnitValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aggregateBarUnit"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AggregateBarUnit? aggregateBarUnit, JsonSerializerOptions options)
        {
            writer.WriteStringValue(aggregateBarUnit?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; AccountNotFound 2 &#x3D; OrderNotFound 3 &#x3D; Rejected 4 &#x3D; Pending 5 &#x3D; UnknownError 6 &#x3D; AccountRejected
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; AccountNotFound 2 &#x3D; OrderNotFound 3 &#x3D; Rejected 4 &#x3D; Pending 5 &#x3D; UnknownError 6 &#x3D; AccountRejected</value>
    public enum CancelOrderErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4,
        /// <summary>
        /// Enum NUMBER_5 for value: 5
        /// </summary>
        NUMBER_5 = 5,
        /// <summary>
        /// Enum NUMBER_6 for value: 6
        /// </summary>
        NUMBER_6 = 6
    }
    /// <summary>
    /// Converts <see cref="CancelOrderErrorCode"/> to and from the JSON value
    /// </summary>
    public static class CancelOrderErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="CancelOrderErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CancelOrderErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return CancelOrderErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return CancelOrderErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return CancelOrderErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return CancelOrderErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return CancelOrderErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return CancelOrderErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return CancelOrderErrorCode.NUMBER_6;
            throw new NotImplementedException($"Could not convert value to type CancelOrderErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="CancelOrderErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CancelOrderErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return CancelOrderErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return CancelOrderErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return CancelOrderErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return CancelOrderErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return CancelOrderErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return CancelOrderErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return CancelOrderErrorCode.NUMBER_6;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="CancelOrderErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(CancelOrderErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="CancelOrderErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class CancelOrderErrorCodeJsonConverter : JsonConverter<CancelOrderErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CancelOrderErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            CancelOrderErrorCode? result = rawValue == null
                ? null
                : CancelOrderErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the CancelOrderErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cancelOrderErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CancelOrderErrorCode cancelOrderErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(cancelOrderErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="CancelOrderErrorCode"/>
    /// </summary>
    public class CancelOrderErrorCodeNullableJsonConverter : JsonConverter<CancelOrderErrorCode?>
    {
        /// <summary>
        /// Returns a CancelOrderErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override CancelOrderErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            CancelOrderErrorCode? result = rawValue == null
                ? null
                : CancelOrderErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cancelOrderErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, CancelOrderErrorCode? cancelOrderErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(cancelOrderErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// CancelOrderRequest
    /// </summary>
    public partial class CancelOrderRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelOrderRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        /// <param name="orderId">orderId</param>
        [JsonConstructor]
        public CancelOrderRequest(int accountId, long orderId)
        {
            AccountId = accountId;
            OrderId = orderId;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public long OrderId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CancelOrderRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="CancelOrderRequest" />
    /// </summary>
    public class CancelOrderRequestJsonConverter : JsonConverter<CancelOrderRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CancelOrderRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CancelOrderRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> accountId = default;
            Option<long?> orderId = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "orderId":
                            orderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class CancelOrderRequest.", nameof(accountId));
            if (!orderId.IsSet)
                throw new ArgumentException("Property is required for class CancelOrderRequest.", nameof(orderId));
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class CancelOrderRequest.");
            if (orderId.IsSet && orderId.Value == null)
                throw new ArgumentNullException(nameof(orderId), "Property is not nullable for class CancelOrderRequest.");
            return new CancelOrderRequest(accountId.Value.Value, orderId.Value.Value);
        }
        /// <summary>
        /// Serializes a <see cref="CancelOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CancelOrderRequest cancelOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, cancelOrderRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="CancelOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cancelOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CancelOrderRequest cancelOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("accountId", cancelOrderRequest.AccountId);
            writer.WriteNumber("orderId", cancelOrderRequest.OrderId);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// CancelOrderResponse
    /// </summary>
    public partial class CancelOrderResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelOrderResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        [JsonConstructor]
        public CancelOrderResponse(bool success, CancelOrderErrorCode errorCode, Option<string> errorMessage = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public CancelOrderErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CancelOrderResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="CancelOrderResponse" />
    /// </summary>
    public class CancelOrderResponseJsonConverter : JsonConverter<CancelOrderResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="CancelOrderResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CancelOrderResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<CancelOrderErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<CancelOrderErrorCode?>(CancelOrderErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class CancelOrderResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class CancelOrderResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class CancelOrderResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class CancelOrderResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class CancelOrderResponse.");
            return new CancelOrderResponse(success.Value.Value, errorCode.Value.Value, errorMessage);
        }
        /// <summary>
        /// Serializes a <see cref="CancelOrderResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cancelOrderResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CancelOrderResponse cancelOrderResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, cancelOrderResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="CancelOrderResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cancelOrderResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CancelOrderResponse cancelOrderResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (cancelOrderResponse.ErrorMessageOption.IsSet && cancelOrderResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(cancelOrderResponse.ErrorMessage), "Property is required for class CancelOrderResponse.");
            writer.WriteBoolean("success", cancelOrderResponse.Success);
            var errorCodeRawValue = CancelOrderErrorCodeValueConverter.ToJsonValue(cancelOrderResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (cancelOrderResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", cancelOrderResponse.ErrorMessage);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// CloseContractPositionRequest
    /// </summary>
    public partial class CloseContractPositionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloseContractPositionRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        /// <param name="contractId">contractId</param>
        [JsonConstructor]
        public CloseContractPositionRequest(int accountId, string contractId)
        {
            AccountId = accountId;
            ContractId = contractId;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CloseContractPositionRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="CloseContractPositionRequest" />
    /// </summary>
    public class CloseContractPositionRequestJsonConverter : JsonConverter<CloseContractPositionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CloseContractPositionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CloseContractPositionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> accountId = default;
            Option<string> contractId = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contractId":
                            contractId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class CloseContractPositionRequest.", nameof(accountId));
            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class CloseContractPositionRequest.", nameof(contractId));
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class CloseContractPositionRequest.");
            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class CloseContractPositionRequest.");
            return new CloseContractPositionRequest(accountId.Value.Value, contractId.Value);
        }
        /// <summary>
        /// Serializes a <see cref="CloseContractPositionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="closeContractPositionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CloseContractPositionRequest closeContractPositionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, closeContractPositionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="CloseContractPositionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="closeContractPositionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CloseContractPositionRequest closeContractPositionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (closeContractPositionRequest.ContractId == null)
                throw new ArgumentNullException(nameof(closeContractPositionRequest.ContractId), "Property is required for class CloseContractPositionRequest.");
            writer.WriteNumber("accountId", closeContractPositionRequest.AccountId);
            writer.WriteString("contractId", closeContractPositionRequest.ContractId);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; AccountNotFound 2 &#x3D; PositionNotFound 3 &#x3D; ContractNotFound 4 &#x3D; ContractNotActive 5 &#x3D; OrderRejected 6 &#x3D; OrderPending 7 &#x3D; UnknownError 8 &#x3D; AccountRejected
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; AccountNotFound 2 &#x3D; PositionNotFound 3 &#x3D; ContractNotFound 4 &#x3D; ContractNotActive 5 &#x3D; OrderRejected 6 &#x3D; OrderPending 7 &#x3D; UnknownError 8 &#x3D; AccountRejected</value>
    public enum ClosePositionErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4,
        /// <summary>
        /// Enum NUMBER_5 for value: 5
        /// </summary>
        NUMBER_5 = 5,
        /// <summary>
        /// Enum NUMBER_6 for value: 6
        /// </summary>
        NUMBER_6 = 6,
        /// <summary>
        /// Enum NUMBER_7 for value: 7
        /// </summary>
        NUMBER_7 = 7,
        /// <summary>
        /// Enum NUMBER_8 for value: 8
        /// </summary>
        NUMBER_8 = 8
    }
    /// <summary>
    /// Converts <see cref="ClosePositionErrorCode"/> to and from the JSON value
    /// </summary>
    public static class ClosePositionErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ClosePositionErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ClosePositionErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return ClosePositionErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return ClosePositionErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return ClosePositionErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return ClosePositionErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return ClosePositionErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return ClosePositionErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return ClosePositionErrorCode.NUMBER_6;
            if (value.Equals((7).ToString()))
                return ClosePositionErrorCode.NUMBER_7;
            if (value.Equals((8).ToString()))
                return ClosePositionErrorCode.NUMBER_8;
            throw new NotImplementedException($"Could not convert value to type ClosePositionErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="ClosePositionErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ClosePositionErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return ClosePositionErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return ClosePositionErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return ClosePositionErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return ClosePositionErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return ClosePositionErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return ClosePositionErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return ClosePositionErrorCode.NUMBER_6;
            if (value.Equals((7).ToString()))
                return ClosePositionErrorCode.NUMBER_7;
            if (value.Equals((8).ToString()))
                return ClosePositionErrorCode.NUMBER_8;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="ClosePositionErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(ClosePositionErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ClosePositionErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ClosePositionErrorCodeJsonConverter : JsonConverter<ClosePositionErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ClosePositionErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            ClosePositionErrorCode? result = rawValue == null
                ? null
                : ClosePositionErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the ClosePositionErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="closePositionErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ClosePositionErrorCode closePositionErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(closePositionErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ClosePositionErrorCode"/>
    /// </summary>
    public class ClosePositionErrorCodeNullableJsonConverter : JsonConverter<ClosePositionErrorCode?>
    {
        /// <summary>
        /// Returns a ClosePositionErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ClosePositionErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            ClosePositionErrorCode? result = rawValue == null
                ? null
                : ClosePositionErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="closePositionErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ClosePositionErrorCode? closePositionErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(closePositionErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// ClosePositionResponse
    /// </summary>
    public partial class ClosePositionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClosePositionResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        [JsonConstructor]
        public ClosePositionResponse(bool success, ClosePositionErrorCode errorCode, Option<string> errorMessage = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public ClosePositionErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClosePositionResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ClosePositionResponse" />
    /// </summary>
    public class ClosePositionResponseJsonConverter : JsonConverter<ClosePositionResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ClosePositionResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClosePositionResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<ClosePositionErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<ClosePositionErrorCode?>(ClosePositionErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class ClosePositionResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class ClosePositionResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class ClosePositionResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class ClosePositionResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class ClosePositionResponse.");
            return new ClosePositionResponse(success.Value.Value, errorCode.Value.Value, errorMessage);
        }
        /// <summary>
        /// Serializes a <see cref="ClosePositionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="closePositionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClosePositionResponse closePositionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, closePositionResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="ClosePositionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="closePositionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClosePositionResponse closePositionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (closePositionResponse.ErrorMessageOption.IsSet && closePositionResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(closePositionResponse.ErrorMessage), "Property is required for class ClosePositionResponse.");
            writer.WriteBoolean("success", closePositionResponse.Success);
            var errorCodeRawValue = ClosePositionErrorCodeValueConverter.ToJsonValue(closePositionResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (closePositionResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", closePositionResponse.ErrorMessage);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// ContractModel
    /// </summary>
    public partial class ContractModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="description">description</param>
        /// <param name="tickSize">tickSize</param>
        /// <param name="tickValue">tickValue</param>
        /// <param name="activeContract">activeContract</param>
        /// <param name="symbolId">symbolId</param>
        [JsonConstructor]
        public ContractModel(string id, string name, string description, decimal tickSize, decimal tickValue, bool activeContract, string symbolId)
        {
            Id = id;
            Name = name;
            Description = description;
            TickSize = tickSize;
            TickValue = tickValue;
            ActiveContract = activeContract;
            SymbolId = symbolId;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets TickSize
        /// </summary>
        [JsonPropertyName("tickSize")]
        public decimal TickSize { get; set; }
        /// <summary>
        /// Gets or Sets TickValue
        /// </summary>
        [JsonPropertyName("tickValue")]
        public decimal TickValue { get; set; }
        /// <summary>
        /// Gets or Sets ActiveContract
        /// </summary>
        [JsonPropertyName("activeContract")]
        public bool ActiveContract { get; set; }
        /// <summary>
        /// Gets or Sets SymbolId
        /// </summary>
        [JsonPropertyName("symbolId")]
        public string SymbolId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContractModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TickSize: ").Append(TickSize).Append("\n");
            sb.Append("  TickValue: ").Append(TickValue).Append("\n");
            sb.Append("  ActiveContract: ").Append(ActiveContract).Append("\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ContractModel" />
    /// </summary>
    public class ContractModelJsonConverter : JsonConverter<ContractModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ContractModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContractModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<string> id = default;
            Option<string> name = default;
            Option<string> description = default;
            Option<decimal?> tickSize = default;
            Option<decimal?> tickValue = default;
            Option<bool?> activeContract = default;
            Option<string> symbolId = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "tickSize":
                            tickSize = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "tickValue":
                            tickValue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "activeContract":
                            activeContract = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "symbolId":
                            symbolId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(id));
            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(name));
            if (!description.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(description));
            if (!tickSize.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(tickSize));
            if (!tickValue.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(tickValue));
            if (!activeContract.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(activeContract));
            if (!symbolId.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(symbolId));
            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ContractModel.");
            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ContractModel.");
            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ContractModel.");
            if (tickSize.IsSet && tickSize.Value == null)
                throw new ArgumentNullException(nameof(tickSize), "Property is not nullable for class ContractModel.");
            if (tickValue.IsSet && tickValue.Value == null)
                throw new ArgumentNullException(nameof(tickValue), "Property is not nullable for class ContractModel.");
            if (activeContract.IsSet && activeContract.Value == null)
                throw new ArgumentNullException(nameof(activeContract), "Property is not nullable for class ContractModel.");
            if (symbolId.IsSet && symbolId.Value == null)
                throw new ArgumentNullException(nameof(symbolId), "Property is not nullable for class ContractModel.");
            return new ContractModel(id.Value, name.Value, description.Value, tickSize.Value.Value, tickValue.Value.Value, activeContract.Value.Value, symbolId.Value);
        }
        /// <summary>
        /// Serializes a <see cref="ContractModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contractModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContractModel contractModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, contractModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="ContractModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contractModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ContractModel contractModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (contractModel.Id == null)
                throw new ArgumentNullException(nameof(contractModel.Id), "Property is required for class ContractModel.");
            if (contractModel.Name == null)
                throw new ArgumentNullException(nameof(contractModel.Name), "Property is required for class ContractModel.");
            if (contractModel.Description == null)
                throw new ArgumentNullException(nameof(contractModel.Description), "Property is required for class ContractModel.");
            if (contractModel.SymbolId == null)
                throw new ArgumentNullException(nameof(contractModel.SymbolId), "Property is required for class ContractModel.");
            writer.WriteString("id", contractModel.Id);
            writer.WriteString("name", contractModel.Name);
            writer.WriteString("description", contractModel.Description);
            writer.WriteNumber("tickSize", contractModel.TickSize);
            writer.WriteNumber("tickValue", contractModel.TickValue);
            writer.WriteBoolean("activeContract", contractModel.ActiveContract);
            writer.WriteString("symbolId", contractModel.SymbolId);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// HalfTradeModel
    /// </summary>
    public partial class HalfTradeModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HalfTradeModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="accountId">accountId</param>
        /// <param name="contractId">contractId</param>
        /// <param name="creationTimestamp">creationTimestamp</param>
        /// <param name="price">price</param>
        /// <param name="fees">fees</param>
        /// <param name="side">side</param>
        /// <param name="size">size</param>
        /// <param name="voided">voided</param>
        /// <param name="orderId">orderId</param>
        /// <param name="profitAndLoss">profitAndLoss</param>
        [JsonConstructor]
        public HalfTradeModel(long id, int accountId, string contractId, DateTime creationTimestamp, decimal price, decimal fees, OrderSide side, int size, bool voided, long orderId, Option<decimal?> profitAndLoss = default)
        {
            Id = id;
            AccountId = accountId;
            ContractId = contractId;
            CreationTimestamp = creationTimestamp;
            Price = price;
            Fees = fees;
            Side = side;
            Size = size;
            Voided = voided;
            OrderId = orderId;
            ProfitAndLossOption = profitAndLoss;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [JsonPropertyName("side")]
        public OrderSide Side { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long Id { get; set; }
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }
        /// <summary>
        /// Gets or Sets CreationTimestamp
        /// </summary>
        [JsonPropertyName("creationTimestamp")]
        public DateTime CreationTimestamp { get; set; }
        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public decimal Price { get; set; }
        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [JsonPropertyName("fees")]
        public decimal Fees { get; set; }
        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }
        /// <summary>
        /// Gets or Sets Voided
        /// </summary>
        [JsonPropertyName("voided")]
        public bool Voided { get; set; }
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public long OrderId { get; set; }
        /// <summary>
        /// Used to track the state of ProfitAndLoss
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ProfitAndLossOption { get; private set; }
        /// <summary>
        /// Gets or Sets ProfitAndLoss
        /// </summary>
        [JsonPropertyName("profitAndLoss")]
        public decimal? ProfitAndLoss { get { return this.ProfitAndLossOption; } set { this.ProfitAndLossOption = new Option<decimal?>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HalfTradeModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Voided: ").Append(Voided).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ProfitAndLoss: ").Append(ProfitAndLoss).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="HalfTradeModel" />
    /// </summary>
    public class HalfTradeModelJsonConverter : JsonConverter<HalfTradeModel>
    {
        /// <summary>
        /// The format to use to serialize CreationTimestamp
        /// </summary>
        public static string CreationTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// Deserializes json to <see cref="HalfTradeModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HalfTradeModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<long?> id = default;
            Option<int?> accountId = default;
            Option<string> contractId = default;
            Option<DateTime?> creationTimestamp = default;
            Option<decimal?> price = default;
            Option<decimal?> fees = default;
            Option<OrderSide?> side = default;
            Option<int?> size = default;
            Option<bool?> voided = default;
            Option<long?> orderId = default;
            Option<decimal?> profitAndLoss = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contractId":
                            contractId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "creationTimestamp":
                            creationTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "price":
                            price = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "fees":
                            fees = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "side":
                            string sideRawValue = utf8JsonReader.GetString();
                            if (sideRawValue != null)
                                side = new Option<OrderSide?>(OrderSideValueConverter.FromStringOrDefault(sideRawValue));
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "voided":
                            voided = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "orderId":
                            orderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "profitAndLoss":
                            profitAndLoss = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!id.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(id));
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(accountId));
            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(contractId));
            if (!creationTimestamp.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(creationTimestamp));
            if (!price.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(price));
            if (!fees.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(fees));
            if (!side.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(side));
            if (!size.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(size));
            if (!voided.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(voided));
            if (!orderId.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(orderId));
            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class HalfTradeModel.");
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class HalfTradeModel.");
            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class HalfTradeModel.");
            if (creationTimestamp.IsSet && creationTimestamp.Value == null)
                throw new ArgumentNullException(nameof(creationTimestamp), "Property is not nullable for class HalfTradeModel.");
            if (price.IsSet && price.Value == null)
                throw new ArgumentNullException(nameof(price), "Property is not nullable for class HalfTradeModel.");
            if (fees.IsSet && fees.Value == null)
                throw new ArgumentNullException(nameof(fees), "Property is not nullable for class HalfTradeModel.");
            if (side.IsSet && side.Value == null)
                throw new ArgumentNullException(nameof(side), "Property is not nullable for class HalfTradeModel.");
            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class HalfTradeModel.");
            if (voided.IsSet && voided.Value == null)
                throw new ArgumentNullException(nameof(voided), "Property is not nullable for class HalfTradeModel.");
            if (orderId.IsSet && orderId.Value == null)
                throw new ArgumentNullException(nameof(orderId), "Property is not nullable for class HalfTradeModel.");
            if (profitAndLoss.IsSet && profitAndLoss.Value == null)
                throw new ArgumentNullException(nameof(profitAndLoss), "Property is not nullable for class HalfTradeModel.");
            return new HalfTradeModel(id.Value.Value, accountId.Value.Value, contractId.Value, creationTimestamp.Value.Value, price.Value.Value, fees.Value.Value, side.Value.Value, size.Value.Value, voided.Value.Value, orderId.Value.Value, profitAndLoss);
        }
        /// <summary>
        /// Serializes a <see cref="HalfTradeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="halfTradeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HalfTradeModel halfTradeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, halfTradeModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="HalfTradeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="halfTradeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HalfTradeModel halfTradeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (halfTradeModel.ContractId == null)
                throw new ArgumentNullException(nameof(halfTradeModel.ContractId), "Property is required for class HalfTradeModel.");
            writer.WriteNumber("id", halfTradeModel.Id);
            writer.WriteNumber("accountId", halfTradeModel.AccountId);
            writer.WriteString("contractId", halfTradeModel.ContractId);
            writer.WriteString("creationTimestamp", halfTradeModel.CreationTimestamp.ToString(CreationTimestampFormat));
            writer.WriteNumber("price", halfTradeModel.Price);
            writer.WriteNumber("fees", halfTradeModel.Fees);
            var sideRawValue = OrderSideValueConverter.ToJsonValue(halfTradeModel.Side);
            writer.WriteNumber("side", sideRawValue);
            writer.WriteNumber("size", halfTradeModel.Size);
            writer.WriteBoolean("voided", halfTradeModel.Voided);
            writer.WriteNumber("orderId", halfTradeModel.OrderId);
            if (halfTradeModel.ProfitAndLossOption.IsSet)
                writer.WriteNumber("profitAndLoss", halfTradeModel.ProfitAndLossOption.Value.Value);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success
    /// </summary>
    /// <value>0 &#x3D; Success</value>
    public enum ListAvailableContractErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0
    }
    /// <summary>
    /// Converts <see cref="ListAvailableContractErrorCode"/> to and from the JSON value
    /// </summary>
    public static class ListAvailableContractErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ListAvailableContractErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ListAvailableContractErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return ListAvailableContractErrorCode.NUMBER_0;
            throw new NotImplementedException($"Could not convert value to type ListAvailableContractErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="ListAvailableContractErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ListAvailableContractErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return ListAvailableContractErrorCode.NUMBER_0;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="ListAvailableContractErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(ListAvailableContractErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ListAvailableContractErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ListAvailableContractErrorCodeJsonConverter : JsonConverter<ListAvailableContractErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ListAvailableContractErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            ListAvailableContractErrorCode? result = rawValue == null
                ? null
                : ListAvailableContractErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the ListAvailableContractErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listAvailableContractErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ListAvailableContractErrorCode listAvailableContractErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(listAvailableContractErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ListAvailableContractErrorCode"/>
    /// </summary>
    public class ListAvailableContractErrorCodeNullableJsonConverter : JsonConverter<ListAvailableContractErrorCode?>
    {
        /// <summary>
        /// Returns a ListAvailableContractErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ListAvailableContractErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            ListAvailableContractErrorCode? result = rawValue == null
                ? null
                : ListAvailableContractErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listAvailableContractErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ListAvailableContractErrorCode? listAvailableContractErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(listAvailableContractErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// ListAvailableContractRequest
    /// </summary>
    public partial class ListAvailableContractRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAvailableContractRequest" /> class.
        /// </summary>
        /// <param name="live">live</param>
        [JsonConstructor]
        public ListAvailableContractRequest(bool live)
        {
            Live = live;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets Live
        /// </summary>
        [JsonPropertyName("live")]
        public bool Live { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListAvailableContractRequest {\n");
            sb.Append("  Live: ").Append(Live).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ListAvailableContractRequest" />
    /// </summary>
    public class ListAvailableContractRequestJsonConverter : JsonConverter<ListAvailableContractRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListAvailableContractRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListAvailableContractRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> live = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "live":
                            live = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!live.IsSet)
                throw new ArgumentException("Property is required for class ListAvailableContractRequest.", nameof(live));
            if (live.IsSet && live.Value == null)
                throw new ArgumentNullException(nameof(live), "Property is not nullable for class ListAvailableContractRequest.");
            return new ListAvailableContractRequest(live.Value.Value);
        }
        /// <summary>
        /// Serializes a <see cref="ListAvailableContractRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listAvailableContractRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListAvailableContractRequest listAvailableContractRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, listAvailableContractRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="ListAvailableContractRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listAvailableContractRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListAvailableContractRequest listAvailableContractRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteBoolean("live", listAvailableContractRequest.Live);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// ListAvailableContractResponse
    /// </summary>
    public partial class ListAvailableContractResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAvailableContractResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="contracts">contracts</param>
        [JsonConstructor]
        public ListAvailableContractResponse(bool success, ListAvailableContractErrorCode errorCode, Option<string> errorMessage = default, Option<List<ContractModel>> contracts = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            ContractsOption = contracts;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public ListAvailableContractErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of Contracts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ContractModel>> ContractsOption { get; private set; }
        /// <summary>
        /// Gets or Sets Contracts
        /// </summary>
        [JsonPropertyName("contracts")]
        public List<ContractModel> Contracts { get { return this.ContractsOption; } set { this.ContractsOption = new Option<List<ContractModel>>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListAvailableContractResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Contracts: ").Append(Contracts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ListAvailableContractResponse" />
    /// </summary>
    public class ListAvailableContractResponseJsonConverter : JsonConverter<ListAvailableContractResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListAvailableContractResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListAvailableContractResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<ListAvailableContractErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<List<ContractModel>> contracts = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<ListAvailableContractErrorCode?>(ListAvailableContractErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contracts":
                            contracts = new Option<List<ContractModel>>(JsonSerializer.Deserialize<List<ContractModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class ListAvailableContractResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class ListAvailableContractResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class ListAvailableContractResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class ListAvailableContractResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class ListAvailableContractResponse.");
            if (contracts.IsSet && contracts.Value == null)
                throw new ArgumentNullException(nameof(contracts), "Property is not nullable for class ListAvailableContractResponse.");
            return new ListAvailableContractResponse(success.Value.Value, errorCode.Value.Value, errorMessage, contracts);
        }
        /// <summary>
        /// Serializes a <see cref="ListAvailableContractResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listAvailableContractResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListAvailableContractResponse listAvailableContractResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, listAvailableContractResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="ListAvailableContractResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listAvailableContractResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListAvailableContractResponse listAvailableContractResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listAvailableContractResponse.ErrorMessageOption.IsSet && listAvailableContractResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(listAvailableContractResponse.ErrorMessage), "Property is required for class ListAvailableContractResponse.");
            if (listAvailableContractResponse.ContractsOption.IsSet && listAvailableContractResponse.Contracts == null)
                throw new ArgumentNullException(nameof(listAvailableContractResponse.Contracts), "Property is required for class ListAvailableContractResponse.");
            writer.WriteBoolean("success", listAvailableContractResponse.Success);
            var errorCodeRawValue = ListAvailableContractErrorCodeValueConverter.ToJsonValue(listAvailableContractResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (listAvailableContractResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", listAvailableContractResponse.ErrorMessage);
            if (listAvailableContractResponse.ContractsOption.IsSet)
            {
                writer.WritePropertyName("contracts");
                JsonSerializer.Serialize(writer, listAvailableContractResponse.Contracts, jsonSerializerOptions);
            }
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// LoginApiKeyRequest
    /// </summary>
    public partial class LoginApiKeyRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginApiKeyRequest" /> class.
        /// </summary>
        /// <param name="userName">userName</param>
        /// <param name="apiKey">apiKey</param>
        [JsonConstructor]
        public LoginApiKeyRequest(string userName, string apiKey)
        {
            UserName = userName;
            ApiKey = apiKey;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [JsonPropertyName("userName")]
        public string UserName { get; set; }
        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [JsonPropertyName("apiKey")]
        public string ApiKey { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginApiKeyRequest {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="LoginApiKeyRequest" />
    /// </summary>
    public class LoginApiKeyRequestJsonConverter : JsonConverter<LoginApiKeyRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoginApiKeyRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoginApiKeyRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<string> userName = default;
            Option<string> apiKey = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "userName":
                            userName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "apiKey":
                            apiKey = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!userName.IsSet)
                throw new ArgumentException("Property is required for class LoginApiKeyRequest.", nameof(userName));
            if (!apiKey.IsSet)
                throw new ArgumentException("Property is required for class LoginApiKeyRequest.", nameof(apiKey));
            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class LoginApiKeyRequest.");
            if (apiKey.IsSet && apiKey.Value == null)
                throw new ArgumentNullException(nameof(apiKey), "Property is not nullable for class LoginApiKeyRequest.");
            return new LoginApiKeyRequest(userName.Value, apiKey.Value);
        }
        /// <summary>
        /// Serializes a <see cref="LoginApiKeyRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginApiKeyRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoginApiKeyRequest loginApiKeyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, loginApiKeyRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="LoginApiKeyRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginApiKeyRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoginApiKeyRequest loginApiKeyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loginApiKeyRequest.UserName == null)
                throw new ArgumentNullException(nameof(loginApiKeyRequest.UserName), "Property is required for class LoginApiKeyRequest.");
            if (loginApiKeyRequest.ApiKey == null)
                throw new ArgumentNullException(nameof(loginApiKeyRequest.ApiKey), "Property is required for class LoginApiKeyRequest.");
            writer.WriteString("userName", loginApiKeyRequest.UserName);
            writer.WriteString("apiKey", loginApiKeyRequest.ApiKey);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// LoginAppRequest
    /// </summary>
    public partial class LoginAppRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginAppRequest" /> class.
        /// </summary>
        /// <param name="userName">userName</param>
        /// <param name="password">password</param>
        /// <param name="deviceId">deviceId</param>
        /// <param name="appId">appId</param>
        /// <param name="verifyKey">verifyKey</param>
        [JsonConstructor]
        public LoginAppRequest(string userName, string password, string deviceId, string appId, string verifyKey)
        {
            UserName = userName;
            Password = password;
            DeviceId = deviceId;
            AppId = appId;
            VerifyKey = verifyKey;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [JsonPropertyName("userName")]
        public string UserName { get; set; }
        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [JsonPropertyName("password")]
        public string Password { get; set; }
        /// <summary>
        /// Gets or Sets DeviceId
        /// </summary>
        [JsonPropertyName("deviceId")]
        public string DeviceId { get; set; }
        /// <summary>
        /// Gets or Sets AppId
        /// </summary>
        [JsonPropertyName("appId")]
        public string AppId { get; set; }
        /// <summary>
        /// Gets or Sets VerifyKey
        /// </summary>
        [JsonPropertyName("verifyKey")]
        public string VerifyKey { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginAppRequest {\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  VerifyKey: ").Append(VerifyKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="LoginAppRequest" />
    /// </summary>
    public class LoginAppRequestJsonConverter : JsonConverter<LoginAppRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoginAppRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoginAppRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<string> userName = default;
            Option<string> password = default;
            Option<string> deviceId = default;
            Option<string> appId = default;
            Option<string> verifyKey = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "userName":
                            userName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "password":
                            password = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "deviceId":
                            deviceId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "appId":
                            appId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "verifyKey":
                            verifyKey = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!userName.IsSet)
                throw new ArgumentException("Property is required for class LoginAppRequest.", nameof(userName));
            if (!password.IsSet)
                throw new ArgumentException("Property is required for class LoginAppRequest.", nameof(password));
            if (!deviceId.IsSet)
                throw new ArgumentException("Property is required for class LoginAppRequest.", nameof(deviceId));
            if (!appId.IsSet)
                throw new ArgumentException("Property is required for class LoginAppRequest.", nameof(appId));
            if (!verifyKey.IsSet)
                throw new ArgumentException("Property is required for class LoginAppRequest.", nameof(verifyKey));
            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class LoginAppRequest.");
            if (password.IsSet && password.Value == null)
                throw new ArgumentNullException(nameof(password), "Property is not nullable for class LoginAppRequest.");
            if (deviceId.IsSet && deviceId.Value == null)
                throw new ArgumentNullException(nameof(deviceId), "Property is not nullable for class LoginAppRequest.");
            if (appId.IsSet && appId.Value == null)
                throw new ArgumentNullException(nameof(appId), "Property is not nullable for class LoginAppRequest.");
            if (verifyKey.IsSet && verifyKey.Value == null)
                throw new ArgumentNullException(nameof(verifyKey), "Property is not nullable for class LoginAppRequest.");
            return new LoginAppRequest(userName.Value, password.Value, deviceId.Value, appId.Value, verifyKey.Value);
        }
        /// <summary>
        /// Serializes a <see cref="LoginAppRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginAppRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoginAppRequest loginAppRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, loginAppRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="LoginAppRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginAppRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoginAppRequest loginAppRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loginAppRequest.UserName == null)
                throw new ArgumentNullException(nameof(loginAppRequest.UserName), "Property is required for class LoginAppRequest.");
            if (loginAppRequest.Password == null)
                throw new ArgumentNullException(nameof(loginAppRequest.Password), "Property is required for class LoginAppRequest.");
            if (loginAppRequest.DeviceId == null)
                throw new ArgumentNullException(nameof(loginAppRequest.DeviceId), "Property is required for class LoginAppRequest.");
            if (loginAppRequest.AppId == null)
                throw new ArgumentNullException(nameof(loginAppRequest.AppId), "Property is required for class LoginAppRequest.");
            if (loginAppRequest.VerifyKey == null)
                throw new ArgumentNullException(nameof(loginAppRequest.VerifyKey), "Property is required for class LoginAppRequest.");
            writer.WriteString("userName", loginAppRequest.UserName);
            writer.WriteString("password", loginAppRequest.Password);
            writer.WriteString("deviceId", loginAppRequest.DeviceId);
            writer.WriteString("appId", loginAppRequest.AppId);
            writer.WriteString("verifyKey", loginAppRequest.VerifyKey);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; UserNotFound 2 &#x3D; PasswordVerificationFailed 3 &#x3D; InvalidCredentials 4 &#x3D; AppNotFound 5 &#x3D; AppVerificationFailed 6 &#x3D; InvalidDevice 7 &#x3D; AgreementsNotSigned 8 &#x3D; UnknownError 9 &#x3D; ApiSubscriptionNotFound 10 &#x3D; ApiKeyAuthenticationDisabled
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; UserNotFound 2 &#x3D; PasswordVerificationFailed 3 &#x3D; InvalidCredentials 4 &#x3D; AppNotFound 5 &#x3D; AppVerificationFailed 6 &#x3D; InvalidDevice 7 &#x3D; AgreementsNotSigned 8 &#x3D; UnknownError 9 &#x3D; ApiSubscriptionNotFound 10 &#x3D; ApiKeyAuthenticationDisabled</value>
    public enum LoginErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4,
        /// <summary>
        /// Enum NUMBER_5 for value: 5
        /// </summary>
        NUMBER_5 = 5,
        /// <summary>
        /// Enum NUMBER_6 for value: 6
        /// </summary>
        NUMBER_6 = 6,
        /// <summary>
        /// Enum NUMBER_7 for value: 7
        /// </summary>
        NUMBER_7 = 7,
        /// <summary>
        /// Enum NUMBER_8 for value: 8
        /// </summary>
        NUMBER_8 = 8,
        /// <summary>
        /// Enum NUMBER_9 for value: 9
        /// </summary>
        NUMBER_9 = 9,
        /// <summary>
        /// Enum NUMBER_10 for value: 10
        /// </summary>
        NUMBER_10 = 10
    }
    /// <summary>
    /// Converts <see cref="LoginErrorCode"/> to and from the JSON value
    /// </summary>
    public static class LoginErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="LoginErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LoginErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return LoginErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return LoginErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return LoginErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return LoginErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return LoginErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return LoginErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return LoginErrorCode.NUMBER_6;
            if (value.Equals((7).ToString()))
                return LoginErrorCode.NUMBER_7;
            if (value.Equals((8).ToString()))
                return LoginErrorCode.NUMBER_8;
            if (value.Equals((9).ToString()))
                return LoginErrorCode.NUMBER_9;
            if (value.Equals((10).ToString()))
                return LoginErrorCode.NUMBER_10;
            throw new NotImplementedException($"Could not convert value to type LoginErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="LoginErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LoginErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return LoginErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return LoginErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return LoginErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return LoginErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return LoginErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return LoginErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return LoginErrorCode.NUMBER_6;
            if (value.Equals((7).ToString()))
                return LoginErrorCode.NUMBER_7;
            if (value.Equals((8).ToString()))
                return LoginErrorCode.NUMBER_8;
            if (value.Equals((9).ToString()))
                return LoginErrorCode.NUMBER_9;
            if (value.Equals((10).ToString()))
                return LoginErrorCode.NUMBER_10;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="LoginErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(LoginErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="LoginErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class LoginErrorCodeJsonConverter : JsonConverter<LoginErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LoginErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            LoginErrorCode? result = rawValue == null
                ? null
                : LoginErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the LoginErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LoginErrorCode loginErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(loginErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="LoginErrorCode"/>
    /// </summary>
    public class LoginErrorCodeNullableJsonConverter : JsonConverter<LoginErrorCode?>
    {
        /// <summary>
        /// Returns a LoginErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LoginErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            LoginErrorCode? result = rawValue == null
                ? null
                : LoginErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LoginErrorCode? loginErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(loginErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// LoginResponse
    /// </summary>
    public partial class LoginResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="token">token</param>
        [JsonConstructor]
        public LoginResponse(bool success, LoginErrorCode errorCode, Option<string> errorMessage = default, Option<string> token = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            TokenOption = token;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public LoginErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of Token
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TokenOption { get; private set; }
        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [JsonPropertyName("token")]
        public string Token { get { return this.TokenOption; } set { this.TokenOption = new Option<string>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoginResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="LoginResponse" />
    /// </summary>
    public class LoginResponseJsonConverter : JsonConverter<LoginResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="LoginResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LoginResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<LoginErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<string> token = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<LoginErrorCode?>(LoginErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "token":
                            token = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class LoginResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class LoginResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class LoginResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class LoginResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class LoginResponse.");
            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token), "Property is not nullable for class LoginResponse.");
            return new LoginResponse(success.Value.Value, errorCode.Value.Value, errorMessage, token);
        }
        /// <summary>
        /// Serializes a <see cref="LoginResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LoginResponse loginResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, loginResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="LoginResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="loginResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LoginResponse loginResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (loginResponse.ErrorMessageOption.IsSet && loginResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(loginResponse.ErrorMessage), "Property is required for class LoginResponse.");
            if (loginResponse.TokenOption.IsSet && loginResponse.Token == null)
                throw new ArgumentNullException(nameof(loginResponse.Token), "Property is required for class LoginResponse.");
            writer.WriteBoolean("success", loginResponse.Success);
            var errorCodeRawValue = LoginErrorCodeValueConverter.ToJsonValue(loginResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (loginResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", loginResponse.ErrorMessage);
            if (loginResponse.TokenOption.IsSet)
                writer.WriteString("token", loginResponse.Token);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; InvalidSession 2 &#x3D; UnknownError
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; InvalidSession 2 &#x3D; UnknownError</value>
    public enum LogoutErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2
    }
    /// <summary>
    /// Converts <see cref="LogoutErrorCode"/> to and from the JSON value
    /// </summary>
    public static class LogoutErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="LogoutErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LogoutErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return LogoutErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return LogoutErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return LogoutErrorCode.NUMBER_2;
            throw new NotImplementedException($"Could not convert value to type LogoutErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="LogoutErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LogoutErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return LogoutErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return LogoutErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return LogoutErrorCode.NUMBER_2;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="LogoutErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(LogoutErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="LogoutErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class LogoutErrorCodeJsonConverter : JsonConverter<LogoutErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LogoutErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            LogoutErrorCode? result = rawValue == null
                ? null
                : LogoutErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the LogoutErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="logoutErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LogoutErrorCode logoutErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(logoutErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="LogoutErrorCode"/>
    /// </summary>
    public class LogoutErrorCodeNullableJsonConverter : JsonConverter<LogoutErrorCode?>
    {
        /// <summary>
        /// Returns a LogoutErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override LogoutErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            LogoutErrorCode? result = rawValue == null
                ? null
                : LogoutErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="logoutErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, LogoutErrorCode? logoutErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(logoutErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// LogoutResponse
    /// </summary>
    public partial class LogoutResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogoutResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        [JsonConstructor]
        public LogoutResponse(bool success, LogoutErrorCode errorCode, Option<string> errorMessage = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public LogoutErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogoutResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="LogoutResponse" />
    /// </summary>
    public class LogoutResponseJsonConverter : JsonConverter<LogoutResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="LogoutResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LogoutResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<LogoutErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<LogoutErrorCode?>(LogoutErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class LogoutResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class LogoutResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class LogoutResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class LogoutResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class LogoutResponse.");
            return new LogoutResponse(success.Value.Value, errorCode.Value.Value, errorMessage);
        }
        /// <summary>
        /// Serializes a <see cref="LogoutResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="logoutResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LogoutResponse logoutResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, logoutResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="LogoutResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="logoutResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LogoutResponse logoutResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (logoutResponse.ErrorMessageOption.IsSet && logoutResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(logoutResponse.ErrorMessage), "Property is required for class LogoutResponse.");
            writer.WriteBoolean("success", logoutResponse.Success);
            var errorCodeRawValue = LogoutErrorCodeValueConverter.ToJsonValue(logoutResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (logoutResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", logoutResponse.ErrorMessage);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; AccountNotFound 2 &#x3D; OrderNotFound 3 &#x3D; Rejected 4 &#x3D; Pending 5 &#x3D; UnknownError 6 &#x3D; AccountRejected 7 &#x3D; ContractNotFound
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; AccountNotFound 2 &#x3D; OrderNotFound 3 &#x3D; Rejected 4 &#x3D; Pending 5 &#x3D; UnknownError 6 &#x3D; AccountRejected 7 &#x3D; ContractNotFound</value>
    public enum ModifyOrderErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4,
        /// <summary>
        /// Enum NUMBER_5 for value: 5
        /// </summary>
        NUMBER_5 = 5,
        /// <summary>
        /// Enum NUMBER_6 for value: 6
        /// </summary>
        NUMBER_6 = 6,
        /// <summary>
        /// Enum NUMBER_7 for value: 7
        /// </summary>
        NUMBER_7 = 7
    }
    /// <summary>
    /// Converts <see cref="ModifyOrderErrorCode"/> to and from the JSON value
    /// </summary>
    public static class ModifyOrderErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ModifyOrderErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ModifyOrderErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return ModifyOrderErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return ModifyOrderErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return ModifyOrderErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return ModifyOrderErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return ModifyOrderErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return ModifyOrderErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return ModifyOrderErrorCode.NUMBER_6;
            if (value.Equals((7).ToString()))
                return ModifyOrderErrorCode.NUMBER_7;
            throw new NotImplementedException($"Could not convert value to type ModifyOrderErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="ModifyOrderErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ModifyOrderErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return ModifyOrderErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return ModifyOrderErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return ModifyOrderErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return ModifyOrderErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return ModifyOrderErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return ModifyOrderErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return ModifyOrderErrorCode.NUMBER_6;
            if (value.Equals((7).ToString()))
                return ModifyOrderErrorCode.NUMBER_7;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="ModifyOrderErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(ModifyOrderErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ModifyOrderErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ModifyOrderErrorCodeJsonConverter : JsonConverter<ModifyOrderErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ModifyOrderErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            ModifyOrderErrorCode? result = rawValue == null
                ? null
                : ModifyOrderErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the ModifyOrderErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyOrderErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ModifyOrderErrorCode modifyOrderErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(modifyOrderErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ModifyOrderErrorCode"/>
    /// </summary>
    public class ModifyOrderErrorCodeNullableJsonConverter : JsonConverter<ModifyOrderErrorCode?>
    {
        /// <summary>
        /// Returns a ModifyOrderErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ModifyOrderErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            ModifyOrderErrorCode? result = rawValue == null
                ? null
                : ModifyOrderErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyOrderErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ModifyOrderErrorCode? modifyOrderErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(modifyOrderErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// ModifyOrderRequest
    /// </summary>
    public partial class ModifyOrderRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyOrderRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        /// <param name="orderId">orderId</param>
        /// <param name="size">size</param>
        /// <param name="limitPrice">limitPrice</param>
        /// <param name="stopPrice">stopPrice</param>
        /// <param name="trailPrice">trailPrice</param>
        [JsonConstructor]
        public ModifyOrderRequest(int accountId, long orderId, Option<int?> size = default, Option<decimal?> limitPrice = default, Option<decimal?> stopPrice = default, Option<decimal?> trailPrice = default)
        {
            AccountId = accountId;
            OrderId = orderId;
            SizeOption = size;
            LimitPriceOption = limitPrice;
            StopPriceOption = stopPrice;
            TrailPriceOption = trailPrice;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public long OrderId { get; set; }
        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }
        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new Option<int?>(value); } }
        /// <summary>
        /// Used to track the state of LimitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LimitPriceOption { get; private set; }
        /// <summary>
        /// Gets or Sets LimitPrice
        /// </summary>
        [JsonPropertyName("limitPrice")]
        public decimal? LimitPrice { get { return this.LimitPriceOption; } set { this.LimitPriceOption = new Option<decimal?>(value); } }
        /// <summary>
        /// Used to track the state of StopPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StopPriceOption { get; private set; }
        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [JsonPropertyName("stopPrice")]
        public decimal? StopPrice { get { return this.StopPriceOption; } set { this.StopPriceOption = new Option<decimal?>(value); } }
        /// <summary>
        /// Used to track the state of TrailPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TrailPriceOption { get; private set; }
        /// <summary>
        /// Gets or Sets TrailPrice
        /// </summary>
        [JsonPropertyName("trailPrice")]
        public decimal? TrailPrice { get { return this.TrailPriceOption; } set { this.TrailPriceOption = new Option<decimal?>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModifyOrderRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  TrailPrice: ").Append(TrailPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ModifyOrderRequest" />
    /// </summary>
    public class ModifyOrderRequestJsonConverter : JsonConverter<ModifyOrderRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ModifyOrderRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModifyOrderRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> accountId = default;
            Option<long?> orderId = default;
            Option<int?> size = default;
            Option<decimal?> limitPrice = default;
            Option<decimal?> stopPrice = default;
            Option<decimal?> trailPrice = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "orderId":
                            orderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "limitPrice":
                            limitPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "stopPrice":
                            stopPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "trailPrice":
                            trailPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class ModifyOrderRequest.", nameof(accountId));
            if (!orderId.IsSet)
                throw new ArgumentException("Property is required for class ModifyOrderRequest.", nameof(orderId));
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class ModifyOrderRequest.");
            if (orderId.IsSet && orderId.Value == null)
                throw new ArgumentNullException(nameof(orderId), "Property is not nullable for class ModifyOrderRequest.");
            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class ModifyOrderRequest.");
            if (limitPrice.IsSet && limitPrice.Value == null)
                throw new ArgumentNullException(nameof(limitPrice), "Property is not nullable for class ModifyOrderRequest.");
            if (stopPrice.IsSet && stopPrice.Value == null)
                throw new ArgumentNullException(nameof(stopPrice), "Property is not nullable for class ModifyOrderRequest.");
            if (trailPrice.IsSet && trailPrice.Value == null)
                throw new ArgumentNullException(nameof(trailPrice), "Property is not nullable for class ModifyOrderRequest.");
            return new ModifyOrderRequest(accountId.Value.Value, orderId.Value.Value, size, limitPrice, stopPrice, trailPrice);
        }
        /// <summary>
        /// Serializes a <see cref="ModifyOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModifyOrderRequest modifyOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, modifyOrderRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="ModifyOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModifyOrderRequest modifyOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("accountId", modifyOrderRequest.AccountId);
            writer.WriteNumber("orderId", modifyOrderRequest.OrderId);
            if (modifyOrderRequest.SizeOption.IsSet)
                writer.WriteNumber("size", modifyOrderRequest.SizeOption.Value.Value);
            if (modifyOrderRequest.LimitPriceOption.IsSet)
                writer.WriteNumber("limitPrice", modifyOrderRequest.LimitPriceOption.Value.Value);
            if (modifyOrderRequest.StopPriceOption.IsSet)
                writer.WriteNumber("stopPrice", modifyOrderRequest.StopPriceOption.Value.Value);
            if (modifyOrderRequest.TrailPriceOption.IsSet)
                writer.WriteNumber("trailPrice", modifyOrderRequest.TrailPriceOption.Value.Value);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// ModifyOrderResponse
    /// </summary>
    public partial class ModifyOrderResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyOrderResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        [JsonConstructor]
        public ModifyOrderResponse(bool success, ModifyOrderErrorCode errorCode, Option<string> errorMessage = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public ModifyOrderErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModifyOrderResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ModifyOrderResponse" />
    /// </summary>
    public class ModifyOrderResponseJsonConverter : JsonConverter<ModifyOrderResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ModifyOrderResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModifyOrderResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<ModifyOrderErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<ModifyOrderErrorCode?>(ModifyOrderErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class ModifyOrderResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class ModifyOrderResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class ModifyOrderResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class ModifyOrderResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class ModifyOrderResponse.");
            return new ModifyOrderResponse(success.Value.Value, errorCode.Value.Value, errorMessage);
        }
        /// <summary>
        /// Serializes a <see cref="ModifyOrderResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyOrderResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModifyOrderResponse modifyOrderResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, modifyOrderResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="ModifyOrderResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyOrderResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModifyOrderResponse modifyOrderResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (modifyOrderResponse.ErrorMessageOption.IsSet && modifyOrderResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(modifyOrderResponse.ErrorMessage), "Property is required for class ModifyOrderResponse.");
            writer.WriteBoolean("success", modifyOrderResponse.Success);
            var errorCodeRawValue = ModifyOrderErrorCodeValueConverter.ToJsonValue(modifyOrderResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (modifyOrderResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", modifyOrderResponse.ErrorMessage);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// OrderModel
    /// </summary>
    public partial class OrderModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="accountId">accountId</param>
        /// <param name="contractId">contractId</param>
        /// <param name="symbolId">symbolId</param>
        /// <param name="creationTimestamp">creationTimestamp</param>
        /// <param name="status">status</param>
        /// <param name="type">type</param>
        /// <param name="side">side</param>
        /// <param name="size">size</param>
        /// <param name="fillVolume">fillVolume</param>
        /// <param name="updateTimestamp">updateTimestamp</param>
        /// <param name="limitPrice">limitPrice</param>
        /// <param name="stopPrice">stopPrice</param>
        /// <param name="filledPrice">filledPrice</param>
        /// <param name="customTag">customTag</param>
        [JsonConstructor]
        public OrderModel(long id, int accountId, string contractId, string symbolId, DateTime creationTimestamp, OrderStatus status, OrderType type, OrderSide side, int size, int fillVolume, Option<DateTime?> updateTimestamp = default, Option<decimal?> limitPrice = default, Option<decimal?> stopPrice = default, Option<decimal?> filledPrice = default, Option<string> customTag = default)
        {
            Id = id;
            AccountId = accountId;
            ContractId = contractId;
            SymbolId = symbolId;
            CreationTimestamp = creationTimestamp;
            Status = status;
            Type = type;
            Side = side;
            Size = size;
            FillVolume = fillVolume;
            UpdateTimestampOption = updateTimestamp;
            LimitPriceOption = limitPrice;
            StopPriceOption = stopPrice;
            FilledPriceOption = filledPrice;
            CustomTagOption = customTag;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public OrderStatus Status { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public OrderType Type { get; set; }
        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [JsonPropertyName("side")]
        public OrderSide Side { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long Id { get; set; }
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }
        /// <summary>
        /// Gets or Sets SymbolId
        /// </summary>
        [JsonPropertyName("symbolId")]
        public string SymbolId { get; set; }
        /// <summary>
        /// Gets or Sets CreationTimestamp
        /// </summary>
        [JsonPropertyName("creationTimestamp")]
        public DateTime CreationTimestamp { get; set; }
        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }
        /// <summary>
        /// Gets or Sets FillVolume
        /// </summary>
        [JsonPropertyName("fillVolume")]
        public int FillVolume { get; set; }
        /// <summary>
        /// Used to track the state of UpdateTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> UpdateTimestampOption { get; private set; }
        /// <summary>
        /// Gets or Sets UpdateTimestamp
        /// </summary>
        [JsonPropertyName("updateTimestamp")]
        public DateTime? UpdateTimestamp { get { return this.UpdateTimestampOption; } set { this.UpdateTimestampOption = new Option<DateTime?>(value); } }
        /// <summary>
        /// Used to track the state of LimitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LimitPriceOption { get; private set; }
        /// <summary>
        /// Gets or Sets LimitPrice
        /// </summary>
        [JsonPropertyName("limitPrice")]
        public decimal? LimitPrice { get { return this.LimitPriceOption; } set { this.LimitPriceOption = new Option<decimal?>(value); } }
        /// <summary>
        /// Used to track the state of StopPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StopPriceOption { get; private set; }
        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [JsonPropertyName("stopPrice")]
        public decimal? StopPrice { get { return this.StopPriceOption; } set { this.StopPriceOption = new Option<decimal?>(value); } }
        /// <summary>
        /// Used to track the state of FilledPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> FilledPriceOption { get; private set; }
        /// <summary>
        /// Gets or Sets FilledPrice
        /// </summary>
        [JsonPropertyName("filledPrice")]
        public decimal? FilledPrice { get { return this.FilledPriceOption; } set { this.FilledPriceOption = new Option<decimal?>(value); } }
        /// <summary>
        /// Used to track the state of CustomTag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CustomTagOption { get; private set; }
        /// <summary>
        /// Gets or Sets CustomTag
        /// </summary>
        [JsonPropertyName("customTag")]
        public string CustomTag { get { return this.CustomTagOption; } set { this.CustomTagOption = new Option<string>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  FillVolume: ").Append(FillVolume).Append("\n");
            sb.Append("  UpdateTimestamp: ").Append(UpdateTimestamp).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  FilledPrice: ").Append(FilledPrice).Append("\n");
            sb.Append("  CustomTag: ").Append(CustomTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="OrderModel" />
    /// </summary>
    public class OrderModelJsonConverter : JsonConverter<OrderModel>
    {
        /// <summary>
        /// The format to use to serialize CreationTimestamp
        /// </summary>
        public static string CreationTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// The format to use to serialize UpdateTimestamp
        /// </summary>
        public static string UpdateTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// Deserializes json to <see cref="OrderModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OrderModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<long?> id = default;
            Option<int?> accountId = default;
            Option<string> contractId = default;
            Option<string> symbolId = default;
            Option<DateTime?> creationTimestamp = default;
            Option<OrderStatus?> status = default;
            Option<OrderType?> type = default;
            Option<OrderSide?> side = default;
            Option<int?> size = default;
            Option<int?> fillVolume = default;
            Option<DateTime?> updateTimestamp = default;
            Option<decimal?> limitPrice = default;
            Option<decimal?> stopPrice = default;
            Option<decimal?> filledPrice = default;
            Option<string> customTag = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contractId":
                            contractId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "symbolId":
                            symbolId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "creationTimestamp":
                            creationTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<OrderStatus?>(OrderStatusValueConverter.FromStringOrDefault(statusRawValue));
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<OrderType?>(OrderTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "side":
                            string sideRawValue = utf8JsonReader.GetString();
                            if (sideRawValue != null)
                                side = new Option<OrderSide?>(OrderSideValueConverter.FromStringOrDefault(sideRawValue));
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "fillVolume":
                            fillVolume = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "updateTimestamp":
                            updateTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "limitPrice":
                            limitPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "stopPrice":
                            stopPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "filledPrice":
                            filledPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "customTag":
                            customTag = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!id.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(id));
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(accountId));
            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(contractId));
            if (!symbolId.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(symbolId));
            if (!creationTimestamp.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(creationTimestamp));
            if (!status.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(status));
            if (!type.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(type));
            if (!side.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(side));
            if (!size.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(size));
            if (!fillVolume.IsSet)
                throw new ArgumentException("Property is required for class OrderModel.", nameof(fillVolume));
            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OrderModel.");
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class OrderModel.");
            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class OrderModel.");
            if (symbolId.IsSet && symbolId.Value == null)
                throw new ArgumentNullException(nameof(symbolId), "Property is not nullable for class OrderModel.");
            if (creationTimestamp.IsSet && creationTimestamp.Value == null)
                throw new ArgumentNullException(nameof(creationTimestamp), "Property is not nullable for class OrderModel.");
            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class OrderModel.");
            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class OrderModel.");
            if (side.IsSet && side.Value == null)
                throw new ArgumentNullException(nameof(side), "Property is not nullable for class OrderModel.");
            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class OrderModel.");
            if (fillVolume.IsSet && fillVolume.Value == null)
                throw new ArgumentNullException(nameof(fillVolume), "Property is not nullable for class OrderModel.");
            if (updateTimestamp.IsSet && updateTimestamp.Value == null)
                throw new ArgumentNullException(nameof(updateTimestamp), "Property is not nullable for class OrderModel.");
            if (limitPrice.IsSet && limitPrice.Value == null)
                throw new ArgumentNullException(nameof(limitPrice), "Property is not nullable for class OrderModel.");
            if (stopPrice.IsSet && stopPrice.Value == null)
                throw new ArgumentNullException(nameof(stopPrice), "Property is not nullable for class OrderModel.");
            if (filledPrice.IsSet && filledPrice.Value == null)
                throw new ArgumentNullException(nameof(filledPrice), "Property is not nullable for class OrderModel.");
            if (customTag.IsSet && customTag.Value == null)
                throw new ArgumentNullException(nameof(customTag), "Property is not nullable for class OrderModel.");
            return new OrderModel(id.Value.Value, accountId.Value.Value, contractId.Value, symbolId.Value, creationTimestamp.Value.Value, status.Value.Value, type.Value.Value, side.Value.Value, size.Value.Value, fillVolume.Value.Value, updateTimestamp, limitPrice, stopPrice, filledPrice, customTag);
        }
        /// <summary>
        /// Serializes a <see cref="OrderModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="orderModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OrderModel orderModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, orderModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="OrderModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="orderModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OrderModel orderModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (orderModel.ContractId == null)
                throw new ArgumentNullException(nameof(orderModel.ContractId), "Property is required for class OrderModel.");
            if (orderModel.SymbolId == null)
                throw new ArgumentNullException(nameof(orderModel.SymbolId), "Property is required for class OrderModel.");
            if (orderModel.CustomTagOption.IsSet && orderModel.CustomTag == null)
                throw new ArgumentNullException(nameof(orderModel.CustomTag), "Property is required for class OrderModel.");
            writer.WriteNumber("id", orderModel.Id);
            writer.WriteNumber("accountId", orderModel.AccountId);
            writer.WriteString("contractId", orderModel.ContractId);
            writer.WriteString("symbolId", orderModel.SymbolId);
            writer.WriteString("creationTimestamp", orderModel.CreationTimestamp.ToString(CreationTimestampFormat));
            var statusRawValue = OrderStatusValueConverter.ToJsonValue(orderModel.Status);
            writer.WriteNumber("status", statusRawValue);
            var typeRawValue = OrderTypeValueConverter.ToJsonValue(orderModel.Type);
            writer.WriteNumber("type", typeRawValue);
            var sideRawValue = OrderSideValueConverter.ToJsonValue(orderModel.Side);
            writer.WriteNumber("side", sideRawValue);
            writer.WriteNumber("size", orderModel.Size);
            writer.WriteNumber("fillVolume", orderModel.FillVolume);
            if (orderModel.UpdateTimestampOption.IsSet)
                writer.WriteString("updateTimestamp", orderModel.UpdateTimestampOption.Value.Value.ToString(UpdateTimestampFormat));
            if (orderModel.LimitPriceOption.IsSet)
                writer.WriteNumber("limitPrice", orderModel.LimitPriceOption.Value.Value);
            if (orderModel.StopPriceOption.IsSet)
                writer.WriteNumber("stopPrice", orderModel.StopPriceOption.Value.Value);
            if (orderModel.FilledPriceOption.IsSet)
                writer.WriteNumber("filledPrice", orderModel.FilledPriceOption.Value.Value);
            if (orderModel.CustomTagOption.IsSet)
                writer.WriteString("customTag", orderModel.CustomTag);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Bid 1 &#x3D; Ask
    /// </summary>
    /// <value>0 &#x3D; Bid 1 &#x3D; Ask</value>
    public enum OrderSide
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1
    }
    /// <summary>
    /// Converts <see cref="OrderSide"/> to and from the JSON value
    /// </summary>
    public static class OrderSideValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="OrderSide"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OrderSide FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return OrderSide.NUMBER_0;
            if (value.Equals((1).ToString()))
                return OrderSide.NUMBER_1;
            throw new NotImplementedException($"Could not convert value to type OrderSide: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="OrderSide"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OrderSide? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return OrderSide.NUMBER_0;
            if (value.Equals((1).ToString()))
                return OrderSide.NUMBER_1;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="OrderSide"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(OrderSide value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="OrderSide"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class OrderSideJsonConverter : JsonConverter<OrderSide>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OrderSide Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            OrderSide? result = rawValue == null
                ? null
                : OrderSideValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the OrderSide to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="orderSide"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OrderSide orderSide, JsonSerializerOptions options)
        {
            writer.WriteStringValue(orderSide.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="OrderSide"/>
    /// </summary>
    public class OrderSideNullableJsonConverter : JsonConverter<OrderSide?>
    {
        /// <summary>
        /// Returns a OrderSide from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OrderSide? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            OrderSide? result = rawValue == null
                ? null
                : OrderSideValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="orderSide"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OrderSide? orderSide, JsonSerializerOptions options)
        {
            writer.WriteStringValue(orderSide?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; None 1 &#x3D; Open 2 &#x3D; Filled 3 &#x3D; Cancelled 4 &#x3D; Expired 5 &#x3D; Rejected 6 &#x3D; Pending
    /// </summary>
    /// <value>0 &#x3D; None 1 &#x3D; Open 2 &#x3D; Filled 3 &#x3D; Cancelled 4 &#x3D; Expired 5 &#x3D; Rejected 6 &#x3D; Pending</value>
    public enum OrderStatus
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4,
        /// <summary>
        /// Enum NUMBER_5 for value: 5
        /// </summary>
        NUMBER_5 = 5,
        /// <summary>
        /// Enum NUMBER_6 for value: 6
        /// </summary>
        NUMBER_6 = 6
    }
    /// <summary>
    /// Converts <see cref="OrderStatus"/> to and from the JSON value
    /// </summary>
    public static class OrderStatusValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="OrderStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OrderStatus FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return OrderStatus.NUMBER_0;
            if (value.Equals((1).ToString()))
                return OrderStatus.NUMBER_1;
            if (value.Equals((2).ToString()))
                return OrderStatus.NUMBER_2;
            if (value.Equals((3).ToString()))
                return OrderStatus.NUMBER_3;
            if (value.Equals((4).ToString()))
                return OrderStatus.NUMBER_4;
            if (value.Equals((5).ToString()))
                return OrderStatus.NUMBER_5;
            if (value.Equals((6).ToString()))
                return OrderStatus.NUMBER_6;
            throw new NotImplementedException($"Could not convert value to type OrderStatus: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="OrderStatus"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OrderStatus? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return OrderStatus.NUMBER_0;
            if (value.Equals((1).ToString()))
                return OrderStatus.NUMBER_1;
            if (value.Equals((2).ToString()))
                return OrderStatus.NUMBER_2;
            if (value.Equals((3).ToString()))
                return OrderStatus.NUMBER_3;
            if (value.Equals((4).ToString()))
                return OrderStatus.NUMBER_4;
            if (value.Equals((5).ToString()))
                return OrderStatus.NUMBER_5;
            if (value.Equals((6).ToString()))
                return OrderStatus.NUMBER_6;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="OrderStatus"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(OrderStatus value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="OrderStatus"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class OrderStatusJsonConverter : JsonConverter<OrderStatus>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OrderStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            OrderStatus? result = rawValue == null
                ? null
                : OrderStatusValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the OrderStatus to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="orderStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OrderStatus orderStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(orderStatus.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="OrderStatus"/>
    /// </summary>
    public class OrderStatusNullableJsonConverter : JsonConverter<OrderStatus?>
    {
        /// <summary>
        /// Returns a OrderStatus from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OrderStatus? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            OrderStatus? result = rawValue == null
                ? null
                : OrderStatusValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="orderStatus"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OrderStatus? orderStatus, JsonSerializerOptions options)
        {
            writer.WriteStringValue(orderStatus?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Unknown 1 &#x3D; Limit 2 &#x3D; Market 3 &#x3D; StopLimit 4 &#x3D; Stop 5 &#x3D; TrailingStop 6 &#x3D; JoinBid 7 &#x3D; JoinAsk
    /// </summary>
    /// <value>0 &#x3D; Unknown 1 &#x3D; Limit 2 &#x3D; Market 3 &#x3D; StopLimit 4 &#x3D; Stop 5 &#x3D; TrailingStop 6 &#x3D; JoinBid 7 &#x3D; JoinAsk</value>
    public enum OrderType
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4,
        /// <summary>
        /// Enum NUMBER_5 for value: 5
        /// </summary>
        NUMBER_5 = 5,
        /// <summary>
        /// Enum NUMBER_6 for value: 6
        /// </summary>
        NUMBER_6 = 6,
        /// <summary>
        /// Enum NUMBER_7 for value: 7
        /// </summary>
        NUMBER_7 = 7
    }
    /// <summary>
    /// Converts <see cref="OrderType"/> to and from the JSON value
    /// </summary>
    public static class OrderTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="OrderType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OrderType FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return OrderType.NUMBER_0;
            if (value.Equals((1).ToString()))
                return OrderType.NUMBER_1;
            if (value.Equals((2).ToString()))
                return OrderType.NUMBER_2;
            if (value.Equals((3).ToString()))
                return OrderType.NUMBER_3;
            if (value.Equals((4).ToString()))
                return OrderType.NUMBER_4;
            if (value.Equals((5).ToString()))
                return OrderType.NUMBER_5;
            if (value.Equals((6).ToString()))
                return OrderType.NUMBER_6;
            if (value.Equals((7).ToString()))
                return OrderType.NUMBER_7;
            throw new NotImplementedException($"Could not convert value to type OrderType: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="OrderType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OrderType? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return OrderType.NUMBER_0;
            if (value.Equals((1).ToString()))
                return OrderType.NUMBER_1;
            if (value.Equals((2).ToString()))
                return OrderType.NUMBER_2;
            if (value.Equals((3).ToString()))
                return OrderType.NUMBER_3;
            if (value.Equals((4).ToString()))
                return OrderType.NUMBER_4;
            if (value.Equals((5).ToString()))
                return OrderType.NUMBER_5;
            if (value.Equals((6).ToString()))
                return OrderType.NUMBER_6;
            if (value.Equals((7).ToString()))
                return OrderType.NUMBER_7;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="OrderType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(OrderType value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="OrderType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class OrderTypeJsonConverter : JsonConverter<OrderType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OrderType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            OrderType? result = rawValue == null
                ? null
                : OrderTypeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the OrderType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="orderType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OrderType orderType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(orderType.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="OrderType"/>
    /// </summary>
    public class OrderTypeNullableJsonConverter : JsonConverter<OrderType?>
    {
        /// <summary>
        /// Returns a OrderType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OrderType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            OrderType? result = rawValue == null
                ? null
                : OrderTypeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="orderType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OrderType? orderType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(orderType?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// PartialCloseContractPositionRequest
    /// </summary>
    public partial class PartialCloseContractPositionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartialCloseContractPositionRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        /// <param name="contractId">contractId</param>
        /// <param name="size">size</param>
        [JsonConstructor]
        public PartialCloseContractPositionRequest(int accountId, string contractId, int size)
        {
            AccountId = accountId;
            ContractId = contractId;
            Size = size;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }
        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartialCloseContractPositionRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PartialCloseContractPositionRequest" />
    /// </summary>
    public class PartialCloseContractPositionRequestJsonConverter : JsonConverter<PartialCloseContractPositionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PartialCloseContractPositionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PartialCloseContractPositionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> accountId = default;
            Option<string> contractId = default;
            Option<int?> size = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contractId":
                            contractId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class PartialCloseContractPositionRequest.", nameof(accountId));
            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class PartialCloseContractPositionRequest.", nameof(contractId));
            if (!size.IsSet)
                throw new ArgumentException("Property is required for class PartialCloseContractPositionRequest.", nameof(size));
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class PartialCloseContractPositionRequest.");
            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class PartialCloseContractPositionRequest.");
            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class PartialCloseContractPositionRequest.");
            return new PartialCloseContractPositionRequest(accountId.Value.Value, contractId.Value, size.Value.Value);
        }
        /// <summary>
        /// Serializes a <see cref="PartialCloseContractPositionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="partialCloseContractPositionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PartialCloseContractPositionRequest partialCloseContractPositionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, partialCloseContractPositionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="PartialCloseContractPositionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="partialCloseContractPositionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PartialCloseContractPositionRequest partialCloseContractPositionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (partialCloseContractPositionRequest.ContractId == null)
                throw new ArgumentNullException(nameof(partialCloseContractPositionRequest.ContractId), "Property is required for class PartialCloseContractPositionRequest.");
            writer.WriteNumber("accountId", partialCloseContractPositionRequest.AccountId);
            writer.WriteString("contractId", partialCloseContractPositionRequest.ContractId);
            writer.WriteNumber("size", partialCloseContractPositionRequest.Size);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; AccountNotFound 2 &#x3D; PositionNotFound 3 &#x3D; ContractNotFound 4 &#x3D; ContractNotActive 5 &#x3D; InvalidCloseSize 6 &#x3D; OrderRejected 7 &#x3D; OrderPending 8 &#x3D; UnknownError 9 &#x3D; AccountRejected
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; AccountNotFound 2 &#x3D; PositionNotFound 3 &#x3D; ContractNotFound 4 &#x3D; ContractNotActive 5 &#x3D; InvalidCloseSize 6 &#x3D; OrderRejected 7 &#x3D; OrderPending 8 &#x3D; UnknownError 9 &#x3D; AccountRejected</value>
    public enum PartialClosePositionErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4,
        /// <summary>
        /// Enum NUMBER_5 for value: 5
        /// </summary>
        NUMBER_5 = 5,
        /// <summary>
        /// Enum NUMBER_6 for value: 6
        /// </summary>
        NUMBER_6 = 6,
        /// <summary>
        /// Enum NUMBER_7 for value: 7
        /// </summary>
        NUMBER_7 = 7,
        /// <summary>
        /// Enum NUMBER_8 for value: 8
        /// </summary>
        NUMBER_8 = 8,
        /// <summary>
        /// Enum NUMBER_9 for value: 9
        /// </summary>
        NUMBER_9 = 9
    }
    /// <summary>
    /// Converts <see cref="PartialClosePositionErrorCode"/> to and from the JSON value
    /// </summary>
    public static class PartialClosePositionErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PartialClosePositionErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PartialClosePositionErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return PartialClosePositionErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return PartialClosePositionErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return PartialClosePositionErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return PartialClosePositionErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return PartialClosePositionErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return PartialClosePositionErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return PartialClosePositionErrorCode.NUMBER_6;
            if (value.Equals((7).ToString()))
                return PartialClosePositionErrorCode.NUMBER_7;
            if (value.Equals((8).ToString()))
                return PartialClosePositionErrorCode.NUMBER_8;
            if (value.Equals((9).ToString()))
                return PartialClosePositionErrorCode.NUMBER_9;
            throw new NotImplementedException($"Could not convert value to type PartialClosePositionErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="PartialClosePositionErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PartialClosePositionErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return PartialClosePositionErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return PartialClosePositionErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return PartialClosePositionErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return PartialClosePositionErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return PartialClosePositionErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return PartialClosePositionErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return PartialClosePositionErrorCode.NUMBER_6;
            if (value.Equals((7).ToString()))
                return PartialClosePositionErrorCode.NUMBER_7;
            if (value.Equals((8).ToString()))
                return PartialClosePositionErrorCode.NUMBER_8;
            if (value.Equals((9).ToString()))
                return PartialClosePositionErrorCode.NUMBER_9;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="PartialClosePositionErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(PartialClosePositionErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PartialClosePositionErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PartialClosePositionErrorCodeJsonConverter : JsonConverter<PartialClosePositionErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PartialClosePositionErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            PartialClosePositionErrorCode? result = rawValue == null
                ? null
                : PartialClosePositionErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the PartialClosePositionErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="partialClosePositionErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PartialClosePositionErrorCode partialClosePositionErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(partialClosePositionErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PartialClosePositionErrorCode"/>
    /// </summary>
    public class PartialClosePositionErrorCodeNullableJsonConverter : JsonConverter<PartialClosePositionErrorCode?>
    {
        /// <summary>
        /// Returns a PartialClosePositionErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PartialClosePositionErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            PartialClosePositionErrorCode? result = rawValue == null
                ? null
                : PartialClosePositionErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="partialClosePositionErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PartialClosePositionErrorCode? partialClosePositionErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(partialClosePositionErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// PartialClosePositionResponse
    /// </summary>
    public partial class PartialClosePositionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartialClosePositionResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        [JsonConstructor]
        public PartialClosePositionResponse(bool success, PartialClosePositionErrorCode errorCode, Option<string> errorMessage = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public PartialClosePositionErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PartialClosePositionResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PartialClosePositionResponse" />
    /// </summary>
    public class PartialClosePositionResponseJsonConverter : JsonConverter<PartialClosePositionResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="PartialClosePositionResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PartialClosePositionResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<PartialClosePositionErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<PartialClosePositionErrorCode?>(PartialClosePositionErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class PartialClosePositionResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class PartialClosePositionResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class PartialClosePositionResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class PartialClosePositionResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class PartialClosePositionResponse.");
            return new PartialClosePositionResponse(success.Value.Value, errorCode.Value.Value, errorMessage);
        }
        /// <summary>
        /// Serializes a <see cref="PartialClosePositionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="partialClosePositionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PartialClosePositionResponse partialClosePositionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, partialClosePositionResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="PartialClosePositionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="partialClosePositionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PartialClosePositionResponse partialClosePositionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (partialClosePositionResponse.ErrorMessageOption.IsSet && partialClosePositionResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(partialClosePositionResponse.ErrorMessage), "Property is required for class PartialClosePositionResponse.");
            writer.WriteBoolean("success", partialClosePositionResponse.Success);
            var errorCodeRawValue = PartialClosePositionErrorCodeValueConverter.ToJsonValue(partialClosePositionResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (partialClosePositionResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", partialClosePositionResponse.ErrorMessage);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; AccountNotFound 2 &#x3D; OrderRejected 3 &#x3D; InsufficientFunds 4 &#x3D; AccountViolation 5 &#x3D; OutsideTradingHours 6 &#x3D; OrderPending 7 &#x3D; UnknownError 8 &#x3D; ContractNotFound 9 &#x3D; ContractNotActive 10 &#x3D; AccountRejected
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; AccountNotFound 2 &#x3D; OrderRejected 3 &#x3D; InsufficientFunds 4 &#x3D; AccountViolation 5 &#x3D; OutsideTradingHours 6 &#x3D; OrderPending 7 &#x3D; UnknownError 8 &#x3D; ContractNotFound 9 &#x3D; ContractNotActive 10 &#x3D; AccountRejected</value>
    public enum PlaceOrderErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4,
        /// <summary>
        /// Enum NUMBER_5 for value: 5
        /// </summary>
        NUMBER_5 = 5,
        /// <summary>
        /// Enum NUMBER_6 for value: 6
        /// </summary>
        NUMBER_6 = 6,
        /// <summary>
        /// Enum NUMBER_7 for value: 7
        /// </summary>
        NUMBER_7 = 7,
        /// <summary>
        /// Enum NUMBER_8 for value: 8
        /// </summary>
        NUMBER_8 = 8,
        /// <summary>
        /// Enum NUMBER_9 for value: 9
        /// </summary>
        NUMBER_9 = 9,
        /// <summary>
        /// Enum NUMBER_10 for value: 10
        /// </summary>
        NUMBER_10 = 10
    }
    /// <summary>
    /// Converts <see cref="PlaceOrderErrorCode"/> to and from the JSON value
    /// </summary>
    public static class PlaceOrderErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PlaceOrderErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlaceOrderErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return PlaceOrderErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return PlaceOrderErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return PlaceOrderErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return PlaceOrderErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return PlaceOrderErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return PlaceOrderErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return PlaceOrderErrorCode.NUMBER_6;
            if (value.Equals((7).ToString()))
                return PlaceOrderErrorCode.NUMBER_7;
            if (value.Equals((8).ToString()))
                return PlaceOrderErrorCode.NUMBER_8;
            if (value.Equals((9).ToString()))
                return PlaceOrderErrorCode.NUMBER_9;
            if (value.Equals((10).ToString()))
                return PlaceOrderErrorCode.NUMBER_10;
            throw new NotImplementedException($"Could not convert value to type PlaceOrderErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="PlaceOrderErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PlaceOrderErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return PlaceOrderErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return PlaceOrderErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return PlaceOrderErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return PlaceOrderErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return PlaceOrderErrorCode.NUMBER_4;
            if (value.Equals((5).ToString()))
                return PlaceOrderErrorCode.NUMBER_5;
            if (value.Equals((6).ToString()))
                return PlaceOrderErrorCode.NUMBER_6;
            if (value.Equals((7).ToString()))
                return PlaceOrderErrorCode.NUMBER_7;
            if (value.Equals((8).ToString()))
                return PlaceOrderErrorCode.NUMBER_8;
            if (value.Equals((9).ToString()))
                return PlaceOrderErrorCode.NUMBER_9;
            if (value.Equals((10).ToString()))
                return PlaceOrderErrorCode.NUMBER_10;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="PlaceOrderErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(PlaceOrderErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PlaceOrderErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PlaceOrderErrorCodeJsonConverter : JsonConverter<PlaceOrderErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PlaceOrderErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            PlaceOrderErrorCode? result = rawValue == null
                ? null
                : PlaceOrderErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the PlaceOrderErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placeOrderErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PlaceOrderErrorCode placeOrderErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(placeOrderErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PlaceOrderErrorCode"/>
    /// </summary>
    public class PlaceOrderErrorCodeNullableJsonConverter : JsonConverter<PlaceOrderErrorCode?>
    {
        /// <summary>
        /// Returns a PlaceOrderErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PlaceOrderErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            PlaceOrderErrorCode? result = rawValue == null
                ? null
                : PlaceOrderErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placeOrderErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PlaceOrderErrorCode? placeOrderErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(placeOrderErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// PlaceOrderRequest
    /// </summary>
    public partial class PlaceOrderRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaceOrderRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        /// <param name="contractId">contractId</param>
        /// <param name="type">type</param>
        /// <param name="side">side</param>
        /// <param name="size">size</param>
        /// <param name="limitPrice">limitPrice</param>
        /// <param name="stopPrice">stopPrice</param>
        /// <param name="trailPrice">trailPrice</param>
        /// <param name="customTag">customTag</param>
        /// <param name="linkedOrderId">linkedOrderId</param>
        [JsonConstructor]
        public PlaceOrderRequest(int accountId, string contractId, OrderType type, OrderSide side, int size, Option<decimal?> limitPrice = default, Option<decimal?> stopPrice = default, Option<decimal?> trailPrice = default, Option<string> customTag = default, Option<long?> linkedOrderId = default)
        {
            AccountId = accountId;
            ContractId = contractId;
            Type = type;
            Side = side;
            Size = size;
            LimitPriceOption = limitPrice;
            StopPriceOption = stopPrice;
            TrailPriceOption = trailPrice;
            CustomTagOption = customTag;
            LinkedOrderIdOption = linkedOrderId;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public OrderType Type { get; set; }
        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [JsonPropertyName("side")]
        public OrderSide Side { get; set; }
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }
        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }
        /// <summary>
        /// Used to track the state of LimitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LimitPriceOption { get; private set; }
        /// <summary>
        /// Gets or Sets LimitPrice
        /// </summary>
        [JsonPropertyName("limitPrice")]
        public decimal? LimitPrice { get { return this.LimitPriceOption; } set { this.LimitPriceOption = new Option<decimal?>(value); } }
        /// <summary>
        /// Used to track the state of StopPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StopPriceOption { get; private set; }
        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [JsonPropertyName("stopPrice")]
        public decimal? StopPrice { get { return this.StopPriceOption; } set { this.StopPriceOption = new Option<decimal?>(value); } }
        /// <summary>
        /// Used to track the state of TrailPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TrailPriceOption { get; private set; }
        /// <summary>
        /// Gets or Sets TrailPrice
        /// </summary>
        [JsonPropertyName("trailPrice")]
        public decimal? TrailPrice { get { return this.TrailPriceOption; } set { this.TrailPriceOption = new Option<decimal?>(value); } }
        /// <summary>
        /// Used to track the state of CustomTag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CustomTagOption { get; private set; }
        /// <summary>
        /// Gets or Sets CustomTag
        /// </summary>
        [JsonPropertyName("customTag")]
        public string CustomTag { get { return this.CustomTagOption; } set { this.CustomTagOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of LinkedOrderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LinkedOrderIdOption { get; private set; }
        /// <summary>
        /// Gets or Sets LinkedOrderId
        /// </summary>
        [JsonPropertyName("linkedOrderId")]
        public long? LinkedOrderId { get { return this.LinkedOrderIdOption; } set { this.LinkedOrderIdOption = new Option<long?>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlaceOrderRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  TrailPrice: ").Append(TrailPrice).Append("\n");
            sb.Append("  CustomTag: ").Append(CustomTag).Append("\n");
            sb.Append("  LinkedOrderId: ").Append(LinkedOrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PlaceOrderRequest" />
    /// </summary>
    public class PlaceOrderRequestJsonConverter : JsonConverter<PlaceOrderRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlaceOrderRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlaceOrderRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> accountId = default;
            Option<string> contractId = default;
            Option<OrderType?> type = default;
            Option<OrderSide?> side = default;
            Option<int?> size = default;
            Option<decimal?> limitPrice = default;
            Option<decimal?> stopPrice = default;
            Option<decimal?> trailPrice = default;
            Option<string> customTag = default;
            Option<long?> linkedOrderId = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contractId":
                            contractId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<OrderType?>(OrderTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "side":
                            string sideRawValue = utf8JsonReader.GetString();
                            if (sideRawValue != null)
                                side = new Option<OrderSide?>(OrderSideValueConverter.FromStringOrDefault(sideRawValue));
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "limitPrice":
                            limitPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "stopPrice":
                            stopPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "trailPrice":
                            trailPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "customTag":
                            customTag = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "linkedOrderId":
                            linkedOrderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderRequest.", nameof(accountId));
            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderRequest.", nameof(contractId));
            if (!type.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderRequest.", nameof(type));
            if (!side.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderRequest.", nameof(side));
            if (!size.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderRequest.", nameof(size));
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class PlaceOrderRequest.");
            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class PlaceOrderRequest.");
            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PlaceOrderRequest.");
            if (side.IsSet && side.Value == null)
                throw new ArgumentNullException(nameof(side), "Property is not nullable for class PlaceOrderRequest.");
            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class PlaceOrderRequest.");
            if (limitPrice.IsSet && limitPrice.Value == null)
                throw new ArgumentNullException(nameof(limitPrice), "Property is not nullable for class PlaceOrderRequest.");
            if (stopPrice.IsSet && stopPrice.Value == null)
                throw new ArgumentNullException(nameof(stopPrice), "Property is not nullable for class PlaceOrderRequest.");
            if (trailPrice.IsSet && trailPrice.Value == null)
                throw new ArgumentNullException(nameof(trailPrice), "Property is not nullable for class PlaceOrderRequest.");
            if (customTag.IsSet && customTag.Value == null)
                throw new ArgumentNullException(nameof(customTag), "Property is not nullable for class PlaceOrderRequest.");
            if (linkedOrderId.IsSet && linkedOrderId.Value == null)
                throw new ArgumentNullException(nameof(linkedOrderId), "Property is not nullable for class PlaceOrderRequest.");
            return new PlaceOrderRequest(accountId.Value.Value, contractId.Value, type.Value.Value, side.Value.Value, size.Value.Value, limitPrice, stopPrice, trailPrice, customTag, linkedOrderId);
        }
        /// <summary>
        /// Serializes a <see cref="PlaceOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placeOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlaceOrderRequest placeOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, placeOrderRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="PlaceOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placeOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlaceOrderRequest placeOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (placeOrderRequest.ContractId == null)
                throw new ArgumentNullException(nameof(placeOrderRequest.ContractId), "Property is required for class PlaceOrderRequest.");
            if (placeOrderRequest.CustomTagOption.IsSet && placeOrderRequest.CustomTag == null)
                throw new ArgumentNullException(nameof(placeOrderRequest.CustomTag), "Property is required for class PlaceOrderRequest.");
            writer.WriteNumber("accountId", placeOrderRequest.AccountId);
            writer.WriteString("contractId", placeOrderRequest.ContractId);
            var typeRawValue = OrderTypeValueConverter.ToJsonValue(placeOrderRequest.Type);
            writer.WriteNumber("type", typeRawValue);
            var sideRawValue = OrderSideValueConverter.ToJsonValue(placeOrderRequest.Side);
            writer.WriteNumber("side", sideRawValue);
            writer.WriteNumber("size", placeOrderRequest.Size);
            if (placeOrderRequest.LimitPriceOption.IsSet)
                writer.WriteNumber("limitPrice", placeOrderRequest.LimitPriceOption.Value.Value);
            if (placeOrderRequest.StopPriceOption.IsSet)
                writer.WriteNumber("stopPrice", placeOrderRequest.StopPriceOption.Value.Value);
            if (placeOrderRequest.TrailPriceOption.IsSet)
                writer.WriteNumber("trailPrice", placeOrderRequest.TrailPriceOption.Value.Value);
            if (placeOrderRequest.CustomTagOption.IsSet)
                writer.WriteString("customTag", placeOrderRequest.CustomTag);
            if (placeOrderRequest.LinkedOrderIdOption.IsSet)
                writer.WriteNumber("linkedOrderId", placeOrderRequest.LinkedOrderIdOption.Value.Value);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// PlaceOrderResponse
    /// </summary>
    public partial class PlaceOrderResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlaceOrderResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="orderId">orderId</param>
        [JsonConstructor]
        public PlaceOrderResponse(bool success, PlaceOrderErrorCode errorCode, Option<string> errorMessage = default, Option<long?> orderId = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            OrderIdOption = orderId;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public PlaceOrderErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of OrderId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OrderIdOption { get; private set; }
        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public long? OrderId { get { return this.OrderIdOption; } set { this.OrderIdOption = new Option<long?>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlaceOrderResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PlaceOrderResponse" />
    /// </summary>
    public class PlaceOrderResponseJsonConverter : JsonConverter<PlaceOrderResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlaceOrderResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlaceOrderResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<PlaceOrderErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<long?> orderId = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<PlaceOrderErrorCode?>(PlaceOrderErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "orderId":
                            orderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class PlaceOrderResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class PlaceOrderResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class PlaceOrderResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class PlaceOrderResponse.");
            if (orderId.IsSet && orderId.Value == null)
                throw new ArgumentNullException(nameof(orderId), "Property is not nullable for class PlaceOrderResponse.");
            return new PlaceOrderResponse(success.Value.Value, errorCode.Value.Value, errorMessage, orderId);
        }
        /// <summary>
        /// Serializes a <see cref="PlaceOrderResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placeOrderResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlaceOrderResponse placeOrderResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, placeOrderResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="PlaceOrderResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="placeOrderResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlaceOrderResponse placeOrderResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (placeOrderResponse.ErrorMessageOption.IsSet && placeOrderResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(placeOrderResponse.ErrorMessage), "Property is required for class PlaceOrderResponse.");
            writer.WriteBoolean("success", placeOrderResponse.Success);
            var errorCodeRawValue = PlaceOrderErrorCodeValueConverter.ToJsonValue(placeOrderResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (placeOrderResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", placeOrderResponse.ErrorMessage);
            if (placeOrderResponse.OrderIdOption.IsSet)
                writer.WriteNumber("orderId", placeOrderResponse.OrderIdOption.Value.Value);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// PositionModel
    /// </summary>
    public partial class PositionModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PositionModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="accountId">accountId</param>
        /// <param name="contractId">contractId</param>
        /// <param name="creationTimestamp">creationTimestamp</param>
        /// <param name="type">type</param>
        /// <param name="size">size</param>
        /// <param name="averagePrice">averagePrice</param>
        [JsonConstructor]
        public PositionModel(int id, int accountId, string contractId, DateTime creationTimestamp, PositionType type, int size, decimal averagePrice)
        {
            Id = id;
            AccountId = accountId;
            ContractId = contractId;
            CreationTimestamp = creationTimestamp;
            Type = type;
            Size = size;
            AveragePrice = averagePrice;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public PositionType Type { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; set; }
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }
        /// <summary>
        /// Gets or Sets CreationTimestamp
        /// </summary>
        [JsonPropertyName("creationTimestamp")]
        public DateTime CreationTimestamp { get; set; }
        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }
        /// <summary>
        /// Gets or Sets AveragePrice
        /// </summary>
        [JsonPropertyName("averagePrice")]
        public decimal AveragePrice { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PositionModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PositionModel" />
    /// </summary>
    public class PositionModelJsonConverter : JsonConverter<PositionModel>
    {
        /// <summary>
        /// The format to use to serialize CreationTimestamp
        /// </summary>
        public static string CreationTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// Deserializes json to <see cref="PositionModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PositionModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> id = default;
            Option<int?> accountId = default;
            Option<string> contractId = default;
            Option<DateTime?> creationTimestamp = default;
            Option<PositionType?> type = default;
            Option<int?> size = default;
            Option<decimal?> averagePrice = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contractId":
                            contractId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "creationTimestamp":
                            creationTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PositionType?>(PositionTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "averagePrice":
                            averagePrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(id));
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(accountId));
            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(contractId));
            if (!creationTimestamp.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(creationTimestamp));
            if (!type.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(type));
            if (!size.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(size));
            if (!averagePrice.IsSet)
                throw new ArgumentException("Property is required for class PositionModel.", nameof(averagePrice));
            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PositionModel.");
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class PositionModel.");
            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class PositionModel.");
            if (creationTimestamp.IsSet && creationTimestamp.Value == null)
                throw new ArgumentNullException(nameof(creationTimestamp), "Property is not nullable for class PositionModel.");
            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PositionModel.");
            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class PositionModel.");
            if (averagePrice.IsSet && averagePrice.Value == null)
                throw new ArgumentNullException(nameof(averagePrice), "Property is not nullable for class PositionModel.");
            return new PositionModel(id.Value.Value, accountId.Value.Value, contractId.Value, creationTimestamp.Value.Value, type.Value.Value, size.Value.Value, averagePrice.Value.Value);
        }
        /// <summary>
        /// Serializes a <see cref="PositionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="positionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PositionModel positionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, positionModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="PositionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="positionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PositionModel positionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (positionModel.ContractId == null)
                throw new ArgumentNullException(nameof(positionModel.ContractId), "Property is required for class PositionModel.");
            writer.WriteNumber("id", positionModel.Id);
            writer.WriteNumber("accountId", positionModel.AccountId);
            writer.WriteString("contractId", positionModel.ContractId);
            writer.WriteString("creationTimestamp", positionModel.CreationTimestamp.ToString(CreationTimestampFormat));
            var typeRawValue = PositionTypeValueConverter.ToJsonValue(positionModel.Type);
            writer.WriteNumber("type", typeRawValue);
            writer.WriteNumber("size", positionModel.Size);
            writer.WriteNumber("averagePrice", positionModel.AveragePrice);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Undefined 1 &#x3D; Long 2 &#x3D; Short
    /// </summary>
    /// <value>0 &#x3D; Undefined 1 &#x3D; Long 2 &#x3D; Short</value>
    public enum PositionType
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2
    }
    /// <summary>
    /// Converts <see cref="PositionType"/> to and from the JSON value
    /// </summary>
    public static class PositionTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PositionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PositionType FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return PositionType.NUMBER_0;
            if (value.Equals((1).ToString()))
                return PositionType.NUMBER_1;
            if (value.Equals((2).ToString()))
                return PositionType.NUMBER_2;
            throw new NotImplementedException($"Could not convert value to type PositionType: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="PositionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PositionType? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return PositionType.NUMBER_0;
            if (value.Equals((1).ToString()))
                return PositionType.NUMBER_1;
            if (value.Equals((2).ToString()))
                return PositionType.NUMBER_2;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="PositionType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(PositionType value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PositionType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PositionTypeJsonConverter : JsonConverter<PositionType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PositionType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            PositionType? result = rawValue == null
                ? null
                : PositionTypeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the PositionType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="positionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PositionType positionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(positionType.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="PositionType"/>
    /// </summary>
    public class PositionTypeNullableJsonConverter : JsonConverter<PositionType?>
    {
        /// <summary>
        /// Returns a PositionType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PositionType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            PositionType? result = rawValue == null
                ? null
                : PositionTypeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="positionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PositionType? positionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(positionType?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; ContractNotFound 2 &#x3D; UnitInvalid 3 &#x3D; UnitNumberInvalid 4 &#x3D; LimitInvalid
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; ContractNotFound 2 &#x3D; UnitInvalid 3 &#x3D; UnitNumberInvalid 4 &#x3D; LimitInvalid</value>
    public enum RetrieveBarErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4
    }
    /// <summary>
    /// Converts <see cref="RetrieveBarErrorCode"/> to and from the JSON value
    /// </summary>
    public static class RetrieveBarErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="RetrieveBarErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RetrieveBarErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return RetrieveBarErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return RetrieveBarErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return RetrieveBarErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return RetrieveBarErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return RetrieveBarErrorCode.NUMBER_4;
            throw new NotImplementedException($"Could not convert value to type RetrieveBarErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="RetrieveBarErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RetrieveBarErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return RetrieveBarErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return RetrieveBarErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return RetrieveBarErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return RetrieveBarErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return RetrieveBarErrorCode.NUMBER_4;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="RetrieveBarErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(RetrieveBarErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="RetrieveBarErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class RetrieveBarErrorCodeJsonConverter : JsonConverter<RetrieveBarErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RetrieveBarErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            RetrieveBarErrorCode? result = rawValue == null
                ? null
                : RetrieveBarErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the RetrieveBarErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="retrieveBarErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RetrieveBarErrorCode retrieveBarErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(retrieveBarErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="RetrieveBarErrorCode"/>
    /// </summary>
    public class RetrieveBarErrorCodeNullableJsonConverter : JsonConverter<RetrieveBarErrorCode?>
    {
        /// <summary>
        /// Returns a RetrieveBarErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override RetrieveBarErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            RetrieveBarErrorCode? result = rawValue == null
                ? null
                : RetrieveBarErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="retrieveBarErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, RetrieveBarErrorCode? retrieveBarErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(retrieveBarErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// RetrieveBarRequest
    /// </summary>
    public partial class RetrieveBarRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveBarRequest" /> class.
        /// </summary>
        /// <param name="contractId">contractId</param>
        /// <param name="live">live</param>
        /// <param name="startTime">startTime</param>
        /// <param name="endTime">endTime</param>
        /// <param name="unit">unit</param>
        /// <param name="unitNumber">unitNumber</param>
        /// <param name="limit">limit</param>
        /// <param name="includePartialBar">includePartialBar</param>
        [JsonConstructor]
        public RetrieveBarRequest(string contractId, bool live, DateTime startTime, DateTime endTime, AggregateBarUnit unit, int unitNumber, int limit, bool includePartialBar)
        {
            ContractId = contractId;
            Live = live;
            StartTime = startTime;
            EndTime = endTime;
            Unit = unit;
            UnitNumber = unitNumber;
            Limit = limit;
            IncludePartialBar = includePartialBar;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [JsonPropertyName("unit")]
        public AggregateBarUnit Unit { get; set; }
        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }
        /// <summary>
        /// Gets or Sets Live
        /// </summary>
        [JsonPropertyName("live")]
        public bool Live { get; set; }
        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public DateTime StartTime { get; set; }
        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [JsonPropertyName("endTime")]
        public DateTime EndTime { get; set; }
        /// <summary>
        /// Gets or Sets UnitNumber
        /// </summary>
        [JsonPropertyName("unitNumber")]
        public int UnitNumber { get; set; }
        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [JsonPropertyName("limit")]
        public int Limit { get; set; }
        /// <summary>
        /// Gets or Sets IncludePartialBar
        /// </summary>
        [JsonPropertyName("includePartialBar")]
        public bool IncludePartialBar { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RetrieveBarRequest {\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Live: ").Append(Live).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  IncludePartialBar: ").Append(IncludePartialBar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="RetrieveBarRequest" />
    /// </summary>
    public class RetrieveBarRequestJsonConverter : JsonConverter<RetrieveBarRequest>
    {
        /// <summary>
        /// The format to use to serialize StartTime
        /// </summary>
        public static string StartTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// The format to use to serialize EndTime
        /// </summary>
        public static string EndTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// Deserializes json to <see cref="RetrieveBarRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RetrieveBarRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<string> contractId = default;
            Option<bool?> live = default;
            Option<DateTime?> startTime = default;
            Option<DateTime?> endTime = default;
            Option<AggregateBarUnit?> unit = default;
            Option<int?> unitNumber = default;
            Option<int?> limit = default;
            Option<bool?> includePartialBar = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "contractId":
                            contractId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "live":
                            live = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "startTime":
                            startTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endTime":
                            endTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "unit":
                            string unitRawValue = utf8JsonReader.GetString();
                            if (unitRawValue != null)
                                unit = new Option<AggregateBarUnit?>(AggregateBarUnitValueConverter.FromStringOrDefault(unitRawValue));
                            break;
                        case "unitNumber":
                            unitNumber = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "limit":
                            limit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "includePartialBar":
                            includePartialBar = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(contractId));
            if (!live.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(live));
            if (!startTime.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(startTime));
            if (!endTime.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(endTime));
            if (!unit.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(unit));
            if (!unitNumber.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(unitNumber));
            if (!limit.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(limit));
            if (!includePartialBar.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarRequest.", nameof(includePartialBar));
            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class RetrieveBarRequest.");
            if (live.IsSet && live.Value == null)
                throw new ArgumentNullException(nameof(live), "Property is not nullable for class RetrieveBarRequest.");
            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class RetrieveBarRequest.");
            if (endTime.IsSet && endTime.Value == null)
                throw new ArgumentNullException(nameof(endTime), "Property is not nullable for class RetrieveBarRequest.");
            if (unit.IsSet && unit.Value == null)
                throw new ArgumentNullException(nameof(unit), "Property is not nullable for class RetrieveBarRequest.");
            if (unitNumber.IsSet && unitNumber.Value == null)
                throw new ArgumentNullException(nameof(unitNumber), "Property is not nullable for class RetrieveBarRequest.");
            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class RetrieveBarRequest.");
            if (includePartialBar.IsSet && includePartialBar.Value == null)
                throw new ArgumentNullException(nameof(includePartialBar), "Property is not nullable for class RetrieveBarRequest.");
            return new RetrieveBarRequest(contractId.Value, live.Value.Value, startTime.Value.Value, endTime.Value.Value, unit.Value.Value, unitNumber.Value.Value, limit.Value.Value, includePartialBar.Value.Value);
        }
        /// <summary>
        /// Serializes a <see cref="RetrieveBarRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="retrieveBarRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RetrieveBarRequest retrieveBarRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, retrieveBarRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="RetrieveBarRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="retrieveBarRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RetrieveBarRequest retrieveBarRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (retrieveBarRequest.ContractId == null)
                throw new ArgumentNullException(nameof(retrieveBarRequest.ContractId), "Property is required for class RetrieveBarRequest.");
            writer.WriteString("contractId", retrieveBarRequest.ContractId);
            writer.WriteBoolean("live", retrieveBarRequest.Live);
            writer.WriteString("startTime", retrieveBarRequest.StartTime.ToString(StartTimeFormat));
            writer.WriteString("endTime", retrieveBarRequest.EndTime.ToString(EndTimeFormat));
            var unitRawValue = AggregateBarUnitValueConverter.ToJsonValue(retrieveBarRequest.Unit);
            writer.WriteNumber("unit", unitRawValue);
            writer.WriteNumber("unitNumber", retrieveBarRequest.UnitNumber);
            writer.WriteNumber("limit", retrieveBarRequest.Limit);
            writer.WriteBoolean("includePartialBar", retrieveBarRequest.IncludePartialBar);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// RetrieveBarResponse
    /// </summary>
    public partial class RetrieveBarResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveBarResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="bars">bars</param>
        [JsonConstructor]
        public RetrieveBarResponse(bool success, RetrieveBarErrorCode errorCode, Option<string> errorMessage = default, Option<List<AggregateBarModel>> bars = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            BarsOption = bars;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public RetrieveBarErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of Bars
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AggregateBarModel>> BarsOption { get; private set; }
        /// <summary>
        /// Gets or Sets Bars
        /// </summary>
        [JsonPropertyName("bars")]
        public List<AggregateBarModel> Bars { get { return this.BarsOption; } set { this.BarsOption = new Option<List<AggregateBarModel>>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RetrieveBarResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Bars: ").Append(Bars).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="RetrieveBarResponse" />
    /// </summary>
    public class RetrieveBarResponseJsonConverter : JsonConverter<RetrieveBarResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="RetrieveBarResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RetrieveBarResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<RetrieveBarErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<List<AggregateBarModel>> bars = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<RetrieveBarErrorCode?>(RetrieveBarErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "bars":
                            bars = new Option<List<AggregateBarModel>>(JsonSerializer.Deserialize<List<AggregateBarModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class RetrieveBarResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class RetrieveBarResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class RetrieveBarResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class RetrieveBarResponse.");
            if (bars.IsSet && bars.Value == null)
                throw new ArgumentNullException(nameof(bars), "Property is not nullable for class RetrieveBarResponse.");
            return new RetrieveBarResponse(success.Value.Value, errorCode.Value.Value, errorMessage, bars);
        }
        /// <summary>
        /// Serializes a <see cref="RetrieveBarResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="retrieveBarResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RetrieveBarResponse retrieveBarResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, retrieveBarResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="RetrieveBarResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="retrieveBarResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RetrieveBarResponse retrieveBarResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (retrieveBarResponse.ErrorMessageOption.IsSet && retrieveBarResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(retrieveBarResponse.ErrorMessage), "Property is required for class RetrieveBarResponse.");
            if (retrieveBarResponse.BarsOption.IsSet && retrieveBarResponse.Bars == null)
                throw new ArgumentNullException(nameof(retrieveBarResponse.Bars), "Property is required for class RetrieveBarResponse.");
            writer.WriteBoolean("success", retrieveBarResponse.Success);
            var errorCodeRawValue = RetrieveBarErrorCodeValueConverter.ToJsonValue(retrieveBarResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (retrieveBarResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", retrieveBarResponse.ErrorMessage);
            if (retrieveBarResponse.BarsOption.IsSet)
            {
                writer.WritePropertyName("bars");
                JsonSerializer.Serialize(writer, retrieveBarResponse.Bars, jsonSerializerOptions);
            }
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success
    /// </summary>
    /// <value>0 &#x3D; Success</value>
    public enum SearchAccountErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0
    }
    /// <summary>
    /// Converts <see cref="SearchAccountErrorCode"/> to and from the JSON value
    /// </summary>
    public static class SearchAccountErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SearchAccountErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchAccountErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchAccountErrorCode.NUMBER_0;
            throw new NotImplementedException($"Could not convert value to type SearchAccountErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="SearchAccountErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchAccountErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchAccountErrorCode.NUMBER_0;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="SearchAccountErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(SearchAccountErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchAccountErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SearchAccountErrorCodeJsonConverter : JsonConverter<SearchAccountErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchAccountErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchAccountErrorCode? result = rawValue == null
                ? null
                : SearchAccountErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the SearchAccountErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchAccountErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchAccountErrorCode searchAccountErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchAccountErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchAccountErrorCode"/>
    /// </summary>
    public class SearchAccountErrorCodeNullableJsonConverter : JsonConverter<SearchAccountErrorCode?>
    {
        /// <summary>
        /// Returns a SearchAccountErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchAccountErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchAccountErrorCode? result = rawValue == null
                ? null
                : SearchAccountErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchAccountErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchAccountErrorCode? searchAccountErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchAccountErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchAccountRequest
    /// </summary>
    public partial class SearchAccountRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchAccountRequest" /> class.
        /// </summary>
        /// <param name="onlyActiveAccounts">onlyActiveAccounts</param>
        [JsonConstructor]
        public SearchAccountRequest(bool onlyActiveAccounts)
        {
            OnlyActiveAccounts = onlyActiveAccounts;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets OnlyActiveAccounts
        /// </summary>
        [JsonPropertyName("onlyActiveAccounts")]
        public bool OnlyActiveAccounts { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchAccountRequest {\n");
            sb.Append("  OnlyActiveAccounts: ").Append(OnlyActiveAccounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchAccountRequest" />
    /// </summary>
    public class SearchAccountRequestJsonConverter : JsonConverter<SearchAccountRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchAccountRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchAccountRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> onlyActiveAccounts = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "onlyActiveAccounts":
                            onlyActiveAccounts = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!onlyActiveAccounts.IsSet)
                throw new ArgumentException("Property is required for class SearchAccountRequest.", nameof(onlyActiveAccounts));
            if (onlyActiveAccounts.IsSet && onlyActiveAccounts.Value == null)
                throw new ArgumentNullException(nameof(onlyActiveAccounts), "Property is not nullable for class SearchAccountRequest.");
            return new SearchAccountRequest(onlyActiveAccounts.Value.Value);
        }
        /// <summary>
        /// Serializes a <see cref="SearchAccountRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchAccountRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchAccountRequest searchAccountRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchAccountRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchAccountRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchAccountRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchAccountRequest searchAccountRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteBoolean("onlyActiveAccounts", searchAccountRequest.OnlyActiveAccounts);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchAccountResponse
    /// </summary>
    public partial class SearchAccountResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchAccountResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="accounts">accounts</param>
        [JsonConstructor]
        public SearchAccountResponse(bool success, SearchAccountErrorCode errorCode, Option<string> errorMessage = default, Option<List<TradingAccountModel>> accounts = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            AccountsOption = accounts;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public SearchAccountErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of Accounts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<TradingAccountModel>> AccountsOption { get; private set; }
        /// <summary>
        /// Gets or Sets Accounts
        /// </summary>
        [JsonPropertyName("accounts")]
        public List<TradingAccountModel> Accounts { get { return this.AccountsOption; } set { this.AccountsOption = new Option<List<TradingAccountModel>>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchAccountResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchAccountResponse" />
    /// </summary>
    public class SearchAccountResponseJsonConverter : JsonConverter<SearchAccountResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchAccountResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchAccountResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<SearchAccountErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<List<TradingAccountModel>> accounts = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<SearchAccountErrorCode?>(SearchAccountErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "accounts":
                            accounts = new Option<List<TradingAccountModel>>(JsonSerializer.Deserialize<List<TradingAccountModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class SearchAccountResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class SearchAccountResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class SearchAccountResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class SearchAccountResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class SearchAccountResponse.");
            if (accounts.IsSet && accounts.Value == null)
                throw new ArgumentNullException(nameof(accounts), "Property is not nullable for class SearchAccountResponse.");
            return new SearchAccountResponse(success.Value.Value, errorCode.Value.Value, errorMessage, accounts);
        }
        /// <summary>
        /// Serializes a <see cref="SearchAccountResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchAccountResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchAccountResponse searchAccountResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchAccountResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchAccountResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchAccountResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchAccountResponse searchAccountResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchAccountResponse.ErrorMessageOption.IsSet && searchAccountResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(searchAccountResponse.ErrorMessage), "Property is required for class SearchAccountResponse.");
            if (searchAccountResponse.AccountsOption.IsSet && searchAccountResponse.Accounts == null)
                throw new ArgumentNullException(nameof(searchAccountResponse.Accounts), "Property is required for class SearchAccountResponse.");
            writer.WriteBoolean("success", searchAccountResponse.Success);
            var errorCodeRawValue = SearchAccountErrorCodeValueConverter.ToJsonValue(searchAccountResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (searchAccountResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", searchAccountResponse.ErrorMessage);
            if (searchAccountResponse.AccountsOption.IsSet)
            {
                writer.WritePropertyName("accounts");
                JsonSerializer.Serialize(writer, searchAccountResponse.Accounts, jsonSerializerOptions);
            }
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; ContractNotFound
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; ContractNotFound</value>
    public enum SearchContractByIdErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1
    }
    /// <summary>
    /// Converts <see cref="SearchContractByIdErrorCode"/> to and from the JSON value
    /// </summary>
    public static class SearchContractByIdErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SearchContractByIdErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchContractByIdErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchContractByIdErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return SearchContractByIdErrorCode.NUMBER_1;
            throw new NotImplementedException($"Could not convert value to type SearchContractByIdErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="SearchContractByIdErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchContractByIdErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchContractByIdErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return SearchContractByIdErrorCode.NUMBER_1;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="SearchContractByIdErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(SearchContractByIdErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchContractByIdErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SearchContractByIdErrorCodeJsonConverter : JsonConverter<SearchContractByIdErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchContractByIdErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchContractByIdErrorCode? result = rawValue == null
                ? null
                : SearchContractByIdErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the SearchContractByIdErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractByIdErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchContractByIdErrorCode searchContractByIdErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchContractByIdErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchContractByIdErrorCode"/>
    /// </summary>
    public class SearchContractByIdErrorCodeNullableJsonConverter : JsonConverter<SearchContractByIdErrorCode?>
    {
        /// <summary>
        /// Returns a SearchContractByIdErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchContractByIdErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchContractByIdErrorCode? result = rawValue == null
                ? null
                : SearchContractByIdErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractByIdErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchContractByIdErrorCode? searchContractByIdErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchContractByIdErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchContractByIdRequest
    /// </summary>
    public partial class SearchContractByIdRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchContractByIdRequest" /> class.
        /// </summary>
        /// <param name="contractId">contractId</param>
        [JsonConstructor]
        public SearchContractByIdRequest(string contractId)
        {
            ContractId = contractId;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchContractByIdRequest {\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchContractByIdRequest" />
    /// </summary>
    public class SearchContractByIdRequestJsonConverter : JsonConverter<SearchContractByIdRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchContractByIdRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchContractByIdRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<string> contractId = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "contractId":
                            contractId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class SearchContractByIdRequest.", nameof(contractId));
            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class SearchContractByIdRequest.");
            return new SearchContractByIdRequest(contractId.Value);
        }
        /// <summary>
        /// Serializes a <see cref="SearchContractByIdRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractByIdRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchContractByIdRequest searchContractByIdRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchContractByIdRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchContractByIdRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractByIdRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchContractByIdRequest searchContractByIdRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchContractByIdRequest.ContractId == null)
                throw new ArgumentNullException(nameof(searchContractByIdRequest.ContractId), "Property is required for class SearchContractByIdRequest.");
            writer.WriteString("contractId", searchContractByIdRequest.ContractId);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchContractByIdResponse
    /// </summary>
    public partial class SearchContractByIdResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchContractByIdResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="contract">contract</param>
        [JsonConstructor]
        public SearchContractByIdResponse(bool success, SearchContractByIdErrorCode errorCode, Option<string> errorMessage = default, Option<ContractModel> contract = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            ContractOption = contract;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public SearchContractByIdErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of Contract
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ContractModel> ContractOption { get; private set; }
        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [JsonPropertyName("contract")]
        public ContractModel Contract { get { return this.ContractOption; } set { this.ContractOption = new Option<ContractModel>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchContractByIdResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchContractByIdResponse" />
    /// </summary>
    public class SearchContractByIdResponseJsonConverter : JsonConverter<SearchContractByIdResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchContractByIdResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchContractByIdResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<SearchContractByIdErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<ContractModel> contract = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<SearchContractByIdErrorCode?>(SearchContractByIdErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contract":
                            contract = new Option<ContractModel>(JsonSerializer.Deserialize<ContractModel>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class SearchContractByIdResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class SearchContractByIdResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class SearchContractByIdResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class SearchContractByIdResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class SearchContractByIdResponse.");
            if (contract.IsSet && contract.Value == null)
                throw new ArgumentNullException(nameof(contract), "Property is not nullable for class SearchContractByIdResponse.");
            return new SearchContractByIdResponse(success.Value.Value, errorCode.Value.Value, errorMessage, contract);
        }
        /// <summary>
        /// Serializes a <see cref="SearchContractByIdResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractByIdResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchContractByIdResponse searchContractByIdResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchContractByIdResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchContractByIdResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractByIdResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchContractByIdResponse searchContractByIdResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchContractByIdResponse.ErrorMessageOption.IsSet && searchContractByIdResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(searchContractByIdResponse.ErrorMessage), "Property is required for class SearchContractByIdResponse.");
            if (searchContractByIdResponse.ContractOption.IsSet && searchContractByIdResponse.Contract == null)
                throw new ArgumentNullException(nameof(searchContractByIdResponse.Contract), "Property is required for class SearchContractByIdResponse.");
            writer.WriteBoolean("success", searchContractByIdResponse.Success);
            var errorCodeRawValue = SearchContractByIdErrorCodeValueConverter.ToJsonValue(searchContractByIdResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (searchContractByIdResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", searchContractByIdResponse.ErrorMessage);
            if (searchContractByIdResponse.ContractOption.IsSet)
            {
                writer.WritePropertyName("contract");
                JsonSerializer.Serialize(writer, searchContractByIdResponse.Contract, jsonSerializerOptions);
            }
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success
    /// </summary>
    /// <value>0 &#x3D; Success</value>
    public enum SearchContractErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0
    }
    /// <summary>
    /// Converts <see cref="SearchContractErrorCode"/> to and from the JSON value
    /// </summary>
    public static class SearchContractErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SearchContractErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchContractErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchContractErrorCode.NUMBER_0;
            throw new NotImplementedException($"Could not convert value to type SearchContractErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="SearchContractErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchContractErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchContractErrorCode.NUMBER_0;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="SearchContractErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(SearchContractErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchContractErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SearchContractErrorCodeJsonConverter : JsonConverter<SearchContractErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchContractErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchContractErrorCode? result = rawValue == null
                ? null
                : SearchContractErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the SearchContractErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchContractErrorCode searchContractErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchContractErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchContractErrorCode"/>
    /// </summary>
    public class SearchContractErrorCodeNullableJsonConverter : JsonConverter<SearchContractErrorCode?>
    {
        /// <summary>
        /// Returns a SearchContractErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchContractErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchContractErrorCode? result = rawValue == null
                ? null
                : SearchContractErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchContractErrorCode? searchContractErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchContractErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchContractRequest
    /// </summary>
    public partial class SearchContractRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchContractRequest" /> class.
        /// </summary>
        /// <param name="live">live</param>
        /// <param name="searchText">searchText</param>
        [JsonConstructor]
        public SearchContractRequest(bool live, Option<string> searchText = default)
        {
            Live = live;
            SearchTextOption = searchText;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets Live
        /// </summary>
        [JsonPropertyName("live")]
        public bool Live { get; set; }
        /// <summary>
        /// Used to track the state of SearchText
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SearchTextOption { get; private set; }
        /// <summary>
        /// Gets or Sets SearchText
        /// </summary>
        [JsonPropertyName("searchText")]
        public string SearchText { get { return this.SearchTextOption; } set { this.SearchTextOption = new Option<string>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchContractRequest {\n");
            sb.Append("  Live: ").Append(Live).Append("\n");
            sb.Append("  SearchText: ").Append(SearchText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchContractRequest" />
    /// </summary>
    public class SearchContractRequestJsonConverter : JsonConverter<SearchContractRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchContractRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchContractRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> live = default;
            Option<string> searchText = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "live":
                            live = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "searchText":
                            searchText = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!live.IsSet)
                throw new ArgumentException("Property is required for class SearchContractRequest.", nameof(live));
            if (live.IsSet && live.Value == null)
                throw new ArgumentNullException(nameof(live), "Property is not nullable for class SearchContractRequest.");
            if (searchText.IsSet && searchText.Value == null)
                throw new ArgumentNullException(nameof(searchText), "Property is not nullable for class SearchContractRequest.");
            return new SearchContractRequest(live.Value.Value, searchText);
        }
        /// <summary>
        /// Serializes a <see cref="SearchContractRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchContractRequest searchContractRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchContractRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchContractRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchContractRequest searchContractRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchContractRequest.SearchTextOption.IsSet && searchContractRequest.SearchText == null)
                throw new ArgumentNullException(nameof(searchContractRequest.SearchText), "Property is required for class SearchContractRequest.");
            writer.WriteBoolean("live", searchContractRequest.Live);
            if (searchContractRequest.SearchTextOption.IsSet)
                writer.WriteString("searchText", searchContractRequest.SearchText);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchContractResponse
    /// </summary>
    public partial class SearchContractResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchContractResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="contracts">contracts</param>
        [JsonConstructor]
        public SearchContractResponse(bool success, SearchContractErrorCode errorCode, Option<string> errorMessage = default, Option<List<ContractModel>> contracts = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            ContractsOption = contracts;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public SearchContractErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of Contracts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ContractModel>> ContractsOption { get; private set; }
        /// <summary>
        /// Gets or Sets Contracts
        /// </summary>
        [JsonPropertyName("contracts")]
        public List<ContractModel> Contracts { get { return this.ContractsOption; } set { this.ContractsOption = new Option<List<ContractModel>>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchContractResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Contracts: ").Append(Contracts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchContractResponse" />
    /// </summary>
    public class SearchContractResponseJsonConverter : JsonConverter<SearchContractResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchContractResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchContractResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<SearchContractErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<List<ContractModel>> contracts = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<SearchContractErrorCode?>(SearchContractErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contracts":
                            contracts = new Option<List<ContractModel>>(JsonSerializer.Deserialize<List<ContractModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class SearchContractResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class SearchContractResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class SearchContractResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class SearchContractResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class SearchContractResponse.");
            if (contracts.IsSet && contracts.Value == null)
                throw new ArgumentNullException(nameof(contracts), "Property is not nullable for class SearchContractResponse.");
            return new SearchContractResponse(success.Value.Value, errorCode.Value.Value, errorMessage, contracts);
        }
        /// <summary>
        /// Serializes a <see cref="SearchContractResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchContractResponse searchContractResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchContractResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchContractResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchContractResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchContractResponse searchContractResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchContractResponse.ErrorMessageOption.IsSet && searchContractResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(searchContractResponse.ErrorMessage), "Property is required for class SearchContractResponse.");
            if (searchContractResponse.ContractsOption.IsSet && searchContractResponse.Contracts == null)
                throw new ArgumentNullException(nameof(searchContractResponse.Contracts), "Property is required for class SearchContractResponse.");
            writer.WriteBoolean("success", searchContractResponse.Success);
            var errorCodeRawValue = SearchContractErrorCodeValueConverter.ToJsonValue(searchContractResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (searchContractResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", searchContractResponse.ErrorMessage);
            if (searchContractResponse.ContractsOption.IsSet)
            {
                writer.WritePropertyName("contracts");
                JsonSerializer.Serialize(writer, searchContractResponse.Contracts, jsonSerializerOptions);
            }
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchHalfTradeResponse
    /// </summary>
    public partial class SearchHalfTradeResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchHalfTradeResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="trades">trades</param>
        [JsonConstructor]
        public SearchHalfTradeResponse(bool success, SearchTradeErrorCode errorCode, Option<string> errorMessage = default, Option<List<HalfTradeModel>> trades = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            TradesOption = trades;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public SearchTradeErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of Trades
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<HalfTradeModel>> TradesOption { get; private set; }
        /// <summary>
        /// Gets or Sets Trades
        /// </summary>
        [JsonPropertyName("trades")]
        public List<HalfTradeModel> Trades { get { return this.TradesOption; } set { this.TradesOption = new Option<List<HalfTradeModel>>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchHalfTradeResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Trades: ").Append(Trades).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchHalfTradeResponse" />
    /// </summary>
    public class SearchHalfTradeResponseJsonConverter : JsonConverter<SearchHalfTradeResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchHalfTradeResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchHalfTradeResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<SearchTradeErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<List<HalfTradeModel>> trades = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<SearchTradeErrorCode?>(SearchTradeErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "trades":
                            trades = new Option<List<HalfTradeModel>>(JsonSerializer.Deserialize<List<HalfTradeModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class SearchHalfTradeResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class SearchHalfTradeResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class SearchHalfTradeResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class SearchHalfTradeResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class SearchHalfTradeResponse.");
            if (trades.IsSet && trades.Value == null)
                throw new ArgumentNullException(nameof(trades), "Property is not nullable for class SearchHalfTradeResponse.");
            return new SearchHalfTradeResponse(success.Value.Value, errorCode.Value.Value, errorMessage, trades);
        }
        /// <summary>
        /// Serializes a <see cref="SearchHalfTradeResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchHalfTradeResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchHalfTradeResponse searchHalfTradeResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchHalfTradeResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchHalfTradeResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchHalfTradeResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchHalfTradeResponse searchHalfTradeResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchHalfTradeResponse.ErrorMessageOption.IsSet && searchHalfTradeResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(searchHalfTradeResponse.ErrorMessage), "Property is required for class SearchHalfTradeResponse.");
            if (searchHalfTradeResponse.TradesOption.IsSet && searchHalfTradeResponse.Trades == null)
                throw new ArgumentNullException(nameof(searchHalfTradeResponse.Trades), "Property is required for class SearchHalfTradeResponse.");
            writer.WriteBoolean("success", searchHalfTradeResponse.Success);
            var errorCodeRawValue = SearchTradeErrorCodeValueConverter.ToJsonValue(searchHalfTradeResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (searchHalfTradeResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", searchHalfTradeResponse.ErrorMessage);
            if (searchHalfTradeResponse.TradesOption.IsSet)
            {
                writer.WritePropertyName("trades");
                JsonSerializer.Serialize(writer, searchHalfTradeResponse.Trades, jsonSerializerOptions);
            }
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchOpenOrderRequest
    /// </summary>
    public partial class SearchOpenOrderRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchOpenOrderRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        [JsonConstructor]
        public SearchOpenOrderRequest(int accountId)
        {
            AccountId = accountId;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchOpenOrderRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchOpenOrderRequest" />
    /// </summary>
    public class SearchOpenOrderRequestJsonConverter : JsonConverter<SearchOpenOrderRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchOpenOrderRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchOpenOrderRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> accountId = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class SearchOpenOrderRequest.", nameof(accountId));
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class SearchOpenOrderRequest.");
            return new SearchOpenOrderRequest(accountId.Value.Value);
        }
        /// <summary>
        /// Serializes a <see cref="SearchOpenOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchOpenOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchOpenOrderRequest searchOpenOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchOpenOrderRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchOpenOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchOpenOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchOpenOrderRequest searchOpenOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("accountId", searchOpenOrderRequest.AccountId);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; AccountNotFound
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; AccountNotFound</value>
    public enum SearchOrderErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1
    }
    /// <summary>
    /// Converts <see cref="SearchOrderErrorCode"/> to and from the JSON value
    /// </summary>
    public static class SearchOrderErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SearchOrderErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchOrderErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchOrderErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return SearchOrderErrorCode.NUMBER_1;
            throw new NotImplementedException($"Could not convert value to type SearchOrderErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="SearchOrderErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchOrderErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchOrderErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return SearchOrderErrorCode.NUMBER_1;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="SearchOrderErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(SearchOrderErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchOrderErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SearchOrderErrorCodeJsonConverter : JsonConverter<SearchOrderErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchOrderErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchOrderErrorCode? result = rawValue == null
                ? null
                : SearchOrderErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the SearchOrderErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchOrderErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchOrderErrorCode searchOrderErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchOrderErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchOrderErrorCode"/>
    /// </summary>
    public class SearchOrderErrorCodeNullableJsonConverter : JsonConverter<SearchOrderErrorCode?>
    {
        /// <summary>
        /// Returns a SearchOrderErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchOrderErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchOrderErrorCode? result = rawValue == null
                ? null
                : SearchOrderErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchOrderErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchOrderErrorCode? searchOrderErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchOrderErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchOrderRequest
    /// </summary>
    public partial class SearchOrderRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchOrderRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        /// <param name="startTimestamp">startTimestamp</param>
        /// <param name="endTimestamp">endTimestamp</param>
        [JsonConstructor]
        public SearchOrderRequest(int accountId, DateTime startTimestamp, Option<DateTime?> endTimestamp = default)
        {
            AccountId = accountId;
            StartTimestamp = startTimestamp;
            EndTimestampOption = endTimestamp;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Gets or Sets StartTimestamp
        /// </summary>
        [JsonPropertyName("startTimestamp")]
        public DateTime StartTimestamp { get; set; }
        /// <summary>
        /// Used to track the state of EndTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndTimestampOption { get; private set; }
        /// <summary>
        /// Gets or Sets EndTimestamp
        /// </summary>
        [JsonPropertyName("endTimestamp")]
        public DateTime? EndTimestamp { get { return this.EndTimestampOption; } set { this.EndTimestampOption = new Option<DateTime?>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchOrderRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  EndTimestamp: ").Append(EndTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchOrderRequest" />
    /// </summary>
    public class SearchOrderRequestJsonConverter : JsonConverter<SearchOrderRequest>
    {
        /// <summary>
        /// The format to use to serialize StartTimestamp
        /// </summary>
        public static string StartTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// The format to use to serialize EndTimestamp
        /// </summary>
        public static string EndTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// Deserializes json to <see cref="SearchOrderRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchOrderRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> accountId = default;
            Option<DateTime?> startTimestamp = default;
            Option<DateTime?> endTimestamp = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "startTimestamp":
                            startTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endTimestamp":
                            endTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class SearchOrderRequest.", nameof(accountId));
            if (!startTimestamp.IsSet)
                throw new ArgumentException("Property is required for class SearchOrderRequest.", nameof(startTimestamp));
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class SearchOrderRequest.");
            if (startTimestamp.IsSet && startTimestamp.Value == null)
                throw new ArgumentNullException(nameof(startTimestamp), "Property is not nullable for class SearchOrderRequest.");
            if (endTimestamp.IsSet && endTimestamp.Value == null)
                throw new ArgumentNullException(nameof(endTimestamp), "Property is not nullable for class SearchOrderRequest.");
            return new SearchOrderRequest(accountId.Value.Value, startTimestamp.Value.Value, endTimestamp);
        }
        /// <summary>
        /// Serializes a <see cref="SearchOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchOrderRequest searchOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchOrderRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchOrderRequest searchOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("accountId", searchOrderRequest.AccountId);
            writer.WriteString("startTimestamp", searchOrderRequest.StartTimestamp.ToString(StartTimestampFormat));
            if (searchOrderRequest.EndTimestampOption.IsSet)
                writer.WriteString("endTimestamp", searchOrderRequest.EndTimestampOption.Value.Value.ToString(EndTimestampFormat));
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchOrderResponse
    /// </summary>
    public partial class SearchOrderResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchOrderResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="orders">orders</param>
        [JsonConstructor]
        public SearchOrderResponse(bool success, SearchOrderErrorCode errorCode, Option<string> errorMessage = default, Option<List<OrderModel>> orders = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            OrdersOption = orders;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public SearchOrderErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of Orders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<OrderModel>> OrdersOption { get; private set; }
        /// <summary>
        /// Gets or Sets Orders
        /// </summary>
        [JsonPropertyName("orders")]
        public List<OrderModel> Orders { get { return this.OrdersOption; } set { this.OrdersOption = new Option<List<OrderModel>>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchOrderResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchOrderResponse" />
    /// </summary>
    public class SearchOrderResponseJsonConverter : JsonConverter<SearchOrderResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchOrderResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchOrderResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<SearchOrderErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<List<OrderModel>> orders = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<SearchOrderErrorCode?>(SearchOrderErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "orders":
                            orders = new Option<List<OrderModel>>(JsonSerializer.Deserialize<List<OrderModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class SearchOrderResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class SearchOrderResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class SearchOrderResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class SearchOrderResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class SearchOrderResponse.");
            if (orders.IsSet && orders.Value == null)
                throw new ArgumentNullException(nameof(orders), "Property is not nullable for class SearchOrderResponse.");
            return new SearchOrderResponse(success.Value.Value, errorCode.Value.Value, errorMessage, orders);
        }
        /// <summary>
        /// Serializes a <see cref="SearchOrderResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchOrderResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchOrderResponse searchOrderResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchOrderResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchOrderResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchOrderResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchOrderResponse searchOrderResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchOrderResponse.ErrorMessageOption.IsSet && searchOrderResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(searchOrderResponse.ErrorMessage), "Property is required for class SearchOrderResponse.");
            if (searchOrderResponse.OrdersOption.IsSet && searchOrderResponse.Orders == null)
                throw new ArgumentNullException(nameof(searchOrderResponse.Orders), "Property is required for class SearchOrderResponse.");
            writer.WriteBoolean("success", searchOrderResponse.Success);
            var errorCodeRawValue = SearchOrderErrorCodeValueConverter.ToJsonValue(searchOrderResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (searchOrderResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", searchOrderResponse.ErrorMessage);
            if (searchOrderResponse.OrdersOption.IsSet)
            {
                writer.WritePropertyName("orders");
                JsonSerializer.Serialize(writer, searchOrderResponse.Orders, jsonSerializerOptions);
            }
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; AccountNotFound
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; AccountNotFound</value>
    public enum SearchPositionErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1
    }
    /// <summary>
    /// Converts <see cref="SearchPositionErrorCode"/> to and from the JSON value
    /// </summary>
    public static class SearchPositionErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SearchPositionErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchPositionErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchPositionErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return SearchPositionErrorCode.NUMBER_1;
            throw new NotImplementedException($"Could not convert value to type SearchPositionErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="SearchPositionErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchPositionErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchPositionErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return SearchPositionErrorCode.NUMBER_1;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="SearchPositionErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(SearchPositionErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchPositionErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SearchPositionErrorCodeJsonConverter : JsonConverter<SearchPositionErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchPositionErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchPositionErrorCode? result = rawValue == null
                ? null
                : SearchPositionErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the SearchPositionErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchPositionErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchPositionErrorCode searchPositionErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchPositionErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchPositionErrorCode"/>
    /// </summary>
    public class SearchPositionErrorCodeNullableJsonConverter : JsonConverter<SearchPositionErrorCode?>
    {
        /// <summary>
        /// Returns a SearchPositionErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchPositionErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchPositionErrorCode? result = rawValue == null
                ? null
                : SearchPositionErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchPositionErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchPositionErrorCode? searchPositionErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchPositionErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchPositionRequest
    /// </summary>
    public partial class SearchPositionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchPositionRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        [JsonConstructor]
        public SearchPositionRequest(int accountId)
        {
            AccountId = accountId;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchPositionRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchPositionRequest" />
    /// </summary>
    public class SearchPositionRequestJsonConverter : JsonConverter<SearchPositionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchPositionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchPositionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> accountId = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class SearchPositionRequest.", nameof(accountId));
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class SearchPositionRequest.");
            return new SearchPositionRequest(accountId.Value.Value);
        }
        /// <summary>
        /// Serializes a <see cref="SearchPositionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchPositionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchPositionRequest searchPositionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchPositionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchPositionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchPositionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchPositionRequest searchPositionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("accountId", searchPositionRequest.AccountId);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchPositionResponse
    /// </summary>
    public partial class SearchPositionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchPositionResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="positions">positions</param>
        [JsonConstructor]
        public SearchPositionResponse(bool success, SearchPositionErrorCode errorCode, Option<string> errorMessage = default, Option<List<PositionModel>> positions = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            PositionsOption = positions;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public SearchPositionErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of Positions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PositionModel>> PositionsOption { get; private set; }
        /// <summary>
        /// Gets or Sets Positions
        /// </summary>
        [JsonPropertyName("positions")]
        public List<PositionModel> Positions { get { return this.PositionsOption; } set { this.PositionsOption = new Option<List<PositionModel>>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchPositionResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchPositionResponse" />
    /// </summary>
    public class SearchPositionResponseJsonConverter : JsonConverter<SearchPositionResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchPositionResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchPositionResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<SearchPositionErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<List<PositionModel>> positions = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<SearchPositionErrorCode?>(SearchPositionErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "positions":
                            positions = new Option<List<PositionModel>>(JsonSerializer.Deserialize<List<PositionModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class SearchPositionResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class SearchPositionResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class SearchPositionResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class SearchPositionResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class SearchPositionResponse.");
            if (positions.IsSet && positions.Value == null)
                throw new ArgumentNullException(nameof(positions), "Property is not nullable for class SearchPositionResponse.");
            return new SearchPositionResponse(success.Value.Value, errorCode.Value.Value, errorMessage, positions);
        }
        /// <summary>
        /// Serializes a <see cref="SearchPositionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchPositionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchPositionResponse searchPositionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchPositionResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchPositionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchPositionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchPositionResponse searchPositionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchPositionResponse.ErrorMessageOption.IsSet && searchPositionResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(searchPositionResponse.ErrorMessage), "Property is required for class SearchPositionResponse.");
            if (searchPositionResponse.PositionsOption.IsSet && searchPositionResponse.Positions == null)
                throw new ArgumentNullException(nameof(searchPositionResponse.Positions), "Property is required for class SearchPositionResponse.");
            writer.WriteBoolean("success", searchPositionResponse.Success);
            var errorCodeRawValue = SearchPositionErrorCodeValueConverter.ToJsonValue(searchPositionResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (searchPositionResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", searchPositionResponse.ErrorMessage);
            if (searchPositionResponse.PositionsOption.IsSet)
            {
                writer.WritePropertyName("positions");
                JsonSerializer.Serialize(writer, searchPositionResponse.Positions, jsonSerializerOptions);
            }
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; AccountNotFound
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; AccountNotFound</value>
    public enum SearchTradeErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1
    }
    /// <summary>
    /// Converts <see cref="SearchTradeErrorCode"/> to and from the JSON value
    /// </summary>
    public static class SearchTradeErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="SearchTradeErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchTradeErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchTradeErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return SearchTradeErrorCode.NUMBER_1;
            throw new NotImplementedException($"Could not convert value to type SearchTradeErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="SearchTradeErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SearchTradeErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return SearchTradeErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return SearchTradeErrorCode.NUMBER_1;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="SearchTradeErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(SearchTradeErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchTradeErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class SearchTradeErrorCodeJsonConverter : JsonConverter<SearchTradeErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchTradeErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchTradeErrorCode? result = rawValue == null
                ? null
                : SearchTradeErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the SearchTradeErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchTradeErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchTradeErrorCode searchTradeErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchTradeErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchTradeErrorCode"/>
    /// </summary>
    public class SearchTradeErrorCodeNullableJsonConverter : JsonConverter<SearchTradeErrorCode?>
    {
        /// <summary>
        /// Returns a SearchTradeErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override SearchTradeErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            SearchTradeErrorCode? result = rawValue == null
                ? null
                : SearchTradeErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchTradeErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, SearchTradeErrorCode? searchTradeErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(searchTradeErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// SearchTradeRequest
    /// </summary>
    public partial class SearchTradeRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchTradeRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        /// <param name="startTimestamp">startTimestamp</param>
        /// <param name="endTimestamp">endTimestamp</param>
        [JsonConstructor]
        public SearchTradeRequest(int accountId, Option<DateTime?> startTimestamp = default, Option<DateTime?> endTimestamp = default)
        {
            AccountId = accountId;
            StartTimestampOption = startTimestamp;
            EndTimestampOption = endTimestamp;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }
        /// <summary>
        /// Used to track the state of StartTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> StartTimestampOption { get; private set; }
        /// <summary>
        /// Gets or Sets StartTimestamp
        /// </summary>
        [JsonPropertyName("startTimestamp")]
        public DateTime? StartTimestamp { get { return this.StartTimestampOption; } set { this.StartTimestampOption = new Option<DateTime?>(value); } }
        /// <summary>
        /// Used to track the state of EndTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> EndTimestampOption { get; private set; }
        /// <summary>
        /// Gets or Sets EndTimestamp
        /// </summary>
        [JsonPropertyName("endTimestamp")]
        public DateTime? EndTimestamp { get { return this.EndTimestampOption; } set { this.EndTimestampOption = new Option<DateTime?>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchTradeRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  StartTimestamp: ").Append(StartTimestamp).Append("\n");
            sb.Append("  EndTimestamp: ").Append(EndTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="SearchTradeRequest" />
    /// </summary>
    public class SearchTradeRequestJsonConverter : JsonConverter<SearchTradeRequest>
    {
        /// <summary>
        /// The format to use to serialize StartTimestamp
        /// </summary>
        public static string StartTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// The format to use to serialize EndTimestamp
        /// </summary>
        public static string EndTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";
        /// <summary>
        /// Deserializes json to <see cref="SearchTradeRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchTradeRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> accountId = default;
            Option<DateTime?> startTimestamp = default;
            Option<DateTime?> endTimestamp = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "startTimestamp":
                            startTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endTimestamp":
                            endTimestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class SearchTradeRequest.", nameof(accountId));
            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class SearchTradeRequest.");
            if (startTimestamp.IsSet && startTimestamp.Value == null)
                throw new ArgumentNullException(nameof(startTimestamp), "Property is not nullable for class SearchTradeRequest.");
            if (endTimestamp.IsSet && endTimestamp.Value == null)
                throw new ArgumentNullException(nameof(endTimestamp), "Property is not nullable for class SearchTradeRequest.");
            return new SearchTradeRequest(accountId.Value.Value, startTimestamp, endTimestamp);
        }
        /// <summary>
        /// Serializes a <see cref="SearchTradeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchTradeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchTradeRequest searchTradeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, searchTradeRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="SearchTradeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchTradeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchTradeRequest searchTradeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("accountId", searchTradeRequest.AccountId);
            if (searchTradeRequest.StartTimestampOption.IsSet)
                writer.WriteString("startTimestamp", searchTradeRequest.StartTimestampOption.Value.Value.ToString(StartTimestampFormat));
            if (searchTradeRequest.EndTimestampOption.IsSet)
                writer.WriteString("endTimestamp", searchTradeRequest.EndTimestampOption.Value.Value.ToString(EndTimestampFormat));
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// TradingAccountModel
    /// </summary>
    public partial class TradingAccountModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingAccountModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="balance">balance</param>
        /// <param name="canTrade">canTrade</param>
        /// <param name="isVisible">isVisible</param>
        /// <param name="simulated">simulated</param>
        [JsonConstructor]
        public TradingAccountModel(int id, string name, decimal balance, bool canTrade, bool isVisible, bool simulated)
        {
            Id = id;
            Name = name;
            Balance = balance;
            CanTrade = canTrade;
            IsVisible = isVisible;
            Simulated = simulated;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [JsonPropertyName("balance")]
        public decimal Balance { get; set; }
        /// <summary>
        /// Gets or Sets CanTrade
        /// </summary>
        [JsonPropertyName("canTrade")]
        public bool CanTrade { get; set; }
        /// <summary>
        /// Gets or Sets IsVisible
        /// </summary>
        [JsonPropertyName("isVisible")]
        public bool IsVisible { get; set; }
        /// <summary>
        /// Gets or Sets Simulated
        /// </summary>
        [JsonPropertyName("simulated")]
        public bool Simulated { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TradingAccountModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  CanTrade: ").Append(CanTrade).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  Simulated: ").Append(Simulated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="TradingAccountModel" />
    /// </summary>
    public class TradingAccountModelJsonConverter : JsonConverter<TradingAccountModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="TradingAccountModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TradingAccountModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<int?> id = default;
            Option<string> name = default;
            Option<decimal?> balance = default;
            Option<bool?> canTrade = default;
            Option<bool?> isVisible = default;
            Option<bool?> simulated = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "balance":
                            balance = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "canTrade":
                            canTrade = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isVisible":
                            isVisible = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "simulated":
                            simulated = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!id.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(id));
            if (!name.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(name));
            if (!balance.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(balance));
            if (!canTrade.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(canTrade));
            if (!isVisible.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(isVisible));
            if (!simulated.IsSet)
                throw new ArgumentException("Property is required for class TradingAccountModel.", nameof(simulated));
            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class TradingAccountModel.");
            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class TradingAccountModel.");
            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class TradingAccountModel.");
            if (canTrade.IsSet && canTrade.Value == null)
                throw new ArgumentNullException(nameof(canTrade), "Property is not nullable for class TradingAccountModel.");
            if (isVisible.IsSet && isVisible.Value == null)
                throw new ArgumentNullException(nameof(isVisible), "Property is not nullable for class TradingAccountModel.");
            if (simulated.IsSet && simulated.Value == null)
                throw new ArgumentNullException(nameof(simulated), "Property is not nullable for class TradingAccountModel.");
            return new TradingAccountModel(id.Value.Value, name.Value, balance.Value.Value, canTrade.Value.Value, isVisible.Value.Value, simulated.Value.Value);
        }
        /// <summary>
        /// Serializes a <see cref="TradingAccountModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tradingAccountModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TradingAccountModel tradingAccountModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, tradingAccountModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="TradingAccountModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tradingAccountModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TradingAccountModel tradingAccountModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tradingAccountModel.Name == null)
                throw new ArgumentNullException(nameof(tradingAccountModel.Name), "Property is required for class TradingAccountModel.");
            writer.WriteNumber("id", tradingAccountModel.Id);
            writer.WriteString("name", tradingAccountModel.Name);
            writer.WriteNumber("balance", tradingAccountModel.Balance);
            writer.WriteBoolean("canTrade", tradingAccountModel.CanTrade);
            writer.WriteBoolean("isVisible", tradingAccountModel.IsVisible);
            writer.WriteBoolean("simulated", tradingAccountModel.Simulated);
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Success 1 &#x3D; InvalidSession 2 &#x3D; SessionNotFound 3 &#x3D; ExpiredToken 4 &#x3D; UnknownError
    /// </summary>
    /// <value>0 &#x3D; Success 1 &#x3D; InvalidSession 2 &#x3D; SessionNotFound 3 &#x3D; ExpiredToken 4 &#x3D; UnknownError</value>
    public enum ValidateErrorCode
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,
        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,
        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,
        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,
        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4
    }
    /// <summary>
    /// Converts <see cref="ValidateErrorCode"/> to and from the JSON value
    /// </summary>
    public static class ValidateErrorCodeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ValidateErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ValidateErrorCode FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return ValidateErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return ValidateErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return ValidateErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return ValidateErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return ValidateErrorCode.NUMBER_4;
            throw new NotImplementedException($"Could not convert value to type ValidateErrorCode: '{value}'");
        }
        /// <summary>
        /// Parses a given value to <see cref="ValidateErrorCode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ValidateErrorCode? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return ValidateErrorCode.NUMBER_0;
            if (value.Equals((1).ToString()))
                return ValidateErrorCode.NUMBER_1;
            if (value.Equals((2).ToString()))
                return ValidateErrorCode.NUMBER_2;
            if (value.Equals((3).ToString()))
                return ValidateErrorCode.NUMBER_3;
            if (value.Equals((4).ToString()))
                return ValidateErrorCode.NUMBER_4;
            return null;
        }
        /// <summary>
        /// Converts the <see cref="ValidateErrorCode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(ValidateErrorCode value)
        {
            return (int) value;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ValidateErrorCode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ValidateErrorCodeJsonConverter : JsonConverter<ValidateErrorCode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ValidateErrorCode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            ValidateErrorCode? result = rawValue == null
                ? null
                : ValidateErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the ValidateErrorCode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="validateErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ValidateErrorCode validateErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(validateErrorCode.ToString());
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ValidateErrorCode"/>
    /// </summary>
    public class ValidateErrorCodeNullableJsonConverter : JsonConverter<ValidateErrorCode?>
    {
        /// <summary>
        /// Returns a ValidateErrorCode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ValidateErrorCode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();
            ValidateErrorCode? result = rawValue == null
                ? null
                : ValidateErrorCodeValueConverter.FromStringOrDefault(rawValue);
            if (result != null)
                return result.Value;
            throw new JsonException();
        }
        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="validateErrorCode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ValidateErrorCode? validateErrorCode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(validateErrorCode?.ToString() ?? "null");
        }
    }
}

// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
namespace OpenAPI.Model
{
    /// <summary>
    /// ValidateResponse
    /// </summary>
    public partial class ValidateResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="newToken">newToken</param>
        [JsonConstructor]
        public ValidateResponse(bool success, ValidateErrorCode errorCode, Option<string> errorMessage = default, Option<string> newToken = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            NewTokenOption = newToken;
            OnCreated();
        }
        partial void OnCreated();
        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public ValidateErrorCode ErrorCode { get; set; }
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ErrorMessageOption { get; private set; }
        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new Option<string>(value); } }
        /// <summary>
        /// Used to track the state of NewToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NewTokenOption { get; private set; }
        /// <summary>
        /// Gets or Sets NewToken
        /// </summary>
        [JsonPropertyName("newToken")]
        public string NewToken { get { return this.NewTokenOption; } set { this.NewTokenOption = new Option<string>(value); } }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidateResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  NewToken: ").Append(NewToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
    /// <summary>
    /// A Json converter for type <see cref="ValidateResponse" />
    /// </summary>
    public class ValidateResponseJsonConverter : JsonConverter<ValidateResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ValidateResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ValidateResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;
            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();
            JsonTokenType startingTokenType = utf8JsonReader.TokenType;
            Option<bool?> success = default;
            Option<ValidateErrorCode?> errorCode = default;
            Option<string> errorMessage = default;
            Option<string> newToken = default;
            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;
                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();
                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<ValidateErrorCode?>(ValidateErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "newToken":
                            newToken = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }
            if (!success.IsSet)
                throw new ArgumentException("Property is required for class ValidateResponse.", nameof(success));
            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class ValidateResponse.", nameof(errorCode));
            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class ValidateResponse.");
            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class ValidateResponse.");
            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class ValidateResponse.");
            if (newToken.IsSet && newToken.Value == null)
                throw new ArgumentNullException(nameof(newToken), "Property is not nullable for class ValidateResponse.");
            return new ValidateResponse(success.Value.Value, errorCode.Value.Value, errorMessage, newToken);
        }
        /// <summary>
        /// Serializes a <see cref="ValidateResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="validateResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ValidateResponse validateResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();
            WriteProperties(writer, validateResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }
        /// <summary>
        /// Serializes the properties of <see cref="ValidateResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="validateResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ValidateResponse validateResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (validateResponse.ErrorMessageOption.IsSet && validateResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(validateResponse.ErrorMessage), "Property is required for class ValidateResponse.");
            if (validateResponse.NewTokenOption.IsSet && validateResponse.NewToken == null)
                throw new ArgumentNullException(nameof(validateResponse.NewToken), "Property is required for class ValidateResponse.");
            writer.WriteBoolean("success", validateResponse.Success);
            var errorCodeRawValue = ValidateErrorCodeValueConverter.ToJsonValue(validateResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);
            if (validateResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", validateResponse.ErrorMessage);
            if (validateResponse.NewTokenOption.IsSet)
                writer.WriteString("newToken", validateResponse.NewToken);
        }
    }
}

