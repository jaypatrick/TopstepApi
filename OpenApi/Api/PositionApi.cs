// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using OpenApi.Client;
using OpenApi.Model;
using System.Diagnostics.CodeAnalysis;

namespace OpenApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPositionApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PositionApiEvents Events { get; }

        /// <summary>
        /// Closes a contract position based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing the account ID and contract ID to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionCloseContractPositionApiResponse"/>&gt;</returns>
        Task<IPositionCloseContractPositionApiResponse> PositionCloseContractPositionAsync(CloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Closes a contract position based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing the account ID and contract ID to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionCloseContractPositionApiResponse"/>?&gt;</returns>
        Task<IPositionCloseContractPositionApiResponse?> PositionCloseContractPositionOrDefaultAsync(CloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Partially closes a contract position based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing the account ID, contract ID, and size to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionPartialCloseContractPositionApiResponse"/>&gt;</returns>
        Task<IPositionPartialCloseContractPositionApiResponse> PositionPartialCloseContractPositionAsync(PartialCloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Partially closes a contract position based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing the account ID, contract ID, and size to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionPartialCloseContractPositionApiResponse"/>?&gt;</returns>
        Task<IPositionPartialCloseContractPositionApiResponse?> PositionPartialCloseContractPositionOrDefaultAsync(PartialCloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Searches for open positions based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionSearchOpenPositionsApiResponse"/>&gt;</returns>
        Task<IPositionSearchOpenPositionsApiResponse> PositionSearchOpenPositionsAsync(SearchPositionRequest request, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Searches for open positions based on the provided request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionSearchOpenPositionsApiResponse"/>?&gt;</returns>
        Task<IPositionSearchOpenPositionsApiResponse?> PositionSearchOpenPositionsOrDefaultAsync(SearchPositionRequest request, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IPositionCloseContractPositionApiResponse"/>
    /// </summary>
    public interface IPositionCloseContractPositionApiResponse : OpenApi.Client.IApiResponse, IOk<OpenApi.Model.ClosePositionResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPositionPartialCloseContractPositionApiResponse"/>
    /// </summary>
    public interface IPositionPartialCloseContractPositionApiResponse : OpenApi.Client.IApiResponse, IOk<OpenApi.Model.PartialClosePositionResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPositionSearchOpenPositionsApiResponse"/>
    /// </summary>
    public interface IPositionSearchOpenPositionsApiResponse : OpenApi.Client.IApiResponse, IOk<OpenApi.Model.SearchPositionResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PositionApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPositionCloseContractPosition;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPositionCloseContractPosition;

        internal void ExecuteOnPositionCloseContractPosition(PositionApi.PositionCloseContractPositionApiResponse apiResponse)
        {
            OnPositionCloseContractPosition?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPositionCloseContractPosition(Exception exception)
        {
            OnErrorPositionCloseContractPosition?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPositionPartialCloseContractPosition;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPositionPartialCloseContractPosition;

        internal void ExecuteOnPositionPartialCloseContractPosition(PositionApi.PositionPartialCloseContractPositionApiResponse apiResponse)
        {
            OnPositionPartialCloseContractPosition?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPositionPartialCloseContractPosition(Exception exception)
        {
            OnErrorPositionPartialCloseContractPosition?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPositionSearchOpenPositions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPositionSearchOpenPositions;

        internal void ExecuteOnPositionSearchOpenPositions(PositionApi.PositionSearchOpenPositionsApiResponse apiResponse)
        {
            OnPositionSearchOpenPositions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPositionSearchOpenPositions(Exception exception)
        {
            OnErrorPositionSearchOpenPositions?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PositionApi : IPositionApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PositionApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PositionApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PositionApi(ILogger<PositionApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PositionApiEvents positionApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PositionApi>();
            HttpClient = httpClient;
            Events = positionApiEvents;
        }

        partial void FormatPositionCloseContractPosition(CloseContractPositionRequest request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidatePositionCloseContractPosition(CloseContractPositionRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterPositionCloseContractPositionDefaultImplementation(IPositionCloseContractPositionApiResponse apiResponseLocalVar, CloseContractPositionRequest request)
        {
            bool suppressDefaultLog = false;
            AfterPositionCloseContractPosition(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterPositionCloseContractPosition(ref bool suppressDefaultLog, IPositionCloseContractPositionApiResponse apiResponseLocalVar, CloseContractPositionRequest request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorPositionCloseContractPositionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CloseContractPositionRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPositionCloseContractPosition(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorPositionCloseContractPosition(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CloseContractPositionRequest request);

        /// <summary>
        /// Closes a contract position based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing the account ID and contract ID to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionCloseContractPositionApiResponse"/>&gt;</returns>
        public async Task<IPositionCloseContractPositionApiResponse?> PositionCloseContractPositionOrDefaultAsync(CloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PositionCloseContractPositionAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Closes a contract position based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing the account ID and contract ID to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionCloseContractPositionApiResponse"/>&gt;</returns>
        public async Task<IPositionCloseContractPositionApiResponse> PositionCloseContractPositionAsync(CloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePositionCloseContractPosition(request);

                FormatPositionCloseContractPosition(request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Position/closeContract"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Position/closeContract");

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<PositionCloseContractPositionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PositionCloseContractPositionApiResponse>();
                        PositionCloseContractPositionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Position/closeContract", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterPositionCloseContractPositionDefaultImplementation(apiResponseLocalVar, request);

                        Events.ExecuteOnPositionCloseContractPosition(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPositionCloseContractPositionDefaultImplementation(e, "/api/Position/closeContract", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorPositionCloseContractPosition(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PositionCloseContractPositionApiResponse"/>
        /// </summary>
        public partial class PositionCloseContractPositionApiResponse : OpenApi.Client.ApiResponse, IPositionCloseContractPositionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PositionCloseContractPositionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PositionCloseContractPositionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PositionCloseContractPositionApiResponse(ILogger<PositionCloseContractPositionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="PositionCloseContractPositionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PositionCloseContractPositionApiResponse(ILogger<PositionCloseContractPositionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenApi.Model.ClosePositionResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenApi.Model.ClosePositionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out OpenApi.Model.ClosePositionResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPositionPartialCloseContractPosition(PartialCloseContractPositionRequest request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidatePositionPartialCloseContractPosition(PartialCloseContractPositionRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterPositionPartialCloseContractPositionDefaultImplementation(IPositionPartialCloseContractPositionApiResponse apiResponseLocalVar, PartialCloseContractPositionRequest request)
        {
            bool suppressDefaultLog = false;
            AfterPositionPartialCloseContractPosition(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterPositionPartialCloseContractPosition(ref bool suppressDefaultLog, IPositionPartialCloseContractPositionApiResponse apiResponseLocalVar, PartialCloseContractPositionRequest request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorPositionPartialCloseContractPositionDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PartialCloseContractPositionRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPositionPartialCloseContractPosition(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorPositionPartialCloseContractPosition(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, PartialCloseContractPositionRequest request);

        /// <summary>
        /// Partially closes a contract position based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing the account ID, contract ID, and size to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionPartialCloseContractPositionApiResponse"/>&gt;</returns>
        public async Task<IPositionPartialCloseContractPositionApiResponse?> PositionPartialCloseContractPositionOrDefaultAsync(PartialCloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PositionPartialCloseContractPositionAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Partially closes a contract position based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing the account ID, contract ID, and size to close.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionPartialCloseContractPositionApiResponse"/>&gt;</returns>
        public async Task<IPositionPartialCloseContractPositionApiResponse> PositionPartialCloseContractPositionAsync(PartialCloseContractPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePositionPartialCloseContractPosition(request);

                FormatPositionPartialCloseContractPosition(request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Position/partialCloseContract"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Position/partialCloseContract");

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<PositionPartialCloseContractPositionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PositionPartialCloseContractPositionApiResponse>();
                        PositionPartialCloseContractPositionApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Position/partialCloseContract", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterPositionPartialCloseContractPositionDefaultImplementation(apiResponseLocalVar, request);

                        Events.ExecuteOnPositionPartialCloseContractPosition(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPositionPartialCloseContractPositionDefaultImplementation(e, "/api/Position/partialCloseContract", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorPositionPartialCloseContractPosition(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PositionPartialCloseContractPositionApiResponse"/>
        /// </summary>
        public partial class PositionPartialCloseContractPositionApiResponse : OpenApi.Client.ApiResponse, IPositionPartialCloseContractPositionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PositionPartialCloseContractPositionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PositionPartialCloseContractPositionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PositionPartialCloseContractPositionApiResponse(ILogger<PositionPartialCloseContractPositionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="PositionPartialCloseContractPositionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PositionPartialCloseContractPositionApiResponse(ILogger<PositionPartialCloseContractPositionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenApi.Model.PartialClosePositionResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenApi.Model.PartialClosePositionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out OpenApi.Model.PartialClosePositionResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPositionSearchOpenPositions(SearchPositionRequest request);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private void ValidatePositionSearchOpenPositions(SearchPositionRequest request)
        {
            if (request == null)
                throw new ArgumentNullException(nameof(request));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        private void AfterPositionSearchOpenPositionsDefaultImplementation(IPositionSearchOpenPositionsApiResponse apiResponseLocalVar, SearchPositionRequest request)
        {
            bool suppressDefaultLog = false;
            AfterPositionSearchOpenPositions(ref suppressDefaultLog, apiResponseLocalVar, request);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="request"></param>
        partial void AfterPositionSearchOpenPositions(ref bool suppressDefaultLog, IPositionSearchOpenPositionsApiResponse apiResponseLocalVar, SearchPositionRequest request);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        private void OnErrorPositionSearchOpenPositionsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchPositionRequest request)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPositionSearchOpenPositions(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, request);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="request"></param>
        partial void OnErrorPositionSearchOpenPositions(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, SearchPositionRequest request);

        /// <summary>
        /// Searches for open positions based on the provided request. 
        /// </summary>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionSearchOpenPositionsApiResponse"/>&gt;</returns>
        public async Task<IPositionSearchOpenPositionsApiResponse?> PositionSearchOpenPositionsOrDefaultAsync(SearchPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PositionSearchOpenPositionsAsync(request, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Searches for open positions based on the provided request. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">A request containing search criteria.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPositionSearchOpenPositionsApiResponse"/>&gt;</returns>
        public async Task<IPositionSearchOpenPositionsApiResponse> PositionSearchOpenPositionsAsync(SearchPositionRequest request, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePositionSearchOpenPositions(request);

                FormatPositionSearchOpenPositions(request);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/api/Position/searchOpen"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/api/Position/searchOpen");

                    httpRequestMessageLocalVar.Content = (request as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(request, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json",
                        "text/json",
                        "application/*+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "text/plain",
                        "application/json",
                        "text/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        ILogger<PositionSearchOpenPositionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PositionSearchOpenPositionsApiResponse>();
                        PositionSearchOpenPositionsApiResponse apiResponseLocalVar;

                        switch ((int)httpResponseMessageLocalVar.StatusCode) {
                            default: {
                                string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                                apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/api/Position/searchOpen", requestedAtLocalVar, _jsonSerializerOptions);

                                break;
                            }
                        }

                        AfterPositionSearchOpenPositionsDefaultImplementation(apiResponseLocalVar, request);

                        Events.ExecuteOnPositionSearchOpenPositions(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPositionSearchOpenPositionsDefaultImplementation(e, "/api/Position/searchOpen", uriBuilderLocalVar.Path, request);
                Events.ExecuteOnErrorPositionSearchOpenPositions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PositionSearchOpenPositionsApiResponse"/>
        /// </summary>
        public partial class PositionSearchOpenPositionsApiResponse : OpenApi.Client.ApiResponse, IPositionSearchOpenPositionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PositionSearchOpenPositionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PositionSearchOpenPositionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PositionSearchOpenPositionsApiResponse(ILogger<PositionSearchOpenPositionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            /// <summary>
            /// The <see cref="PositionSearchOpenPositionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="contentStream"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PositionSearchOpenPositionsApiResponse(ILogger<PositionSearchOpenPositionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, System.IO.Stream contentStream, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, contentStream, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public OpenApi.Model.SearchPositionResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<OpenApi.Model.SearchPositionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out OpenApi.Model.SearchPositionResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
