// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPI.Client;

namespace OpenAPI.Model
{
    /// <summary>
    /// ModifyOrderRequest
    /// </summary>
    public partial class ModifyOrderRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModifyOrderRequest" /> class.
        /// </summary>
        /// <param name="accountId">accountId</param>
        /// <param name="orderId">orderId</param>
        /// <param name="size">size</param>
        /// <param name="limitPrice">limitPrice</param>
        /// <param name="stopPrice">stopPrice</param>
        /// <param name="trailPrice">trailPrice</param>
        [JsonConstructor]
        public ModifyOrderRequest(int accountId, long orderId, Option<int?> size = default, Option<decimal?> limitPrice = default, Option<decimal?> stopPrice = default, Option<decimal?> trailPrice = default)
        {
            AccountId = accountId;
            OrderId = orderId;
            SizeOption = size;
            LimitPriceOption = limitPrice;
            StopPriceOption = stopPrice;
            TrailPriceOption = trailPrice;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public long OrderId { get; set; }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of LimitPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LimitPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets LimitPrice
        /// </summary>
        [JsonPropertyName("limitPrice")]
        public decimal? LimitPrice { get { return this.LimitPriceOption; } set { this.LimitPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of StopPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> StopPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [JsonPropertyName("stopPrice")]
        public decimal? StopPrice { get { return this.StopPriceOption; } set { this.StopPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of TrailPrice
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TrailPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TrailPrice
        /// </summary>
        [JsonPropertyName("trailPrice")]
        public decimal? TrailPrice { get { return this.TrailPriceOption; } set { this.TrailPriceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModifyOrderRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  TrailPrice: ").Append(TrailPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ModifyOrderRequest" />
    /// </summary>
    public class ModifyOrderRequestJsonConverter : JsonConverter<ModifyOrderRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ModifyOrderRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ModifyOrderRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> accountId = default;
            Option<long?> orderId = default;
            Option<int?> size = default;
            Option<decimal?> limitPrice = default;
            Option<decimal?> stopPrice = default;
            Option<decimal?> trailPrice = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "orderId":
                            orderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "limitPrice":
                            limitPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "stopPrice":
                            stopPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "trailPrice":
                            trailPrice = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class ModifyOrderRequest.", nameof(accountId));

            if (!orderId.IsSet)
                throw new ArgumentException("Property is required for class ModifyOrderRequest.", nameof(orderId));

            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class ModifyOrderRequest.");

            if (orderId.IsSet && orderId.Value == null)
                throw new ArgumentNullException(nameof(orderId), "Property is not nullable for class ModifyOrderRequest.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class ModifyOrderRequest.");

            if (limitPrice.IsSet && limitPrice.Value == null)
                throw new ArgumentNullException(nameof(limitPrice), "Property is not nullable for class ModifyOrderRequest.");

            if (stopPrice.IsSet && stopPrice.Value == null)
                throw new ArgumentNullException(nameof(stopPrice), "Property is not nullable for class ModifyOrderRequest.");

            if (trailPrice.IsSet && trailPrice.Value == null)
                throw new ArgumentNullException(nameof(trailPrice), "Property is not nullable for class ModifyOrderRequest.");

            return new ModifyOrderRequest(accountId.Value!.Value!, orderId.Value!.Value!, size, limitPrice, stopPrice, trailPrice);
        }

        /// <summary>
        /// Serializes a <see cref="ModifyOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ModifyOrderRequest modifyOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, modifyOrderRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ModifyOrderRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="modifyOrderRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ModifyOrderRequest modifyOrderRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("accountId", modifyOrderRequest.AccountId);

            writer.WriteNumber("orderId", modifyOrderRequest.OrderId);

            if (modifyOrderRequest.SizeOption.IsSet)
                writer.WriteNumber("size", modifyOrderRequest.SizeOption.Value!.Value);

            if (modifyOrderRequest.LimitPriceOption.IsSet)
                writer.WriteNumber("limitPrice", modifyOrderRequest.LimitPriceOption.Value!.Value);

            if (modifyOrderRequest.StopPriceOption.IsSet)
                writer.WriteNumber("stopPrice", modifyOrderRequest.StopPriceOption.Value!.Value);

            if (modifyOrderRequest.TrailPriceOption.IsSet)
                writer.WriteNumber("trailPrice", modifyOrderRequest.TrailPriceOption.Value!.Value);
        }
    }
}
