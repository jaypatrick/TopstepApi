// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPI.Client;

namespace OpenAPI.Model
{
    /// <summary>
    /// AggregateBarModel
    /// </summary>
    public partial class AggregateBarModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AggregateBarModel" /> class.
        /// </summary>
        /// <param name="t">t</param>
        /// <param name="o">o</param>
        /// <param name="h">h</param>
        /// <param name="l">l</param>
        /// <param name="c">c</param>
        /// <param name="v">v</param>
        [JsonConstructor]
        public AggregateBarModel(DateTime t, decimal o, decimal h, decimal l, decimal c, long v)
        {
            T = t;
            O = o;
            H = h;
            L = l;
            C = c;
            V = v;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets T
        /// </summary>
        [JsonPropertyName("t")]
        public DateTime T { get; set; }

        /// <summary>
        /// Gets or Sets O
        /// </summary>
        [JsonPropertyName("o")]
        public decimal O { get; set; }

        /// <summary>
        /// Gets or Sets H
        /// </summary>
        [JsonPropertyName("h")]
        public decimal H { get; set; }

        /// <summary>
        /// Gets or Sets L
        /// </summary>
        [JsonPropertyName("l")]
        public decimal L { get; set; }

        /// <summary>
        /// Gets or Sets C
        /// </summary>
        [JsonPropertyName("c")]
        public decimal C { get; set; }

        /// <summary>
        /// Gets or Sets V
        /// </summary>
        [JsonPropertyName("v")]
        public long V { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AggregateBarModel {\n");
            sb.Append("  T: ").Append(T).Append("\n");
            sb.Append("  O: ").Append(O).Append("\n");
            sb.Append("  H: ").Append(H).Append("\n");
            sb.Append("  L: ").Append(L).Append("\n");
            sb.Append("  C: ").Append(C).Append("\n");
            sb.Append("  V: ").Append(V).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AggregateBarModel" />
    /// </summary>
    public class AggregateBarModelJsonConverter : JsonConverter<AggregateBarModel>
    {
        /// <summary>
        /// The format to use to serialize T
        /// </summary>
        public static string TFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AggregateBarModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AggregateBarModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> t = default;
            Option<decimal?> o = default;
            Option<decimal?> h = default;
            Option<decimal?> l = default;
            Option<decimal?> c = default;
            Option<long?> v = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "t":
                            t = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "o":
                            o = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "h":
                            h = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "l":
                            l = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "c":
                            c = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "v":
                            v = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!t.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(t));

            if (!o.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(o));

            if (!h.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(h));

            if (!l.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(l));

            if (!c.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(c));

            if (!v.IsSet)
                throw new ArgumentException("Property is required for class AggregateBarModel.", nameof(v));

            if (t.IsSet && t.Value == null)
                throw new ArgumentNullException(nameof(t), "Property is not nullable for class AggregateBarModel.");

            if (o.IsSet && o.Value == null)
                throw new ArgumentNullException(nameof(o), "Property is not nullable for class AggregateBarModel.");

            if (h.IsSet && h.Value == null)
                throw new ArgumentNullException(nameof(h), "Property is not nullable for class AggregateBarModel.");

            if (l.IsSet && l.Value == null)
                throw new ArgumentNullException(nameof(l), "Property is not nullable for class AggregateBarModel.");

            if (c.IsSet && c.Value == null)
                throw new ArgumentNullException(nameof(c), "Property is not nullable for class AggregateBarModel.");

            if (v.IsSet && v.Value == null)
                throw new ArgumentNullException(nameof(v), "Property is not nullable for class AggregateBarModel.");

            return new AggregateBarModel(t.Value!.Value!, o.Value!.Value!, h.Value!.Value!, l.Value!.Value!, c.Value!.Value!, v.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AggregateBarModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aggregateBarModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AggregateBarModel aggregateBarModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, aggregateBarModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AggregateBarModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aggregateBarModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AggregateBarModel aggregateBarModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("t", aggregateBarModel.T.ToString(TFormat));

            writer.WriteNumber("o", aggregateBarModel.O);

            writer.WriteNumber("h", aggregateBarModel.H);

            writer.WriteNumber("l", aggregateBarModel.L);

            writer.WriteNumber("c", aggregateBarModel.C);

            writer.WriteNumber("v", aggregateBarModel.V);
        }
    }
}
