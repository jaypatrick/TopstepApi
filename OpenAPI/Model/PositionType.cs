// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPI.Client;

namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Undefined 1 &#x3D; Long 2 &#x3D; Short
    /// </summary>
    /// <value>0 &#x3D; Undefined 1 &#x3D; Long 2 &#x3D; Short</value>
    public enum PositionType
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,

        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,

        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2
    }

    /// <summary>
    /// Converts <see cref="PositionType"/> to and from the JSON value
    /// </summary>
    public static class PositionTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="PositionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PositionType FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return PositionType.NUMBER_0;

            if (value.Equals((1).ToString()))
                return PositionType.NUMBER_1;

            if (value.Equals((2).ToString()))
                return PositionType.NUMBER_2;

            throw new NotImplementedException($"Could not convert value to type PositionType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="PositionType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PositionType? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return PositionType.NUMBER_0;

            if (value.Equals((1).ToString()))
                return PositionType.NUMBER_1;

            if (value.Equals((2).ToString()))
                return PositionType.NUMBER_2;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PositionType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(PositionType value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PositionType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class PositionTypeJsonConverter : JsonConverter<PositionType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PositionType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PositionType? result = rawValue == null
                ? null
                : PositionTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PositionType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="positionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PositionType positionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(PositionTypeValueConverter.ToJsonValue(positionType).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PositionType"/>
    /// </summary>
    public class PositionTypeNullableJsonConverter : JsonConverter<PositionType?>
    {
        /// <summary>
        /// Returns a PositionType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override PositionType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            PositionType? result = rawValue == null
                ? null
                : PositionTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the PositionType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="positionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, PositionType? positionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(positionType.HasValue ? PositionTypeValueConverter.ToJsonValue(positionType.Value).ToString() : "null");
        }
    }
}
