// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPI.Client;

namespace OpenAPI.Model
{
    /// <summary>
    /// ListAvailableContractResponse
    /// </summary>
    public partial class ListAvailableContractResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAvailableContractResponse" /> class.
        /// </summary>
        /// <param name="success">success</param>
        /// <param name="errorCode">errorCode</param>
        /// <param name="errorMessage">errorMessage</param>
        /// <param name="contracts">contracts</param>
        [JsonConstructor]
        public ListAvailableContractResponse(bool success, ListAvailableContractErrorCode errorCode, Option<string?> errorMessage = default, Option<List<ContractModel>?> contracts = default)
        {
            Success = success;
            ErrorCode = errorCode;
            ErrorMessageOption = errorMessage;
            ContractsOption = contracts;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ErrorCode
        /// </summary>
        [JsonPropertyName("errorCode")]
        public ListAvailableContractErrorCode ErrorCode { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }

        /// <summary>
        /// Used to track the state of ErrorMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ErrorMessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string? ErrorMessage { get { return this.ErrorMessageOption; } set { this.ErrorMessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Contracts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ContractModel>?> ContractsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Contracts
        /// </summary>
        [JsonPropertyName("contracts")]
        public List<ContractModel>? Contracts { get { return this.ContractsOption; } set { this.ContractsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListAvailableContractResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Contracts: ").Append(Contracts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ListAvailableContractResponse" />
    /// </summary>
    public class ListAvailableContractResponseJsonConverter : JsonConverter<ListAvailableContractResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListAvailableContractResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListAvailableContractResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> success = default;
            Option<ListAvailableContractErrorCode?> errorCode = default;
            Option<string?> errorMessage = default;
            Option<List<ContractModel>?> contracts = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "success":
                            success = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "errorCode":
                            string? errorCodeRawValue = utf8JsonReader.GetString();
                            if (errorCodeRawValue != null)
                                errorCode = new Option<ListAvailableContractErrorCode?>(ListAvailableContractErrorCodeValueConverter.FromStringOrDefault(errorCodeRawValue));
                            break;
                        case "errorMessage":
                            errorMessage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contracts":
                            contracts = new Option<List<ContractModel>?>(JsonSerializer.Deserialize<List<ContractModel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!success.IsSet)
                throw new ArgumentException("Property is required for class ListAvailableContractResponse.", nameof(success));

            if (!errorCode.IsSet)
                throw new ArgumentException("Property is required for class ListAvailableContractResponse.", nameof(errorCode));

            if (success.IsSet && success.Value == null)
                throw new ArgumentNullException(nameof(success), "Property is not nullable for class ListAvailableContractResponse.");

            if (errorCode.IsSet && errorCode.Value == null)
                throw new ArgumentNullException(nameof(errorCode), "Property is not nullable for class ListAvailableContractResponse.");

            if (errorMessage.IsSet && errorMessage.Value == null)
                throw new ArgumentNullException(nameof(errorMessage), "Property is not nullable for class ListAvailableContractResponse.");

            if (contracts.IsSet && contracts.Value == null)
                throw new ArgumentNullException(nameof(contracts), "Property is not nullable for class ListAvailableContractResponse.");

            return new ListAvailableContractResponse(success.Value!.Value!, errorCode.Value!.Value!, errorMessage, contracts);
        }

        /// <summary>
        /// Serializes a <see cref="ListAvailableContractResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listAvailableContractResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListAvailableContractResponse listAvailableContractResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listAvailableContractResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListAvailableContractResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listAvailableContractResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListAvailableContractResponse listAvailableContractResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listAvailableContractResponse.ErrorMessageOption.IsSet && listAvailableContractResponse.ErrorMessage == null)
                throw new ArgumentNullException(nameof(listAvailableContractResponse.ErrorMessage), "Property is required for class ListAvailableContractResponse.");

            if (listAvailableContractResponse.ContractsOption.IsSet && listAvailableContractResponse.Contracts == null)
                throw new ArgumentNullException(nameof(listAvailableContractResponse.Contracts), "Property is required for class ListAvailableContractResponse.");

            writer.WriteBoolean("success", listAvailableContractResponse.Success);

            var errorCodeRawValue = ListAvailableContractErrorCodeValueConverter.ToJsonValue(listAvailableContractResponse.ErrorCode);
            writer.WriteNumber("errorCode", errorCodeRawValue);

            if (listAvailableContractResponse.ErrorMessageOption.IsSet)
                writer.WriteString("errorMessage", listAvailableContractResponse.ErrorMessage);

            if (listAvailableContractResponse.ContractsOption.IsSet)
            {
                writer.WritePropertyName("contracts");
                JsonSerializer.Serialize(writer, listAvailableContractResponse.Contracts, jsonSerializerOptions);
            }
        }
    }
}
