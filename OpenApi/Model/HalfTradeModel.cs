// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenApi.Client;

namespace OpenApi.Model
{
    /// <summary>
    /// HalfTradeModel
    /// </summary>
    public partial class HalfTradeModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HalfTradeModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="accountId">accountId</param>
        /// <param name="contractId">contractId</param>
        /// <param name="creationTimestamp">creationTimestamp</param>
        /// <param name="price">price</param>
        /// <param name="fees">fees</param>
        /// <param name="side">side</param>
        /// <param name="size">size</param>
        /// <param name="voided">voided</param>
        /// <param name="orderId">orderId</param>
        /// <param name="profitAndLoss">profitAndLoss</param>
        [JsonConstructor]
        public HalfTradeModel(long id, int accountId, string contractId, DateTimeOffset creationTimestamp, decimal price, decimal fees, OrderSide side, int size, bool voided, long orderId, Option<decimal?> profitAndLoss = default)
        {
            Id = id;
            AccountId = accountId;
            ContractId = contractId;
            CreationTimestamp = creationTimestamp;
            Price = price;
            Fees = fees;
            Side = side;
            Size = size;
            Voided = voided;
            OrderId = orderId;
            ProfitAndLossOption = profitAndLoss;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [JsonPropertyName("side")]
        public OrderSide Side { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [JsonPropertyName("accountId")]
        public int AccountId { get; set; }

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets CreationTimestamp
        /// </summary>
        [JsonPropertyName("creationTimestamp")]
        public DateTimeOffset CreationTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public decimal Price { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [JsonPropertyName("fees")]
        public decimal Fees { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }

        /// <summary>
        /// Gets or Sets Voided
        /// </summary>
        [JsonPropertyName("voided")]
        public bool Voided { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public long OrderId { get; set; }

        /// <summary>
        /// Used to track the state of ProfitAndLoss
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ProfitAndLossOption { get; private set; }

        /// <summary>
        /// Gets or Sets ProfitAndLoss
        /// </summary>
        [JsonPropertyName("profitAndLoss")]
        public decimal? ProfitAndLoss { get { return this.ProfitAndLossOption; } set { this.ProfitAndLossOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HalfTradeModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  CreationTimestamp: ").Append(CreationTimestamp).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Voided: ").Append(Voided).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ProfitAndLoss: ").Append(ProfitAndLoss).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HalfTradeModel" />
    /// </summary>
    public class HalfTradeModelJsonConverter : JsonConverter<HalfTradeModel>
    {
        /// <summary>
        /// The format to use to serialize CreationTimestamp
        /// </summary>
        public static string CreationTimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="HalfTradeModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HalfTradeModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<int?> accountId = default;
            Option<string?> contractId = default;
            Option<DateTimeOffset?> creationTimestamp = default;
            Option<decimal?> price = default;
            Option<decimal?> fees = default;
            Option<OrderSide?> side = default;
            Option<int?> size = default;
            Option<bool?> voided = default;
            Option<long?> orderId = default;
            Option<decimal?> profitAndLoss = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "accountId":
                            accountId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contractId":
                            contractId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creationTimestamp":
                            creationTimestamp = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "price":
                            price = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "fees":
                            fees = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "side":
                            string? sideRawValue = utf8JsonReader.GetString();
                            if (sideRawValue != null)
                                side = new Option<OrderSide?>(OrderSideValueConverter.FromStringOrDefault(sideRawValue));
                            break;
                        case "size":
                            size = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "voided":
                            voided = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "orderId":
                            orderId = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "profitAndLoss":
                            profitAndLoss = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(id));

            if (!accountId.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(accountId));

            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(contractId));

            if (!creationTimestamp.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(creationTimestamp));

            if (!price.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(price));

            if (!fees.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(fees));

            if (!side.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(side));

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(size));

            if (!voided.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(voided));

            if (!orderId.IsSet)
                throw new ArgumentException("Property is required for class HalfTradeModel.", nameof(orderId));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class HalfTradeModel.");

            if (accountId.IsSet && accountId.Value == null)
                throw new ArgumentNullException(nameof(accountId), "Property is not nullable for class HalfTradeModel.");

            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class HalfTradeModel.");

            if (creationTimestamp.IsSet && creationTimestamp.Value == null)
                throw new ArgumentNullException(nameof(creationTimestamp), "Property is not nullable for class HalfTradeModel.");

            if (price.IsSet && price.Value == null)
                throw new ArgumentNullException(nameof(price), "Property is not nullable for class HalfTradeModel.");

            if (fees.IsSet && fees.Value == null)
                throw new ArgumentNullException(nameof(fees), "Property is not nullable for class HalfTradeModel.");

            if (side.IsSet && side.Value == null)
                throw new ArgumentNullException(nameof(side), "Property is not nullable for class HalfTradeModel.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class HalfTradeModel.");

            if (voided.IsSet && voided.Value == null)
                throw new ArgumentNullException(nameof(voided), "Property is not nullable for class HalfTradeModel.");

            if (orderId.IsSet && orderId.Value == null)
                throw new ArgumentNullException(nameof(orderId), "Property is not nullable for class HalfTradeModel.");

            if (profitAndLoss.IsSet && profitAndLoss.Value == null)
                throw new ArgumentNullException(nameof(profitAndLoss), "Property is not nullable for class HalfTradeModel.");

            return new HalfTradeModel(id.Value!.Value!, accountId.Value!.Value!, contractId.Value!, creationTimestamp.Value!.Value!, price.Value!.Value!, fees.Value!.Value!, side.Value!.Value!, size.Value!.Value!, voided.Value!.Value!, orderId.Value!.Value!, profitAndLoss);
        }

        /// <summary>
        /// Serializes a <see cref="HalfTradeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="halfTradeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HalfTradeModel halfTradeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, halfTradeModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HalfTradeModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="halfTradeModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HalfTradeModel halfTradeModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (halfTradeModel.ContractId == null)
                throw new ArgumentNullException(nameof(halfTradeModel.ContractId), "Property is required for class HalfTradeModel.");

            writer.WriteNumber("id", halfTradeModel.Id);

            writer.WriteNumber("accountId", halfTradeModel.AccountId);

            writer.WriteString("contractId", halfTradeModel.ContractId);

            writer.WriteString("creationTimestamp", halfTradeModel.CreationTimestamp.ToString(CreationTimestampFormat));

            writer.WriteNumber("price", halfTradeModel.Price);

            writer.WriteNumber("fees", halfTradeModel.Fees);

            var sideRawValue = OrderSideValueConverter.ToJsonValue(halfTradeModel.Side);
            writer.WriteNumber("side", sideRawValue);

            writer.WriteNumber("size", halfTradeModel.Size);

            writer.WriteBoolean("voided", halfTradeModel.Voided);

            writer.WriteNumber("orderId", halfTradeModel.OrderId);

            if (halfTradeModel.ProfitAndLossOption.IsSet)
                writer.WriteNumber("profitAndLoss", halfTradeModel.ProfitAndLossOption.Value!.Value);
        }
    }
}
