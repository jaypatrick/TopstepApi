// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPI.Client;

namespace OpenAPI.Model
{
    /// <summary>
    /// 0 &#x3D; Unspecified 1 &#x3D; Second 2 &#x3D; Minute 3 &#x3D; Hour 4 &#x3D; Day 5 &#x3D; Week 6 &#x3D; Month
    /// </summary>
    /// <value>0 &#x3D; Unspecified 1 &#x3D; Second 2 &#x3D; Minute 3 &#x3D; Hour 4 &#x3D; Day 5 &#x3D; Week 6 &#x3D; Month</value>
    public enum AggregateBarUnit
    {
        /// <summary>
        /// Enum NUMBER_0 for value: 0
        /// </summary>
        NUMBER_0 = 0,

        /// <summary>
        /// Enum NUMBER_1 for value: 1
        /// </summary>
        NUMBER_1 = 1,

        /// <summary>
        /// Enum NUMBER_2 for value: 2
        /// </summary>
        NUMBER_2 = 2,

        /// <summary>
        /// Enum NUMBER_3 for value: 3
        /// </summary>
        NUMBER_3 = 3,

        /// <summary>
        /// Enum NUMBER_4 for value: 4
        /// </summary>
        NUMBER_4 = 4,

        /// <summary>
        /// Enum NUMBER_5 for value: 5
        /// </summary>
        NUMBER_5 = 5,

        /// <summary>
        /// Enum NUMBER_6 for value: 6
        /// </summary>
        NUMBER_6 = 6
    }

    /// <summary>
    /// Converts <see cref="AggregateBarUnit"/> to and from the JSON value
    /// </summary>
    public static class AggregateBarUnitValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="AggregateBarUnit"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AggregateBarUnit FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return AggregateBarUnit.NUMBER_0;

            if (value.Equals((1).ToString()))
                return AggregateBarUnit.NUMBER_1;

            if (value.Equals((2).ToString()))
                return AggregateBarUnit.NUMBER_2;

            if (value.Equals((3).ToString()))
                return AggregateBarUnit.NUMBER_3;

            if (value.Equals((4).ToString()))
                return AggregateBarUnit.NUMBER_4;

            if (value.Equals((5).ToString()))
                return AggregateBarUnit.NUMBER_5;

            if (value.Equals((6).ToString()))
                return AggregateBarUnit.NUMBER_6;

            throw new NotImplementedException($"Could not convert value to type AggregateBarUnit: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="AggregateBarUnit"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AggregateBarUnit? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return AggregateBarUnit.NUMBER_0;

            if (value.Equals((1).ToString()))
                return AggregateBarUnit.NUMBER_1;

            if (value.Equals((2).ToString()))
                return AggregateBarUnit.NUMBER_2;

            if (value.Equals((3).ToString()))
                return AggregateBarUnit.NUMBER_3;

            if (value.Equals((4).ToString()))
                return AggregateBarUnit.NUMBER_4;

            if (value.Equals((5).ToString()))
                return AggregateBarUnit.NUMBER_5;

            if (value.Equals((6).ToString()))
                return AggregateBarUnit.NUMBER_6;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AggregateBarUnit"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(AggregateBarUnit value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AggregateBarUnit"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class AggregateBarUnitJsonConverter : JsonConverter<AggregateBarUnit>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AggregateBarUnit Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AggregateBarUnit? result = rawValue == null
                ? null
                : AggregateBarUnitValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AggregateBarUnit to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aggregateBarUnit"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AggregateBarUnit aggregateBarUnit, JsonSerializerOptions options)
        {
            writer.WriteStringValue(AggregateBarUnitValueConverter.ToJsonValue(aggregateBarUnit).ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AggregateBarUnit"/>
    /// </summary>
    public class AggregateBarUnitNullableJsonConverter : JsonConverter<AggregateBarUnit?>
    {
        /// <summary>
        /// Returns a AggregateBarUnit from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override AggregateBarUnit? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            AggregateBarUnit? result = rawValue == null
                ? null
                : AggregateBarUnitValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the AggregateBarUnit to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="aggregateBarUnit"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, AggregateBarUnit? aggregateBarUnit, JsonSerializerOptions options)
        {
            writer.WriteStringValue(aggregateBarUnit.HasValue ? AggregateBarUnitValueConverter.ToJsonValue(aggregateBarUnit.Value).ToString() : "null");
        }
    }
}
