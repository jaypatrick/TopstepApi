// <auto-generated>
/*
 * ProjectX Gateway API
 *
 * ProjectX Gateway API Documentation and specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenApi.Client;

namespace OpenApi.Model
{
    /// <summary>
    /// ContractModel
    /// </summary>
    public partial class ContractModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="description">description</param>
        /// <param name="tickSize">tickSize</param>
        /// <param name="tickValue">tickValue</param>
        /// <param name="activeContract">activeContract</param>
        /// <param name="symbolId">symbolId</param>
        [JsonConstructor]
        public ContractModel(string id, string name, string description, decimal tickSize, decimal tickValue, bool activeContract, string symbolId)
        {
            Id = id;
            Name = name;
            Description = description;
            TickSize = tickSize;
            TickValue = tickValue;
            ActiveContract = activeContract;
            SymbolId = symbolId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets TickSize
        /// </summary>
        [JsonPropertyName("tickSize")]
        public decimal TickSize { get; set; }

        /// <summary>
        /// Gets or Sets TickValue
        /// </summary>
        [JsonPropertyName("tickValue")]
        public decimal TickValue { get; set; }

        /// <summary>
        /// Gets or Sets ActiveContract
        /// </summary>
        [JsonPropertyName("activeContract")]
        public bool ActiveContract { get; set; }

        /// <summary>
        /// Gets or Sets SymbolId
        /// </summary>
        [JsonPropertyName("symbolId")]
        public string SymbolId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContractModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TickSize: ").Append(TickSize).Append("\n");
            sb.Append("  TickValue: ").Append(TickValue).Append("\n");
            sb.Append("  ActiveContract: ").Append(ActiveContract).Append("\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ContractModel" />
    /// </summary>
    public class ContractModelJsonConverter : JsonConverter<ContractModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ContractModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ContractModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> id = default;
            Option<string?> name = default;
            Option<string?> description = default;
            Option<decimal?> tickSize = default;
            Option<decimal?> tickValue = default;
            Option<bool?> activeContract = default;
            Option<string?> symbolId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tickSize":
                            tickSize = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "tickValue":
                            tickValue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "activeContract":
                            activeContract = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "symbolId":
                            symbolId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(name));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(description));

            if (!tickSize.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(tickSize));

            if (!tickValue.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(tickValue));

            if (!activeContract.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(activeContract));

            if (!symbolId.IsSet)
                throw new ArgumentException("Property is required for class ContractModel.", nameof(symbolId));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ContractModel.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ContractModel.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ContractModel.");

            if (tickSize.IsSet && tickSize.Value == null)
                throw new ArgumentNullException(nameof(tickSize), "Property is not nullable for class ContractModel.");

            if (tickValue.IsSet && tickValue.Value == null)
                throw new ArgumentNullException(nameof(tickValue), "Property is not nullable for class ContractModel.");

            if (activeContract.IsSet && activeContract.Value == null)
                throw new ArgumentNullException(nameof(activeContract), "Property is not nullable for class ContractModel.");

            if (symbolId.IsSet && symbolId.Value == null)
                throw new ArgumentNullException(nameof(symbolId), "Property is not nullable for class ContractModel.");

            return new ContractModel(id.Value!, name.Value!, description.Value!, tickSize.Value!.Value!, tickValue.Value!.Value!, activeContract.Value!.Value!, symbolId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ContractModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contractModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ContractModel contractModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, contractModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ContractModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="contractModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ContractModel contractModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (contractModel.Id == null)
                throw new ArgumentNullException(nameof(contractModel.Id), "Property is required for class ContractModel.");

            if (contractModel.Name == null)
                throw new ArgumentNullException(nameof(contractModel.Name), "Property is required for class ContractModel.");

            if (contractModel.Description == null)
                throw new ArgumentNullException(nameof(contractModel.Description), "Property is required for class ContractModel.");

            if (contractModel.SymbolId == null)
                throw new ArgumentNullException(nameof(contractModel.SymbolId), "Property is required for class ContractModel.");

            writer.WriteString("id", contractModel.Id);

            writer.WriteString("name", contractModel.Name);

            writer.WriteString("description", contractModel.Description);

            writer.WriteNumber("tickSize", contractModel.TickSize);

            writer.WriteNumber("tickValue", contractModel.TickValue);

            writer.WriteBoolean("activeContract", contractModel.ActiveContract);

            writer.WriteString("symbolId", contractModel.SymbolId);
        }
    }
}
